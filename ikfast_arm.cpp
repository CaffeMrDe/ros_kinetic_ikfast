/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2020-05-11 15:51:07.796449
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[0]);
x7=IKsin(j[3]);
x8=IKcos(j[5]);
x9=IKsin(j[5]);
x10=IKcos(j[4]);
x11=IKsin(j[4]);
x12=((1.0)*x10);
x13=((1.93e-6)*x4);
x14=((1.0)*x7);
x15=((0.4)*x4);
x16=((1.0)*x11);
x17=((9.9e-7)*x0);
x18=((0.4)*x6);
x19=((0.205)*x5);
x20=((1.0)*x6);
x21=((0.205)*x0);
x22=((9.9e-7)*x5);
x23=((9.9e-7)*x6);
x24=((1.0)*x0);
x25=(x1*x3);
x26=(x1*x2);
x27=(x11*x5);
x28=(x3*x4);
x29=(x2*x4);
x30=(x10*x5);
x31=((1.0)*x29);
x32=(x0*x26);
x33=(x28*x6);
x34=(x24*x29);
x35=(x20*x29);
x36=((((-1.0)*x25))+x31);
x37=((((-1.0)*x26))+(((-1.0)*x28)));
x38=((((-1.0)*x34))+((x0*x25)));
x39=((((-1.0)*x35))+((x25*x6)));
x40=(x37*x5);
x41=(x37*x7);
x42=(x24*(((((-1.0)*x26))+(((-1.0)*x28)))));
x43=(x20*(((((-1.0)*x26))+(((-1.0)*x28)))));
x44=(x38*x5);
x45=(x39*x5);
x46=(x11*x42);
x47=(x11*x43);
x48=((((-1.0)*x14*x6))+x44);
x49=(((x0*x7))+x45);
x50=(((x14*(((((-1.0)*x34))+((x24*x25))))))+((x20*x5)));
x51=(x10*x48);
x52=(((x14*(((((-1.0)*x35))+((x20*x25))))))+(((-1.0)*x24*x5)));
eerot[0]=(((x50*x9))+((x8*(((((-1.0)*x12*x48))+(((-1.0)*x16*x42)))))));
eerot[1]=(((x50*x8))+((x9*((x46+x51)))));
eerot[2]=(((x11*x48))+((x10*((((x0*x28))+x32)))));
IkReal x53=((1.0)*x17);
eetrans[0]=((((-1.0)*x0*x13))+((x11*(((((-1.0)*x26*x53))+(((-1.0)*x28*x53))))))+((x10*((((x22*x38))+(((-1.0)*x23*x7))))))+(((0.4)*x0*x1))+((x11*((((x19*x38))+(((-0.205)*x6*x7))))))+(((0.4)*x32))+((x10*((((x21*x28))+((x21*x26))))))+((x0*x15*x3)));
eerot[3]=(((x8*(((((-1.0)*x12*x49))+(((-1.0)*x16*x43))))))+((x52*x9)));
eerot[4]=(((x9*((((x10*x49))+x47))))+((x52*x8)));
eerot[5]=(((x11*x49))+((x10*((x33+((x26*x6)))))));
IkReal x54=((1.0)*x23);
eetrans[1]=(((x10*(((((0.205)*x33))+(((0.205)*x26*x6))))))+((x18*x26))+((x11*(((((-1.0)*x26*x54))+(((-1.0)*x28*x54))))))+((x10*((((x22*x39))+((x17*x7))))))+((x1*x18))+((x15*x3*x6))+((x11*((((x19*x39))+((x21*x7))))))+(((-1.0)*x13*x6)));
eerot[6]=(((x41*x9))+((x8*(((((-1.0)*x12*x40))+(((-1.0)*x16*x36)))))));
eerot[7]=(((x41*x8))+((x9*((((x11*x36))+((x30*x37)))))));
eerot[8]=(((x27*x37))+((x10*(((((-1.0)*x31))+x25)))));
IkReal x55=((1.0)*x15);
eetrans[2]=((0.3215)+(((-1.0)*x2*x55))+((x11*(((((-9.9e-7)*x25))+(((9.9e-7)*x29))))))+(((-1.93e-6)*x1))+((x10*(((((0.205)*x25))+(((-0.205)*x29))))))+((x30*(((((-9.9e-7)*x28))+(((-9.9e-7)*x26))))))+(((0.4)*x25))+((x27*(((((-0.205)*x28))+(((-0.205)*x26))))))+(((-1.0)*x55)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r00);
new_r01=((-1.0)*r01);
new_r02=r02;
new_px=(px+(((-0.205)*r02)));
new_r10=((-1.0)*r10);
new_r11=((-1.0)*r11);
new_r12=r12;
new_py=(py+(((-0.205)*r12)));
new_r20=((-1.0)*r20);
new_r21=((-1.0)*r21);
new_r22=r22;
new_pz=((-0.3215)+(((-0.205)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x56=((1.0)*px);
IkReal x57=((1.0)*pz);
IkReal x58=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x58))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x57)));
rxp0_2=((((-1.0)*r10*x56))+((py*r00)));
rxp1_0=((((-1.0)*r21*x58))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x57)));
rxp1_2=((((-1.0)*r11*x56))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x58)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x57)));
rxp2_2=((((-1.0)*r12*x56))+((py*r02)));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x59=((1.25)*pp);
IkReal x60=((2.475e-6)*npx);
IkReal x61=((1.0)*rxp2_2);
IkReal x62=((9.9e-7)*r21);
IkReal x63=((1.0)*npz);
IkReal x64=(x62+(((-1.0)*x61)));
IkReal x65=((-3.431e-12)+x59);
IkReal x66=((((-1.0)*x62))+(((-1.0)*x61)));
IkReal x67=(npz+x65+(((-1.0)*x60)));
IkReal x68=(x65+(((-1.0)*x63))+(((-1.0)*x60)));
IkReal x69=(x60+x65+(((-1.0)*x63)));
IkReal x70=(npz+x60+x65);
IkReal gconst0=x64;
IkReal gconst1=x68;
IkReal gconst2=x67;
IkReal gconst3=x64;
IkReal gconst4=x68;
IkReal gconst5=x67;
IkReal gconst6=x66;
IkReal gconst7=x69;
IkReal gconst8=x70;
IkReal gconst9=x66;
IkReal gconst10=x69;
IkReal gconst11=x70;
IkReal x71=npx*npx;
IkReal x72=rxp0_2*rxp0_2;
IkReal x73=rxp2_2*rxp2_2;
IkReal x74=r21*r21;
IkReal x75=(gconst6*gconst7);
IkReal x76=(gconst11*r21);
IkReal x77=((4.0)*gconst6);
IkReal x78=((1.98e-5)*npx);
IkReal x79=((4.95e-6)*npy);
IkReal x80=(gconst8*r21);
IkReal x81=(npx*rxp1_2);
IkReal x82=(gconst10*gconst9);
IkReal x83=((1.98e-6)*r20);
IkReal x84=((3.96e-6)*gconst6);
IkReal x85=(npy*rxp2_2);
IkReal x86=((1.9602e-11)*rxp0_2);
IkReal x87=(gconst11*rxp2_2);
IkReal x88=((1.9602e-12)*r20);
IkReal x89=(gconst10*gconst8);
IkReal x90=((7.8408e-12)*r20);
IkReal x91=(r20*rxp2_2);
IkReal x92=(gconst6*rxp2_2);
IkReal x93=(gconst10*gconst6);
IkReal x94=(npy*r21);
IkReal x95=((7.92e-6)*r20);
IkReal x96=(gconst6*npx);
IkReal x97=(gconst8*rxp0_2);
IkReal x98=(r20*r21);
IkReal x99=(gconst10*rxp0_2);
IkReal x100=((7.92e-6)*rxp1_2);
IkReal x101=(gconst8*rxp2_2);
IkReal x102=(gconst8*r20);
IkReal x103=((4.9005e-12)*npy);
IkReal x104=(rxp2_2*x71);
IkReal x105=(gconst6*npy*rxp0_2);
IkReal x106=(npx*x99);
IkReal x107=(r21*x71);
IkReal x108=(gconst8*x73);
IkReal x109=((4.851495e-18)*npy*x74);
IkReal x110=((1.98e-5)*npy*x72);
op[0]=((((-1.0)*gconst11*x108))+(((-3.881196e-18)*gconst6*r21))+(((-1.98e-6)*x101*x76))+((x101*x82))+(((-7.8408e-12)*r21*x96))+(((-3.9204e-12)*rxp0_2*x80))+(((-4.0)*npx*rxp2_2*x97))+(((-9.801e-13)*gconst11*gconst8*x74))+(((-3.96e-6)*npx*rxp0_2*x80))+(((-4.0)*x72*x89))+(((9.9e-7)*x75*x76))+(((-1.0)*x106*x77))+(((-1.0)*x75*x82))+((x75*x87))+(((-1.0)*x84*x99))+(((-3.96e-6)*rxp2_2*x97))+(((-3.9204e-12)*x92))+(((-1.0)*x104*x77))+(((-7.92e-6)*npx*x92))+(((9.9e-7)*x80*x82))+(((-1.0)*x107*x84)));
op[1]=((((-1.56816e-11)*npx*x91))+(((-1.0)*npx*x86*x94))+((gconst6*x103*x76))+(((-1.0)*x107*x90))+(((-1.0)*x105*x78))+(((1.56816e-11)*r20*x96))+((gconst9*x101*x79))+(((-1.0)*gconst7*x82*x83))+((npx*x95*x97))+((rxp2_2*x83*x89))+(((-1.0)*gconst11*x109))+(((7.762392e-18)*gconst6*r20))+(((-1.0)*x100*x101))+(((-1.0)*gconst6*npy*x86))+(((-1.0)*x90*x99))+(((-8.0)*x101*x81))+(((-1.0)*gconst11*x73*x79))+((rxp2_2*x75*x79))+(((-1.0)*gconst10*x110))+(((4.9005e-12)*x82*x94))+(((-1.0)*x108*x79))+(((-1.0)*gconst11*x75*x83))+(((-7.92e-6)*npy*rxp0_2*x80))+(((-1.0)*gconst6*x79*x82))+(((-1.940598e-17)*rxp0_2*x94))+(((-16.0)*rxp0_2*rxp1_2*x89))+(((3.96e-6)*x102*x87))+(((-7.762392e-18)*x91))+((x90*x97))+(((-7.8408e-12)*rxp1_2*x80))+(((-1.0)*gconst8*x110))+(((-8.0)*x81*x93))+((gconst9*x103*x80))+(((-1.56816e-11)*gconst6*x94))+(((-1.0)*gconst8*x109))+(((-1.584e-5)*gconst6*x85))+(((-1.584e-5)*x94*x96))+(((-8.0)*x85*x97))+(((-7.92e-6)*x80*x81))+(((-9.801e-12)*x76*x85))+(((-16.0)*x85*x96))+((gconst7*x83*x87))+((rxp2_2*x79*x82))+(((-9.801e-12)*x80*x85))+(((-1.0)*x100*x93))+(((-1.0)*gconst10*x75*x83))+(((-8.0)*npy*rxp0_2*x93))+((gconst10*x80*x88))+(((3.9204e-12)*x102*x76))+(((-1.0)*x106*x95))+(((-7.68476808e-24)*x98))+(((4.9005e-12)*x75*x94))+((gconst6*x71*x95))+(((-7.92e-6)*x71*x91))+(((-1.0)*gconst8*x82*x83))+(((-1.0)*x85*x86))+(((-1.5524784e-17)*npx*x98))+((gconst7*x76*x88))+(((-1.0)*rxp0_2*x78*x85))+(((-1.0)*gconst9*x75*x79))+((gconst6*x79*x87)));
op[2]=((((1.188e-5)*gconst8*npx*r21*rxp0_2))+(((-3.96e-5)*npx*npy*rxp1_2*rxp2_2))+(((9.9e-7)*gconst0*gconst11*gconst7*r21))+(((-7.92e-6)*gconst6*npx*rxp2_2))+(((-3.881196e-17)*npy*r21*rxp1_2))+(((2.910897e-17)*gconst11*npy*r20*r21))+(((-9.801e-12)*gconst8*gconst9*npy*r20))+(((-3.881196e-18)*gconst6*r21))+((gconst10*gconst3*gconst8*rxp2_2))+(((-3.9204e-11)*npy*rxp1_2*rxp2_2))+(((-16.0)*gconst10*gconst6*npy*rxp1_2))+(((3.9204e-12)*gconst8*r21*rxp0_2))+((gconst10*gconst8*gconst9*rxp2_2))+(((-1.584e-5)*gconst10*npy*r20*rxp0_2))+(((-4.0)*gconst4*gconst8*(rxp0_2*rxp0_2)))+((gconst11*gconst6*gconst7*rxp2_2))+(((1.188e-5)*gconst6*r21*(npx*npx)))+(((-4.851495e-17)*r21*rxp2_2*(npy*npy)))+(((-3.96e-6)*gconst2*npx*r21*rxp0_2))+(((-7.92e-6)*gconst0*npx*rxp2_2))+(((1.56816e-11)*(npx*npx)*(r20*r20)))+(((-9.801e-11)*(npy*npy)*(rxp0_2*rxp0_2)))+(((-1.0)*gconst5*gconst8*(rxp2_2*rxp2_2)))+(((-3.96e-6)*gconst0*r21*(npx*npx)))+(((-1.17612e-11)*gconst6*rxp2_2))+(((9.70299e-18)*gconst7*npy*r20*r21))+(((2.45025e-11)*gconst9*rxp2_2*(npy*npy)))+(((1.584e-5)*gconst8*npy*r20*rxp0_2))+(((9.9e-7)*gconst10*gconst2*gconst9*r21))+(((-16.0)*gconst10*gconst8*(rxp1_2*rxp1_2)))+(((7.8408e-12)*gconst6*npx*r21))+(((9.9e-7)*gconst5*gconst6*gconst7*r21))+(((-1.56816e-11)*gconst10*r20*rxp1_2))+(((-9.9e-7)*gconst11*gconst6*gconst7*r21))+((gconst5*gconst6*gconst7*rxp2_2))+(((-1.0)*gconst10*gconst3*gconst6*gconst7))+(((-9.801e-12)*gconst7*gconst9*npy*r20))+(((-1.0)*gconst11*gconst2*(rxp2_2*rxp2_2)))+(((3.1049568e-17)*npx*(r20*r20)))+(((-3.96e-6)*gconst2*rxp0_2*rxp2_2))+(((-3.96e-5)*rxp0_2*rxp2_2*(npy*npy)))+(((-7.92e-5)*gconst8*npy*rxp0_2*rxp1_2))+(((1.9602e-12)*gconst11*gconst8*(r21*r21)))+(((-3.9204e-12)*gconst0*rxp2_2))+(((-4.0)*gconst0*rxp2_2*(npx*npx)))+(((-15.9999999999755)*gconst6*rxp2_2*(npy*npy)))+(((4.0)*gconst8*npx*rxp0_2*rxp2_2))+(((-1.98e-6)*gconst5*gconst8*r21*rxp2_2))+(((-9.9e-7)*gconst10*gconst8*gconst9*r21))+(((-1.9602e-11)*gconst10*gconst9*npy*r20))+(((2.910897e-17)*gconst8*npy*r20*r21))+(((9.9e-7)*gconst10*gconst3*gconst8*r21))+(((-4.0)*gconst0*gconst10*npx*rxp0_2))+(((-9.801e-12)*gconst11*gconst6*npy*r20))+(((1.536953616e-23)*(r20*r20)))+(((9.801e-12)*gconst7*npy*r20*rxp2_2))+(((-3.13632e-11)*npx*npy*r20*r21))+(((-16.0)*gconst8*npy*rxp1_2*rxp2_2))+(((8.0)*gconst10*gconst6*npx*rxp0_2))+(((-3.9204e-12)*gconst11*gconst8*(r20*r20)))+(((-2.45025e-11)*gconst6*gconst9*(npy*npy)))+(((3.168e-5)*gconst6*npx*npy*r20))+(((-2.0)*gconst11*gconst8*(rxp2_2*rxp2_2)))+(((-3.9204e-12)*gconst10*gconst8*(r20*r20)))+(((8.0)*gconst10*gconst8*(rxp0_2*rxp0_2)))+((gconst0*gconst11*gconst7*rxp2_2))+(((-2.45025e-11)*(npy*npy)*(rxp2_2*rxp2_2)))+(((-3.96e-6)*gconst0*gconst10*rxp0_2))+(((-4.0)*gconst2*npx*rxp0_2*rxp2_2))+(((-3.9204e-12)*gconst11*gconst7*(r20*r20)))+(((9.9e-7)*gconst4*gconst8*gconst9*r21))+(((2.9403e-11)*gconst8*npy*r20*rxp2_2))+((gconst4*gconst8*gconst9*rxp2_2))+(((1.584e-5)*gconst8*npx*r20*rxp1_2))+((gconst10*gconst2*gconst9*rxp2_2))+(((-1.0)*gconst4*gconst6*gconst7*gconst9))+(((-3.9204e-11)*npx*npy*r21*rxp1_2))+(((-3.96e-6)*gconst4*gconst6*rxp0_2))+(((2.9403e-11)*gconst11*npy*r20*rxp2_2))+(((-1.9602e-11)*gconst6*gconst7*npy*r20))+(((-9.801e-13)*gconst11*gconst2*(r21*r21)))+(((-3.9204e-11)*gconst6*npy*rxp1_2))+(((-4.0)*gconst4*gconst6*npx*rxp0_2))+(((4.0)*gconst6*rxp2_2*(npx*npx)))+(((-1.584e-5)*gconst10*npx*r20*rxp1_2))+(((1.56816e-11)*gconst8*r20*rxp1_2))+(((-1.58399999999757e-5)*gconst6*r21*(npy*npy)))+(((9.801e-12)*gconst10*npy*r20*rxp2_2))+(((-1.0)*gconst1*gconst10*gconst6*gconst9))+(((-2.401490025e-23)*(npy*npy)*(r21*r21)))+(((-7.92e-5)*gconst10*npy*rxp0_2*rxp1_2))+(((-3.1049568e-17)*npy*r20*r21))+(((-4.0)*gconst10*gconst2*(rxp0_2*rxp0_2)))+(((-1.0)*gconst0*gconst10*gconst7*gconst9))+((gconst1*gconst11*gconst6*rxp2_2))+(((-7.8408e-12)*gconst0*npx*r21))+(((9.9e-7)*gconst1*gconst11*gconst6*r21))+(((9.70299e-18)*gconst10*npy*r20*r21))+(((3.13632e-11)*gconst6*npy*r20))+(((-3.881196e-18)*gconst0*r21))+(((-3.9204e-12)*gconst10*gconst7*(r20*r20)))+(((-3.9204e-12)*gconst2*r21*rxp0_2))+(((-3.168e-5)*npx*npy*r20*rxp2_2))+(((-9.801e-13)*gconst5*gconst8*(r21*r21)))+(((-3.96e-5)*gconst6*npx*npy*rxp1_2))+(((-1.584e-5)*gconst8*npy*r21*rxp1_2))+(((2.4257475e-17)*gconst9*r21*(npy*npy)))+(((-3.96e-5)*gconst6*rxp0_2*(npy*npy)))+(((-3.9204e-11)*r21*rxp0_2*(npy*npy)))+(((-3.96e-6)*gconst8*rxp0_2*rxp2_2))+(((-1.98e-6)*gconst11*gconst2*r21*rxp2_2))+(((-9.801e-12)*gconst10*gconst6*npy*r20))+(((-3.13632e-11)*npy*r20*rxp2_2)));
op[3]=((((-9.801e-12)*gconst5*npy*r21*rxp2_2))+(((7.762392e-18)*gconst0*r20))+(((4.9005e-12)*gconst1*gconst6*npy*r21))+(((-4.9005e-12)*gconst10*gconst9*npy*r21))+(((-4.95e-6)*gconst4*gconst6*gconst9*npy))+(((3.96e-5)*gconst6*npx*npy*rxp0_2))+(((-16.0)*gconst4*gconst8*rxp0_2*rxp1_2))+(((3.96e-6)*gconst5*gconst8*r20*rxp2_2))+(((-4.95e-6)*gconst10*gconst3*gconst6*npy))+(((2.35224e-11)*r20*r21*(npx*npx)))+(((1.940598e-17)*npy*r21*rxp0_2))+(((-1.98e-6)*gconst1*gconst10*gconst9*r20))+(((-4.95e-6)*gconst0*gconst10*gconst9*npy))+(((-9.9e-6)*gconst11*npy*(rxp2_2*rxp2_2)))+(((3.9204e-12)*gconst5*gconst8*r20*r21))+(((-9.801e-12)*gconst2*npy*r21*rxp2_2))+(((-4.95e-6)*gconst5*npy*(rxp2_2*rxp2_2)))+(((3.96e-6)*gconst11*gconst2*r20*rxp2_2))+(((-16.0)*gconst10*gconst2*rxp0_2*rxp1_2))+(((-1.98e-6)*gconst5*gconst6*gconst7*r20))+(((-1.9602e-11)*npy*rxp0_2*rxp2_2))+(((4.95e-6)*gconst0*gconst7*npy*rxp2_2))+(((-4.851495e-18)*gconst5*npy*(r21*r21)))+(((-1.98e-5)*gconst4*npy*(rxp0_2*rxp0_2)))+(((-4.95e-6)*gconst3*gconst6*gconst7*npy))+(((6.2099136e-17)*npy*(r20*r20)))+(((4.95e-6)*gconst11*gconst6*npy*rxp2_2))+(((-1.56816e-11)*npx*r20*rxp2_2))+(((1.5524784e-17)*npx*r20*r21))+(((1.98e-6)*gconst4*gconst8*r20*rxp2_2))+(((-1.98e-5)*gconst0*npx*npy*rxp0_2))+(((4.95e-6)*gconst0*gconst11*npy*rxp2_2))+(((-1.98e-6)*gconst0*gconst11*gconst7*r20))+(((-8.0)*gconst4*gconst6*npy*rxp0_2))+(((-7.68476808e-24)*r20*r21))+(((-1.98e-6)*gconst1*gconst10*gconst6*r20))+(((-3.9204e-10)*rxp0_2*rxp1_2*(npy*npy)))+(((-4.9005e-12)*gconst6*gconst7*npy*r21))+(((-4.9005e-12)*gconst11*gconst6*npy*r21))+(((1.9602e-12)*gconst10*gconst2*r20*r21))+(((-16.0)*gconst0*npx*npy*rxp2_2))+(((-3.9204e-12)*gconst11*gconst8*r20*r21))+(((3.96e-5)*gconst10*npy*(rxp0_2*rxp0_2)))+(((-1.9602e-12)*gconst11*gconst7*r20*r21))+(((-8.0)*gconst2*npy*rxp0_2*rxp2_2))+(((-9.70299e-17)*gconst9*r20*(npy*npy)))+(((1.98e-6)*gconst5*gconst7*r20*rxp2_2))+(((4.9005e-12)*gconst4*gconst9*npy*r21))+(((1.9602e-12)*gconst4*gconst8*r20*r21))+(((-1.9602e-12)*gconst10*gconst8*r20*r21))+(((-3.168e-5)*gconst10*npy*r20*rxp1_2))+(((8.0)*gconst10*gconst6*npx*rxp1_2))+(((-4.95e-6)*gconst1*gconst6*gconst9*npy))+(((-1.584e-5)*gconst0*npx*npy*r21))+(((-3.881196e-17)*gconst11*npy*(r20*r20)))+(((4.95e-6)*gconst6*gconst7*npy*rxp2_2))+(((7.92e-6)*gconst0*r20*(npx*npx)))+(((-7.92e-6)*gconst2*npx*r21*rxp1_2))+(((1.9602e-12)*gconst1*gconst11*r20*r21))+(((-1.584e-5)*gconst0*npy*rxp2_2))+(((4.95e-6)*gconst2*gconst9*npy*rxp2_2))+(((-1.584e-5)*gconst8*rxp1_2*rxp2_2))+(((4.95e-6)*gconst4*gconst9*npy*rxp2_2))+(((-7.92e-6)*gconst4*npx*r20*rxp0_2))+(((-7.8408e-11)*r21*rxp1_2*(npy*npy)))+(((4.95e-6)*gconst5*gconst6*npy*rxp2_2))+(((-8.0)*gconst0*gconst10*npy*rxp0_2))+(((-1.56816e-11)*gconst0*npy*r21))+(((-1.98e-6)*gconst4*gconst7*gconst9*r20))+(((4.95e-6)*gconst3*gconst8*npy*rxp2_2))+(((-1.98e-6)*gconst4*gconst8*gconst9*r20))+(((-4.95e-6)*gconst0*gconst7*gconst9*npy))+(((-3.168e-5)*gconst6*npy*rxp2_2))+(((4.95e-6)*gconst10*gconst9*npy*rxp2_2))+(((-3.13631999998079e-11)*r20*r21*(npy*npy)))+(((1.98e-6)*gconst10*gconst8*r20*rxp2_2))+(((-1.98e-6)*gconst4*gconst6*gconst7*r20))+(((4.95e-6)*gconst1*gconst6*npy*rxp2_2))+(((-7.92e-5)*gconst8*npy*(rxp1_2*rxp1_2)))+(((-3.881196e-17)*gconst8*npy*(r20*r20)))+(((1.584e-5)*gconst8*npy*r21*rxp0_2))+(((-1.9602e-11)*gconst0*npy*rxp0_2))+(((3.168e-5)*gconst6*npx*npy*r21))+(((-7.8408e-12)*gconst2*r21*rxp1_2))+(((-7.92e-6)*gconst2*rxp1_2*rxp2_2))+(((5.8806e-11)*npx*npy*r21*rxp0_2))+(((-1.98e-6)*gconst1*gconst11*gconst6*r20))+(((1.584e-5)*gconst10*npx*r20*rxp0_2))+(((9.70299e-18)*gconst8*npy*(r21*r21)))+(((-7.92e-6)*gconst2*npy*r21*rxp0_2))+(((4.9005e-12)*gconst10*gconst3*npy*r21))+(((4.9005e-12)*gconst2*gconst9*npy*r21))+(((-3.881196e-17)*gconst10*npy*(r20*r20)))+(((3.96e-6)*gconst11*gconst8*r20*rxp2_2))+(((-7.92e-5)*gconst10*npy*(rxp1_2*rxp1_2)))+(((-9.9e-6)*gconst8*npy*(rxp2_2*rxp2_2)))+(((-7.8408e-12)*gconst4*r20*rxp0_2))+(((1.9602e-12)*gconst5*gconst7*r20*r21))+(((-7.92e-5)*rxp1_2*rxp2_2*(npy*npy)))+(((4.9005e-12)*gconst0*gconst7*npy*r21))+(((-7.92e-6)*gconst4*gconst6*rxp1_2))+(((16.0)*gconst10*gconst8*rxp0_2*rxp1_2))+(((1.98e-6)*gconst10*gconst2*r20*rxp2_2))+(((-3.16799999998059e-5)*r20*rxp2_2*(npy*npy)))+(((3.168e-5)*gconst8*npy*r20*rxp1_2))+(((3.1679999999903e-5)*gconst6*r20*(npy*npy)))+(((6.27264e-11)*npx*npy*(r20*r20)))+(((-1.98e-6)*gconst10*gconst2*gconst9*r20))+(((-1.98e-6)*gconst10*gconst3*gconst8*r20))+(((-3.881196e-17)*gconst7*npy*(r20*r20)))+(((1.5524784e-17)*gconst6*r20))+(((3.96e-5)*gconst8*npy*(rxp0_2*rxp0_2)))+(((7.8408e-12)*gconst2*r20*rxp0_2))+(((-1.98e-6)*gconst10*gconst3*gconst7*r20))+(((-7.92e-6)*gconst10*gconst6*rxp1_2))+(((1.98e-5)*npx*npy*rxp0_2*rxp2_2))+(((-1.584e-5)*gconst8*npx*r20*rxp0_2))+(((1.584e-5)*gconst8*npx*r21*rxp1_2))+(((9.70299e-18)*gconst11*npy*(r21*r21)))+(((-1.98e-6)*gconst0*gconst10*gconst7*r20))+(((-8.0)*gconst0*gconst10*npx*rxp1_2))+(((4.9005e-12)*gconst0*gconst11*npy*r21))+(((1.98e-6)*gconst11*gconst7*r20*rxp2_2))+(((-4.851495e-18)*gconst2*npy*(r21*r21)))+(((4.95e-6)*gconst10*gconst3*npy*rxp2_2))+(((1.98e-6)*gconst1*gconst11*r20*rxp2_2))+(((7.92e-6)*gconst2*npx*r20*rxp0_2))+(((8.0)*gconst10*gconst6*npy*rxp0_2))+(((-1.584e-5)*gconst6*r20*(npx*npx)))+(((1.56816e-11)*gconst0*npx*r20))+(((-8.0)*gconst4*gconst6*npx*rxp1_2))+(((4.9005e-12)*gconst5*gconst6*npy*r21))+(((-7.92e-5)*gconst6*rxp1_2*(npy*npy)))+(((-7.92e-6)*gconst0*gconst10*rxp1_2))+(((-4.9005e-12)*gconst8*gconst9*npy*r21))+(((3.9204e-12)*gconst11*gconst2*r20*r21))+(((-1.98e-5)*gconst2*npy*(rxp0_2*rxp0_2)))+(((7.92e-6)*r20*rxp2_2*(npx*npx)))+(((4.95e-6)*gconst8*gconst9*npy*rxp2_2))+(((-4.95e-6)*gconst2*npy*(rxp2_2*rxp2_2)))+(((-8.0)*gconst2*npx*rxp1_2*rxp2_2))+(((4.9005e-12)*gconst3*gconst8*npy*r21))+(((-2.3287176e-17)*r20*rxp2_2)));
op[4]=((((9.70299e-18)*gconst1*npy*r20*r21))+(((-3.96e-5)*gconst0*npx*npy*rxp1_2))+((gconst3*gconst4*gconst8*rxp2_2))+(((-2.4257475e-17)*gconst9*r21*(npy*npy)))+(((9.9e-7)*gconst3*gconst4*gconst8*r21))+(((-16.0)*gconst10*gconst2*(rxp1_2*rxp1_2)))+(((-1.17612e-11)*gconst0*rxp2_2))+((gconst10*gconst3*gconst8*rxp2_2))+(((-2.0)*gconst11*gconst2*(rxp2_2*rxp2_2)))+(((4.0)*gconst0*rxp2_2*(npx*npx)))+(((-1.0)*gconst11*gconst8*(rxp2_2*rxp2_2)))+(((1.188e-5)*gconst2*npx*r21*rxp0_2))+(((3.9204e-12)*gconst8*r21*rxp0_2))+((gconst10*gconst2*gconst3*rxp2_2))+(((-1.9602e-11)*gconst10*gconst3*npy*r20))+(((-1.9602e-11)*gconst4*gconst9*npy*r20))+(((1.584e-5)*gconst10*npx*r20*rxp1_2))+(((-9.801e-12)*gconst4*gconst6*npy*r20))+(((-7.92e-6)*gconst0*npx*rxp2_2))+(((3.96e-5)*gconst6*npx*npy*rxp1_2))+(((-2.910897e-17)*gconst11*npy*r20*r21))+(((4.0)*gconst2*npx*rxp0_2*rxp2_2))+(((9.9e-7)*gconst2*gconst4*gconst9*r21))+(((-1.9602e-11)*gconst0*gconst7*npy*r20))+(((-1.17612e-11)*gconst6*rxp2_2))+(((-3.9204e-12)*gconst1*gconst11*(r20*r20)))+(((-4.9005e-11)*(npy*npy)*(rxp2_2*rxp2_2)))+(((-1.584e-5)*gconst8*npx*r20*rxp1_2))+(((-6.27264e-11)*npy*r20*rxp2_2))+(((2.910897e-17)*gconst2*npy*r20*r21))+(((2.45025e-11)*gconst9*rxp2_2*(npy*npy)))+(((-3.96e-5)*gconst0*rxp0_2*(npy*npy)))+(((8.0)*gconst0*gconst10*npx*rxp0_2))+(((2.4257475e-17)*gconst3*r21*(npy*npy)))+(((-1.98e-6)*gconst2*gconst5*r21*rxp2_2))+(((7.8408e-12)*gconst6*npx*r21))+(((3.96e-6)*gconst10*gconst6*rxp0_2))+(((8.0)*gconst4*gconst8*(rxp0_2*rxp0_2)))+(((3.073907232e-23)*(r20*r20)))+(((1.9602e-12)*gconst11*gconst2*(r21*r21)))+(((-2.45025e-11)*gconst3*gconst6*(npy*npy)))+(((9.70299e-18)*gconst4*npy*r20*r21))+(((-1.56816e-11)*gconst10*r20*rxp1_2))+(((-1.56816e-11)*gconst4*r20*rxp1_2))+(((-3.9204e-12)*gconst1*gconst10*(r20*r20)))+(((-1.0)*gconst0*gconst10*gconst3*gconst7))+(((-9.801e-12)*gconst3*gconst8*npy*r20))+(((-16.0)*gconst4*gconst6*npy*rxp1_2))+(((1.584e-5)*gconst2*npy*r20*rxp0_2))+(((-3.9204e-12)*gconst4*gconst7*(r20*r20)))+((gconst5*gconst6*gconst7*rxp2_2))+(((3.168e-5)*gconst0*npx*npy*r20))+(((-9.801e-12)*gconst3*gconst7*npy*r20))+(((-1.0)*gconst1*gconst4*gconst6*gconst9))+(((3.96e-6)*gconst8*rxp0_2*rxp2_2))+(((4.80298005e-23)*(npy*npy)*(r21*r21)))+(((-3.96e-6)*gconst2*rxp0_2*rxp2_2))+(((-1.0)*gconst0*gconst1*gconst10*gconst9))+(((1.9602e-12)*gconst5*gconst8*(r21*r21)))+(((-4.0)*gconst10*gconst6*npx*rxp0_2))+(((1.584e-5)*gconst10*npy*r20*rxp0_2))+(((-2.45025e-11)*gconst0*gconst9*(npy*npy)))+(((1.584e-5)*gconst8*npy*r21*rxp1_2))+(((-15.9999999999755)*gconst6*rxp2_2*(npy*npy)))+(((4.0)*gconst8*npx*rxp0_2*rxp2_2))+(((1.9602e-10)*(npy*npy)*(rxp0_2*rxp0_2)))+(((-9.801e-12)*gconst0*gconst10*npy*r20))+(((-9.9e-7)*gconst4*gconst8*gconst9*r21))+(((-1.584e-5)*gconst4*npx*r20*rxp1_2))+(((-9.70299e-18)*gconst7*npy*r20*r21))+(((-9.801e-12)*gconst5*gconst6*npy*r20))+(((3.13632e-11)*gconst0*npy*r20))+(((-4.0)*gconst10*gconst8*(rxp0_2*rxp0_2)))+(((-3.9204e-10)*(npy*npy)*(rxp1_2*rxp1_2)))+(((7.92e-5)*gconst10*npy*rxp0_2*rxp1_2))+(((2.9403e-11)*gconst5*npy*r20*rxp2_2))+(((2.9403e-11)*gconst2*npy*r20*rxp2_2))+(((6.27264e-11)*npx*npy*r20*r21))+(((9.801e-12)*gconst7*npy*r20*rxp2_2))+(((3.96e-5)*gconst6*rxp0_2*(npy*npy)))+(((-16.0)*gconst8*npy*rxp1_2*rxp2_2))+(((9.9e-7)*gconst0*gconst1*gconst11*r21))+(((-1.584e-5)*gconst2*npy*r21*rxp1_2))+(((-9.9e-7)*gconst1*gconst11*gconst6*r21))+(((-9.70299e-18)*gconst10*npy*r20*r21))+(((9.9e-7)*gconst10*gconst2*gconst3*r21))+((gconst1*gconst5*gconst6*rxp2_2))+(((-3.9204e-11)*gconst0*npy*rxp1_2))+(((-7.92e-5)*gconst2*npy*rxp0_2*rxp1_2))+(((7.92e-6)*gconst6*npx*rxp2_2))+(((-9.801e-12)*gconst1*gconst9*npy*r20))+(((-2.910897e-17)*gconst8*npy*r20*r21))+(((7.8408e-11)*r21*rxp0_2*(npy*npy)))+(((2.45025e-11)*gconst3*rxp2_2*(npy*npy)))+(((-3.9204e-12)*gconst5*gconst7*(r20*r20)))+(((-9.801e-12)*gconst0*gconst11*npy*r20))+((gconst0*gconst11*gconst7*rxp2_2))+(((-16.0)*gconst0*gconst10*npy*rxp1_2))+(((-7.92e-5)*gconst4*npy*rxp0_2*rxp1_2))+(((3.9204e-12)*gconst2*r21*rxp0_2))+(((-7.8408e-11)*npy*rxp1_2*rxp2_2))+(((-1.9602e-11)*gconst1*gconst6*npy*r20))+(((-9.801e-13)*gconst2*gconst5*(r21*r21)))+(((2.9403e-11)*gconst8*npy*r20*rxp2_2))+((gconst4*gconst8*gconst9*rxp2_2))+((gconst10*gconst2*gconst9*rxp2_2))+(((-1.0)*gconst1*gconst10*gconst3*gconst6))+(((1.584e-5)*gconst2*npx*r20*rxp1_2))+(((6.27263999996158e-11)*(npy*npy)*(r20*r20)))+(((-1.584e-5)*gconst4*npy*r20*rxp0_2))+(((2.9403e-11)*gconst11*npy*r20*rxp2_2))+(((-3.168e-5)*gconst6*npx*npy*r20))+(((9.9e-7)*gconst0*gconst5*gconst7*r21))+(((-3.9204e-11)*gconst6*npy*rxp1_2))+(((-9.9e-7)*gconst0*gconst11*gconst7*r21))+(((4.0)*gconst6*rxp2_2*(npx*npx)))+(((-1.188e-5)*gconst8*npx*r21*rxp0_2))+(((-15.9999999999755)*gconst0*rxp2_2*(npy*npy)))+(((1.56816e-11)*gconst8*r20*rxp1_2))+(((-9.801e-13)*gconst11*gconst8*(r21*r21)))+(((9.801e-12)*gconst10*npy*r20*rxp2_2))+(((-2.0)*gconst5*gconst8*(rxp2_2*rxp2_2)))+(((-3.9204e-12)*gconst11*gconst2*(r20*r20)))+(((-3.13632e-11)*(npx*npx)*(r20*r20)))+(((-1.0)*gconst0*gconst4*gconst7*gconst9))+((gconst1*gconst11*gconst6*rxp2_2))+((gconst2*gconst4*gconst9*rxp2_2))+(((3.13632e-11)*gconst6*npy*r20))+(((1.56816e-11)*gconst2*r20*rxp1_2))+((gconst0*gconst1*gconst11*rxp2_2))+(((-3.9204e-12)*gconst4*gconst8*(r20*r20)))+(((-3.881196e-18)*gconst0*r21))+(((9.9e-7)*gconst1*gconst5*gconst6*r21))+(((-16.0)*gconst2*npy*rxp1_2*rxp2_2))+(((8.0)*gconst4*gconst6*npx*rxp0_2))+(((-4.0)*gconst0*gconst4*npx*rxp0_2))+(((1.188e-5)*gconst0*r21*(npx*npx)))+(((-1.0)*gconst3*gconst4*gconst6*gconst7))+(((-9.801e-12)*gconst2*gconst9*npy*r20))+(((-1.584e-5)*gconst8*npy*r20*rxp0_2))+(((9.801e-12)*gconst1*npy*r20*rxp2_2))+(((-1.188e-5)*gconst6*r21*(npx*npx)))+(((2.910897e-17)*gconst5*npy*r20*r21))+(((-9.9e-7)*gconst5*gconst6*gconst7*r21))+(((7.92e-5)*gconst8*npy*rxp0_2*rxp1_2))+(((-4.0)*gconst2*gconst4*(rxp0_2*rxp0_2)))+(((7.8408e-12)*gconst0*npx*r21))+(((-1.0)*gconst2*gconst5*(rxp2_2*rxp2_2)))+(((1.98e-6)*gconst11*gconst8*r21*rxp2_2))+(((-9.9e-7)*gconst10*gconst2*gconst9*r21))+(((-3.96e-6)*gconst0*gconst4*rxp0_2))+(((8.0)*gconst10*gconst2*(rxp0_2*rxp0_2)))+(((9.801e-12)*gconst4*npy*r20*rxp2_2))+(((3.881196e-18)*gconst6*r21))+(((-1.58399999999757e-5)*gconst0*r21*(npy*npy)))+(((-9.9e-7)*gconst10*gconst3*gconst8*r21))+(((-3.9204e-12)*gconst10*gconst2*(r20*r20)))+(((-3.9204e-12)*gconst5*gconst8*(r20*r20)))+(((7.8408e-11)*npx*npy*r21*rxp1_2))+(((-16.0)*gconst4*gconst8*(rxp1_2*rxp1_2)))+(((1.58399999999757e-5)*gconst6*r21*(npy*npy)))+((gconst0*gconst5*gconst7*rxp2_2)));
op[5]=((((7.92e-6)*gconst8*npx*r20*rxp0_2))+(((3.96e-5)*gconst0*npx*npy*rxp0_2))+(((-4.9005e-12)*gconst0*gconst11*npy*r21))+(((-3.881196e-17)*gconst1*npy*(r20*r20)))+(((-4.95e-6)*gconst11*npy*(rxp2_2*rxp2_2)))+(((-16.0)*gconst2*gconst4*rxp0_2*rxp1_2))+(((3.96e-6)*gconst5*gconst8*r20*rxp2_2))+(((1.940598e-17)*npy*r21*rxp0_2))+(((3.96e-6)*gconst2*gconst5*r20*rxp2_2))+(((-3.881196e-17)*gconst2*npy*(r20*r20)))+(((-1.584e-5)*gconst6*npy*rxp2_2))+(((7.8408e-12)*gconst8*r21*rxp1_2))+(((-2.35224e-11)*r20*r21*(npx*npx)))+(((3.96e-6)*gconst11*gconst2*r20*rxp2_2))+(((-1.98e-6)*gconst0*gconst4*gconst7*r20))+(((-7.92e-6)*gconst0*gconst4*rxp1_2))+(((-4.95e-6)*gconst3*gconst4*gconst6*npy))+(((-3.881196e-17)*gconst5*npy*(r20*r20)))+(((4.95e-6)*gconst0*gconst7*npy*rxp2_2))+(((7.8408e-11)*r21*rxp1_2*(npy*npy)))+(((6.2099136e-17)*npy*(r20*r20)))+(((-1.98e-6)*gconst0*gconst1*gconst10*r20))+(((4.95e-6)*gconst0*gconst1*npy*rxp2_2))+(((-7.8408e-12)*gconst8*r20*rxp0_2))+(((-4.95e-6)*gconst0*gconst4*gconst9*npy))+(((9.70299e-18)*gconst5*npy*(r21*r21)))+(((7.68476808e-24)*r20*r21))+(((3.1679999999903e-5)*gconst0*r20*(npy*npy)))+(((1.5524784e-17)*npx*r20*r21))+(((1.98e-6)*gconst4*gconst8*r20*rxp2_2))+(((7.762392e-18)*gconst6*r20))+(((8.0)*gconst8*npx*rxp1_2*rxp2_2))+(((4.95e-6)*gconst0*gconst11*npy*rxp2_2))+(((-1.9602e-12)*gconst5*gconst7*r20*r21))+(((-1.98e-5)*gconst8*npy*(rxp0_2*rxp0_2)))+(((-4.95e-6)*gconst0*gconst10*gconst3*npy))+(((4.95e-6)*gconst3*gconst4*npy*rxp2_2))+(((-4.851495e-18)*gconst11*npy*(r21*r21)))+(((1.584e-5)*gconst2*npx*r21*rxp1_2))+(((-1.584e-5)*gconst2*rxp1_2*rxp2_2))+(((3.9204e-10)*rxp0_2*rxp1_2*(npy*npy)))+(((8.0)*gconst4*gconst6*npx*rxp1_2))+(((-4.9005e-12)*gconst4*gconst9*npy*r21))+(((3.13631999998079e-11)*r20*r21*(npy*npy)))+(((1.584e-5)*gconst2*npy*r21*rxp0_2))+(((-1.98e-6)*gconst10*gconst2*gconst3*r20))+(((1.98e-6)*gconst5*gconst7*r20*rxp2_2))+(((-1.9602e-12)*gconst10*gconst2*r20*r21))+(((-8.0)*gconst0*gconst4*npx*rxp1_2))+(((-1.584e-5)*gconst2*npx*r20*rxp0_2))+(((4.9005e-12)*gconst3*gconst4*npy*r21))+(((3.168e-5)*gconst0*npx*npy*r21))+(((8.0)*gconst0*gconst10*npy*rxp0_2))+(((-1.9602e-12)*gconst1*gconst11*r20*r21))+(((-3.9204e-12)*gconst5*gconst8*r20*r21))+(((-1.98e-5)*gconst10*npy*(rxp0_2*rxp0_2)))+(((-1.98e-6)*gconst1*gconst10*gconst3*r20))+(((-1.98e-5)*gconst6*npx*npy*rxp0_2))+(((-5.8806e-11)*npx*npy*r21*rxp0_2))+(((4.9005e-12)*gconst0*gconst5*npy*r21))+(((4.9005e-12)*gconst0*gconst1*npy*r21))+(((-4.95e-6)*gconst1*gconst3*gconst6*npy))+(((1.56816e-11)*gconst6*npy*r21))+(((3.96e-5)*gconst4*npy*(rxp0_2*rxp0_2)))+(((4.95e-6)*gconst2*gconst9*npy*rxp2_2))+(((-7.92e-6)*gconst8*rxp1_2*rxp2_2))+(((3.96e-5)*gconst2*npy*(rxp0_2*rxp0_2)))+(((-3.168e-5)*gconst4*npy*r20*rxp1_2))+(((4.95e-6)*gconst4*gconst9*npy*rxp2_2))+(((-4.95e-6)*gconst0*gconst3*gconst7*npy))+(((4.95e-6)*gconst5*gconst6*npy*rxp2_2))+(((-4.9005e-12)*gconst3*gconst8*npy*r21))+(((-4.95e-6)*gconst8*npy*(rxp2_2*rxp2_2)))+(((4.95e-6)*gconst0*gconst5*npy*rxp2_2))+(((-7.92e-6)*gconst10*npx*r20*rxp0_2))+(((-1.584e-5)*gconst6*npx*npy*r21))+(((4.95e-6)*gconst2*gconst3*npy*rxp2_2))+(((4.95e-6)*gconst3*gconst8*npy*rxp2_2))+(((-6.27264e-11)*npx*npy*(r20*r20)))+(((3.9204e-12)*gconst2*gconst5*r20*r21))+(((16.0)*gconst4*gconst8*rxp0_2*rxp1_2))+(((-1.584e-5)*gconst0*r20*(npx*npx)))+(((4.9005e-12)*gconst2*gconst3*npy*r21))+(((-3.9204e-12)*gconst11*gconst2*r20*r21))+(((-1.98e-6)*gconst1*gconst4*gconst9*r20))+(((-4.95e-6)*gconst0*gconst1*gconst9*npy))+(((-7.92e-5)*gconst2*npy*(rxp1_2*rxp1_2)))+(((4.95e-6)*gconst1*gconst6*npy*rxp2_2))+(((8.0)*gconst8*npy*rxp0_2*rxp2_2))+(((-3.881196e-17)*gconst4*npy*(r20*r20)))+(((-4.9005e-12)*gconst0*gconst7*npy*r21))+(((9.801e-12)*gconst8*npy*r21*rxp2_2))+(((-4.9005e-12)*gconst2*gconst9*npy*r21))+(((-4.9005e-12)*gconst1*gconst6*npy*r21))+(((1.56816e-11)*npx*r20*rxp2_2))+(((7.92e-6)*gconst6*r20*(npx*npx)))+(((1.9602e-12)*gconst2*gconst4*r20*r21))+(((-9.70299e-17)*gconst3*r20*(npy*npy)))+(((-1.98e-6)*gconst1*gconst4*gconst6*r20))+(((-7.92e-5)*gconst4*npy*(rxp1_2*rxp1_2)))+(((-7.92e-5)*rxp1_2*rxp2_2*(npy*npy)))+(((-7.92e-6)*gconst4*gconst6*rxp1_2))+(((1.98e-6)*gconst10*gconst2*r20*rxp2_2))+(((-3.16799999998059e-5)*r20*rxp2_2*(npy*npy)))+(((-7.92e-6)*gconst8*npy*r21*rxp0_2))+(((-4.9005e-12)*gconst10*gconst3*npy*r21))+(((1.5524784e-17)*gconst0*r20))+(((-4.9005e-12)*gconst5*gconst6*npy*r21))+(((8.0)*gconst0*gconst10*npx*rxp1_2))+(((-9.9e-6)*gconst2*npy*(rxp2_2*rxp2_2)))+(((-1.98e-6)*gconst3*gconst4*gconst7*r20))+(((16.0)*gconst10*gconst2*rxp0_2*rxp1_2))+(((-1.9602e-12)*gconst4*gconst8*r20*r21))+(((1.9602e-11)*npy*rxp0_2*rxp2_2))+(((9.801e-12)*gconst11*npy*r21*rxp2_2))+(((-9.9e-6)*gconst5*npy*(rxp2_2*rxp2_2)))+(((7.8408e-12)*gconst10*r20*rxp0_2))+(((1.98e-5)*npx*npy*rxp0_2*rxp2_2))+(((1.584e-5)*gconst4*npx*r20*rxp0_2))+(((9.70299e-18)*gconst2*npy*(r21*r21)))+(((8.0)*gconst4*gconst6*npy*rxp0_2))+(((4.95e-6)*gconst10*gconst3*npy*rxp2_2))+(((1.98e-6)*gconst2*gconst4*r20*rxp2_2))+(((1.98e-6)*gconst1*gconst11*r20*rxp2_2))+(((-4.851495e-18)*gconst8*npy*(r21*r21)))+(((-1.98e-6)*gconst3*gconst4*gconst8*r20))+(((-3.168e-5)*gconst0*npy*rxp2_2))+(((-1.98e-6)*gconst1*gconst5*gconst6*r20))+(((-8.0)*gconst0*gconst4*npy*rxp0_2))+(((-1.56816e-11)*gconst6*npx*r20))+(((1.9602e-11)*gconst6*npy*rxp0_2))+(((-1.98e-6)*gconst2*gconst4*gconst9*r20))+(((-7.92e-6)*gconst8*npx*r21*rxp1_2))+(((-7.92e-6)*gconst0*gconst10*rxp1_2))+(((-7.92e-5)*gconst0*rxp1_2*(npy*npy)))+(((7.92e-6)*r20*rxp2_2*(npx*npx)))+(((1.98e-6)*gconst1*gconst5*r20*rxp2_2))+(((16.0)*gconst6*npx*npy*rxp2_2))+(((1.9602e-12)*gconst1*gconst5*r20*r21))+(((-1.98e-6)*gconst0*gconst5*gconst7*r20))+(((-1.98e-6)*gconst0*gconst1*gconst11*r20))+(((3.168e-5)*gconst2*npy*r20*rxp1_2))+(((-2.3287176e-17)*r20*rxp2_2)));
op[6]=(((gconst3*gconst4*gconst8*rxp2_2))+(((3.96e-6)*gconst6*r21*(npx*npx)))+(((-2.910897e-17)*gconst2*npy*r20*r21))+(((-4.0)*gconst8*npx*rxp0_2*rxp2_2))+(((-9.9e-7)*gconst0*gconst1*gconst11*r21))+(((-1.17612e-11)*gconst0*rxp2_2))+(((-3.9204e-11)*npy*rxp1_2*rxp2_2))+(((-9.9e-7)*gconst2*gconst4*gconst9*r21))+(((-16.0)*gconst2*gconst4*(rxp1_2*rxp1_2)))+(((4.0)*gconst0*rxp2_2*(npx*npx)))+(((-4.0)*gconst4*gconst8*(rxp0_2*rxp0_2)))+((gconst10*gconst2*gconst3*rxp2_2))+(((1.56816e-11)*(npx*npx)*(r20*r20)))+(((4.0)*gconst2*npx*rxp0_2*rxp2_2))+(((-9.801e-11)*(npy*npy)*(rxp0_2*rxp0_2)))+(((-1.0)*gconst5*gconst8*(rxp2_2*rxp2_2)))+(((-9.801e-12)*gconst2*gconst3*npy*r20))+(((3.96e-5)*rxp0_2*rxp2_2*(npy*npy)))+((gconst0*gconst1*gconst5*rxp2_2))+(((-9.9e-7)*gconst3*gconst4*gconst8*r21))+(((-1.0)*gconst0*gconst1*gconst4*gconst9))+(((-1.56816e-11)*gconst4*r20*rxp1_2))+(((-2.910897e-17)*gconst5*npy*r20*r21))+(((4.851495e-17)*r21*rxp2_2*(npy*npy)))+(((3.96e-6)*gconst2*rxp0_2*rxp2_2))+(((-1.0)*gconst1*gconst3*gconst4*gconst6))+(((-9.70299e-18)*gconst1*npy*r20*r21))+(((-9.801e-12)*gconst0*gconst5*npy*r20))+(((3.96e-6)*gconst8*rxp0_2*rxp2_2))+(((-1.9602e-11)*gconst0*gconst1*npy*r20))+(((-1.0)*gconst11*gconst2*(rxp2_2*rxp2_2)))+(((-1.0)*gconst0*gconst1*gconst10*gconst3))+(((-1.9602e-11)*gconst3*gconst4*npy*r20))+(((3.168e-5)*npx*npy*r20*rxp2_2))+(((-1.188e-5)*gconst2*npx*r21*rxp0_2))+(((3.13632e-11)*gconst0*npy*r20))+(((-4.0)*gconst0*gconst10*npx*rxp0_2))+(((1.584e-5)*gconst4*npx*r20*rxp1_2))+(((2.9403e-11)*gconst5*npy*r20*rxp2_2))+(((1.536953616e-23)*(r20*r20)))+(((2.9403e-11)*gconst2*npy*r20*rxp2_2))+(((-3.13632e-11)*npx*npy*r20*r21))+((gconst1*gconst5*gconst6*rxp2_2))+(((-3.9204e-11)*gconst0*npy*rxp1_2))+(((-3.9204e-12)*gconst2*gconst5*(r20*r20)))+(((3.96e-5)*gconst0*rxp0_2*(npy*npy)))+(((7.92e-6)*gconst6*npx*rxp2_2))+(((3.1049568e-17)*npy*r20*r21))+(((-3.9204e-12)*gconst8*r21*rxp0_2))+(((-4.0)*gconst6*rxp2_2*(npx*npx)))+(((2.45025e-11)*gconst3*rxp2_2*(npy*npy)))+(((7.92e-6)*gconst0*npx*rxp2_2))+(((3.96e-5)*npx*npy*rxp1_2*rxp2_2))+(((-7.8408e-12)*gconst6*npx*r21))+(((-1.584e-5)*gconst2*npx*r20*rxp1_2))+(((3.96e-6)*gconst8*npx*r21*rxp0_2))+(((-1.0)*gconst0*gconst3*gconst4*gconst7))+(((1.98e-6)*gconst5*gconst8*r21*rxp2_2))+(((-2.45025e-11)*(npy*npy)*(rxp2_2*rxp2_2)))+(((-1.188e-5)*gconst0*r21*(npx*npx)))+(((-3.9204e-12)*gconst2*gconst4*(r20*r20)))+(((3.9204e-12)*gconst2*r21*rxp0_2))+(((-9.70299e-18)*gconst4*npy*r20*r21))+(((-3.9204e-12)*gconst6*rxp2_2))+(((-3.1049568e-17)*npx*(r20*r20)))+(((-16.0)*gconst0*gconst4*npy*rxp1_2))+(((9.9e-7)*gconst0*gconst1*gconst5*r21))+(((-9.9e-7)*gconst10*gconst2*gconst3*r21))+(((-3.9204e-11)*npx*npy*r21*rxp1_2))+(((-9.9e-7)*gconst0*gconst5*gconst7*r21))+(((-9.801e-13)*gconst11*gconst2*(r21*r21)))+(((-4.0)*gconst4*gconst6*npx*rxp0_2))+(((9.9e-7)*gconst2*gconst3*gconst4*r21))+(((-2.0)*gconst2*gconst5*(rxp2_2*rxp2_2)))+(((-9.801e-12)*gconst0*gconst4*npy*r20))+(((1.58399999999757e-5)*gconst0*r21*(npy*npy)))+(((7.92e-5)*gconst2*npy*rxp0_2*rxp1_2))+(((-15.9999999999755)*gconst0*rxp2_2*(npy*npy)))+(((-9.9e-7)*gconst1*gconst5*gconst6*r21))+(((-2.401490025e-23)*(npy*npy)*(r21*r21)))+(((3.881196e-18)*gconst0*r21))+(((8.0)*gconst0*gconst4*npx*rxp0_2))+(((3.96e-6)*gconst4*gconst6*rxp0_2))+(((-4.0)*gconst10*gconst2*(rxp0_2*rxp0_2)))+((gconst2*gconst4*gconst9*rxp2_2))+(((1.98e-6)*gconst11*gconst2*r21*rxp2_2))+(((8.0)*gconst2*gconst4*(rxp0_2*rxp0_2)))+(((1.56816e-11)*gconst2*r20*rxp1_2))+(((1.9602e-12)*gconst2*gconst5*(r21*r21)))+((gconst0*gconst1*gconst11*rxp2_2))+(((1.584e-5)*gconst4*npy*r20*rxp0_2))+(((-9.801e-12)*gconst1*gconst3*npy*r20))+(((3.881196e-17)*npy*r21*rxp1_2))+(((-16.0)*gconst2*npy*rxp1_2*rxp2_2))+(((-3.168e-5)*gconst0*npx*npy*r20))+(((-9.801e-13)*gconst5*gconst8*(r21*r21)))+(((3.96e-6)*gconst0*gconst10*rxp0_2))+(((9.801e-12)*gconst1*npy*r20*rxp2_2))+((gconst2*gconst3*gconst4*rxp2_2))+(((-3.9204e-12)*gconst1*gconst5*(r20*r20)))+(((-2.4257475e-17)*gconst3*r21*(npy*npy)))+(((3.96e-5)*gconst0*npx*npy*rxp1_2))+(((-3.9204e-11)*r21*rxp0_2*(npy*npy)))+(((7.8408e-12)*gconst0*npx*r21))+(((-3.9204e-12)*gconst1*gconst4*(r20*r20)))+(((-1.584e-5)*gconst2*npy*r20*rxp0_2))+(((1.584e-5)*gconst2*npy*r21*rxp1_2))+(((9.801e-12)*gconst4*npy*r20*rxp2_2))+(((-2.45025e-11)*gconst0*gconst3*(npy*npy)))+(((3.881196e-18)*gconst6*r21))+(((-3.13632e-11)*npy*r20*rxp2_2))+((gconst0*gconst5*gconst7*rxp2_2))+(((7.92e-5)*gconst4*npy*rxp0_2*rxp1_2)));
IkReal x111=npx*npx;
IkReal x112=rxp2_2*rxp2_2;
IkReal x113=r21*r21;
IkReal x114=rxp0_2*rxp0_2;
IkReal x115=(gconst2*r21);
IkReal x116=((7.92e-6)*rxp1_2);
IkReal x117=((1.98e-6)*gconst5);
IkReal x118=((4.95e-6)*gconst1);
IkReal x119=(npy*rxp0_2);
IkReal x120=((1.98e-6)*gconst4);
IkReal x121=(npy*r21);
IkReal x122=(gconst0*gconst1);
IkReal x123=(gconst0*r20);
IkReal x124=(gconst0*gconst4);
IkReal x125=((1.56816e-11)*npx);
IkReal x126=((9.801e-12)*rxp2_2);
IkReal x127=((4.95e-6)*npy);
IkReal x128=((7.8408e-12)*r20);
IkReal x129=(gconst1*r20);
IkReal x130=(r20*rxp2_2);
IkReal x131=(npx*rxp0_2);
IkReal x132=(gconst3*gconst4);
IkReal x133=((1.98e-5)*npy);
IkReal x134=(npx*rxp2_2);
IkReal x135=(gconst2*rxp0_2);
IkReal x136=(npx*r21);
IkReal x137=(gconst2*rxp2_2);
IkReal x138=(gconst5*r21);
IkReal x139=(gconst2*r20);
IkReal x140=(gconst3*npy);
IkReal x141=(gconst0*rxp2_2);
IkReal x142=((8.0)*rxp1_2);
IkReal x143=(gconst0*npx);
IkReal x144=(gconst4*r20);
IkReal x145=(gconst2*gconst5);
IkReal x146=(npy*x141);
IkReal x147=(r20*x122);
IkReal x148=(gconst5*x112);
IkReal x149=(r21*x111);
IkReal x150=((7.92e-6)*x111);
IkReal x151=(gconst4*x114);
IkReal x152=((4.851495e-18)*npy*x113);
op[7]=((((-1.0)*x130*x150))+((gconst5*x127*x141))+(((-1.0)*gconst2*x114*x133))+((x123*x150))+(((-1.0)*x123*x125))+(((1.9602e-11)*x119*x136))+(((-1.98e-5)*x119*x134))+(((7.8408e-12)*rxp1_2*x115))+(((1.56816e-11)*gconst0*x121))+((npx*x124*x142))+(((-1.0)*x120*x147))+(((7.68476808e-24)*r20*r21))+(((-1.584e-5)*x146))+(((-7.762392e-18)*x130))+(((-1.584e-5)*x121*x143))+((rxp2_2*x127*x132))+((x128*x149))+(((-1.0)*x133*x151))+(((16.0)*gconst0*npy*x134))+(((-1.940598e-17)*r21*x119))+(((-1.0)*x116*x124))+((rxp2_2*x117*x129))+(((-4.9005e-12)*x121*x122))+(((-1.5524784e-17)*r20*x136))+(((-1.0)*x116*x137))+(((-1.0)*gconst3*x120*x139))+(((3.96e-6)*x130*x145))+(((7.762392e-18)*x123))+(((-3.9204e-12)*gconst5*r20*x115))+(((-4.9005e-12)*x121*x132))+((x118*x146))+(((-1.0)*x128*x135))+(((8.0)*x119*x137))+(((-1.0)*gconst3*x120*x129))+(((8.0)*x119*x124))+(((-1.0)*gconst5*x152))+((gconst4*rxp0_2*x128))+(((-1.0)*gconst0*x118*x140))+(((-1.0)*x117*x147))+((x125*x130))+(((-1.0)*npx*x115*x116))+(((-7.92e-6)*x131*x144))+(((-7.92e-6)*x115*x119))+((npy*x115*x126))+((gconst3*x127*x137))+(((1.9602e-11)*gconst0*x119))+(((1.9602e-11)*rxp2_2*x119))+((gconst5*x121*x126))+(((7.92e-6)*x131*x139))+(((-1.98e-5)*x119*x143))+(((16.0)*gconst4*rxp1_2*x135))+(((-1.9602e-12)*x129*x138))+(((-1.0)*gconst3*x124*x127))+(((-1.9602e-12)*x115*x144))+(((-4.9005e-12)*gconst0*gconst5*x121))+(((-4.9005e-12)*x115*x140))+(((-1.0)*gconst2*x152))+(((-1.0)*gconst2*x112*x127))+((gconst2*x134*x142))+(((-1.0)*x127*x148))+((gconst2*x120*x130)));
op[8]=((((-9.9e-7)*x122*x138))+(((-7.8408e-12)*gconst0*x136))+(((-4.0)*x124*x131))+(((-1.0)*x122*x132))+(((-4.0)*x111*x141))+((rxp2_2*x115*x117))+(((-1.0)*x112*x145))+(((7.92e-6)*gconst0*x134))+(((3.96e-6)*rxp2_2*x135))+(((-4.0)*gconst2*x151))+(((3.96e-6)*gconst0*x149))+(((-9.9e-7)*x115*x132))+(((-4.0)*x131*x137))+(((3.96e-6)*x115*x131))+(((-9.801e-13)*x113*x145))+(((3.96e-6)*rxp0_2*x124))+((x132*x137))+(((3.881196e-18)*gconst0*r21))+(((-3.9204e-12)*x141))+(((-3.9204e-12)*rxp0_2*x115))+((gconst5*rxp2_2*x122)));
polyroots8(op,zeror,numroots);
IkReal j5array[8], cj5array[8], sj5array[8], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[8]={true,true,true,true,true,true,true,true};
_nj5 = 8;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j4eval[2];
IkReal x153=cj5*cj5;
IkReal x154=((1010101.01010101)*npy);
IkReal x155=(cj5*sj5);
IkReal x156=((1020304050607.08)*rxp2_2);
IkReal x157=(cj5*npx);
IkReal x158=((1010101.01010101)*npx);
IkReal x159=(r20*sj5);
IkReal x160=(npy*sj5);
IkReal x161=((9.9e-7)*npx);
IkReal x162=((9.9e-7)*npy);
IkReal x163=(cj5*r21);
IkReal x164=(r20*x153);
IkReal x165=(r21*x153);
IkReal x166=(cj5*npz*rxp0_2);
IkReal x167=(npz*rxp1_2*sj5);
j4eval[0]=((((1010101.01010101)*rxp2_2))+((x156*x160))+(((-1020304050607.08)*x167))+(((-1.0)*x163))+(((-1.0)*x159))+((x154*x164))+(((-1.0)*x156*x157))+(((-1.0)*r21*x154*x155))+((r20*x155*x158))+(((-1.0)*r20*x154))+((x158*x165))+(((1020304050607.08)*x166)));
j4eval[1]=IKsign((((x161*x165))+(((-9.801e-13)*x159))+(((9.9e-7)*rxp2_2))+(((-9.801e-13)*x163))+((x162*x164))+(((-1.0)*r21*x155*x162))+x166+(((-1.0)*x167))+((r20*x155*x161))+(((-1.0)*rxp2_2*x157))+(((-1.0)*r20*x162))+((rxp2_2*x160))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x168=cj5*cj5;
IkReal x169=(r20*sj5);
IkReal x170=(rxp1_2*sj5);
IkReal x171=((2.475e-6)*rxp0_2);
IkReal x172=((1.25)*pp);
IkReal x173=(cj5*rxp0_2);
IkReal x174=(cj5*npx);
IkReal x175=(cj5*r21);
IkReal x176=((1.2375e-6)*pp);
IkReal x177=(npy*sj5);
IkReal x178=((2.475e-6)*x174);
IkReal x179=((2.45025e-12)*npy*r20);
IkReal x180=((9.9e-7)*npy*r20);
IkReal x181=((2.475e-6)*npy*rxp1_2);
IkReal x182=(npx*r21*x168);
CheckValue<IkReal> x183=IKPowWithIntegerCheck(IKsign(((((9.9e-7)*x182))+((npz*x173))+((x168*x180))+(((-9.801e-13)*x175))+(((9.9e-7)*rxp2_2))+(((-9.801e-13)*x169))+(((-1.0)*x180))+(((-1.0)*npz*x170))+(((9.9e-7)*x169*x174))+(((-9.9e-7)*x175*x177))+(((-1.0)*rxp2_2*x174))+((rxp2_2*x177)))),-1);
if(!x183.valid){
continue;
}
CheckValue<IkReal> x184 = IKatan2WithCheck(IkReal(((((-1.0)*x175*x176))+(((3.39669e-18)*x175))+(((2.45025e-12)*x182))+(((-1.0)*x179))+((x168*x179))+(((3.39669e-18)*x169))+(((-3.431e-12)*rxp2_2))+(((-1.0)*rxp2_2*x178))+(((2.475e-6)*rxp2_2*x177))+(((2.45025e-12)*x169*x174))+(((-1.0)*x169*x176))+(((-2.45025e-12)*x175*x177))+((rxp2_2*x172)))),IkReal(((((-3.431e-12)*x173))+((x168*x181))+(((-1.0)*x181))+((x172*x173))+(((3.431e-12)*x170))+((cj5*x171*x177))+(((-1.0)*x170*x172))+(((-1.0)*npx*x168*x171))+((x170*x178)))),IKFAST_ATAN2_MAGTHRESH);
if(!x184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x183.value)))+(x184.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x185=IKcos(j4);
IkReal x186=IKsin(j4);
IkReal x187=(npy*sj5);
IkReal x188=(cj5*npx);
IkReal x189=((1.0)*x186);
IkReal x190=((9.9e-7)*x185);
evalcond[0]=(((rxp1_2*sj5*x186))+(((-1.0)*cj5*r21*x190))+(((-1.0)*cj5*rxp0_2*x189))+((rxp2_2*x185))+(((-1.0)*r20*sj5*x190)));
evalcond[1]=((-3.431e-12)+((x186*x188))+(((-2.475e-6)*x188))+(((-1.0)*x187*x189))+(((2.475e-6)*x187))+(((-1.0)*npz*x185))+(((-9.9e-7)*x186))+(((1.25)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[1];
j0eval[0]=((((-1.0)*cj5*r10))+(((1010101.01010101)*py))+((r11*sj5)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
j0eval[0]=(((r11*sj4*sj5))+((cj4*r12))+(((-1.0)*cj5*r10*sj4)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x191=((1.0)*cj4);
IkReal x192=((1010101.01010101)*sj4);
j0eval[0]=(((rxp1_0*sj5*x192))+(((-1.0)*cj5*rxp0_0*x192))+(((1010101.01010101)*cj4*rxp2_0))+(((-1.0)*r00*sj5*x191))+(((-1.0)*cj5*r01*x191)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x193=((1.0)+(((-1.0)*(r12*r12))));
if((x193) < -0.00001)
continue;
IkReal x194=IKabs(IKsqrt(x193));
IkReal x201 = x193;
if(IKabs(x201)==0){
continue;
}
IkReal x195=pow(x201,-0.5);
IkReal x196=(r10*x195);
IkReal x197=(r11*x195);
CheckValue<IkReal> x202=IKPowWithIntegerCheck(x194,-1);
if(!x202.valid){
continue;
}
IkReal x198=x202.value;
IkReal x199=((1010101.01010101)*py*x198);
if((((1.0)+(((-1020304050607.08)*(py*py)*(x198*x198))))) < -0.00001)
continue;
IkReal x200=IKsqrt(((1.0)+(((-1020304050607.08)*(py*py)*(x198*x198)))));
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x203=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x203.valid){
continue;
}
if( (((1010101.01010101)*py*(x203.value))) < -1-IKFAST_SINCOS_THRESH || (((1010101.01010101)*py*(x203.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x204 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x204.valid){
continue;
}
IkReal gconst28=((((-1.0)*(IKasin(((1010101.01010101)*py*(x203.value))))))+(((-1.0)*(x204.value))));
IkReal gconst29=(((x196*x200))+(((-1.0)*x197*x199)));
IkReal gconst30=(((x196*x199))+((x197*x200)));
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x205=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x205.valid){
continue;
}
if( (((1010101.01010101)*py*(x205.value))) < -1-IKFAST_SINCOS_THRESH || (((1010101.01010101)*py*(x205.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x206 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x206.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((IKasin(((1010101.01010101)*py*(x205.value))))+(x206.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x207=gconst30*gconst30;
IkReal x208=gconst29*gconst29;
IkReal x209=((7.92e-6)*px);
IkReal x210=(gconst29*r01);
IkReal x211=(gconst30*r10);
IkReal x212=(gconst29*r11);
IkReal x213=((7.92e-6)*py);
IkReal x214=(gconst30*r00);
IkReal x215=((3.9204e-12)*x208);
IkReal x216=((3.9204e-12)*x207);
CheckValue<IkReal> x223=IKPowWithIntegerCheck(((((-9.9e-7)*x211))+py+(((9.9e-7)*x212))),-1);
if(!x223.valid){
continue;
}
IkReal x217=x223.value;
IkReal x218=(px*x217);
IkReal x219=((9.9e-7)*x217);
IkReal x220=(x210*x219);
IkReal x221=(x214*x219);
if((((((4.0)*(py*py)))+(((-7.8408e-12)*x211*x212))+((x216*(r10*r10)))+(((-7.8408e-12)*x210*x214))+((x209*x210))+((x216*(r00*r00)))+((x212*x213))+((x215*(r11*r11)))+(((4.0)*(px*px)))+(((-1.0)*x211*x213))+((x215*(r01*r01)))+(((-1.0)*x209*x214)))) < -0.00001)
continue;
IkReal x222=((0.5)*x217*(IKsqrt(((((4.0)*(py*py)))+(((-7.8408e-12)*x211*x212))+((x216*(r10*r10)))+(((-7.8408e-12)*x210*x214))+((x209*x210))+((x216*(r00*r00)))+((x212*x213))+((x215*(r11*r11)))+(((4.0)*(px*px)))+(((-1.0)*x211*x213))+((x215*(r01*r01)))+(((-1.0)*x209*x214))))));
j0array[0]=((2.0)*(atan((x221+x222+(((-1.0)*x218))+(((-1.0)*x220))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan((x218+x220+x222+(((-1.0)*x221))))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3740=((1.0)+(((-1.0)*(r12*r12))));
if((x3740) < -0.00001)
continue;
IkReal x3741=IKabs(IKsqrt(x3740));
IkReal x3749 = x3740;
if(IKabs(x3749)==0){
continue;
}
IkReal x3742=pow(x3749,-0.5);
IkReal x3743=(r10*x3742);
IkReal x3744=(r11*x3742);
CheckValue<IkReal> x3750=IKPowWithIntegerCheck(x3741,-1);
if(!x3750.valid){
continue;
}
IkReal x3745=x3750.value;
IkReal x3746=((1010101.01010101)*py*x3745);
if((((1.0)+(((-1020304050607.08)*(py*py)*(x3745*x3745))))) < -0.00001)
continue;
IkReal x3747=IKsqrt(((1.0)+(((-1020304050607.08)*(py*py)*(x3745*x3745)))));
IkReal x3748=((1.0)*x3747);
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x3751=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x3751.valid){
continue;
}
if( (((1010101.01010101)*py*(x3751.value))) < -1-IKFAST_SINCOS_THRESH || (((1010101.01010101)*py*(x3751.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x3752 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x3752.valid){
continue;
}
IkReal gconst31=((3.14159265358979)+(IKasin(((1010101.01010101)*py*(x3751.value))))+(((-1.0)*(x3752.value))));
IkReal gconst32=((((-1.0)*x3743*x3748))+(((-1.0)*x3744*x3746)));
IkReal gconst33=(((x3743*x3746))+(((-1.0)*x3744*x3748)));
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x3753=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x3753.valid){
continue;
}
if( (((1010101.01010101)*py*(x3753.value))) < -1-IKFAST_SINCOS_THRESH || (((1010101.01010101)*py*(x3753.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x3754 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x3754.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(((-1.0)*(IKasin(((1010101.01010101)*py*(x3753.value))))))+(x3754.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x3755=gconst32*gconst32;
IkReal x3756=gconst33*gconst33;
IkReal x3757=((7.92e-6)*py);
IkReal x3758=(gconst33*r10);
IkReal x3759=(gconst33*r00);
IkReal x3760=(gconst32*r01);
IkReal x3761=(gconst32*r11);
IkReal x3762=((7.92e-6)*px);
IkReal x3763=((3.9204e-12)*x3756);
IkReal x3764=((3.9204e-12)*x3755);
CheckValue<IkReal> x3772=IKPowWithIntegerCheck(((((-9.9e-7)*x3758))+py+(((9.9e-7)*x3761))),-1);
if(!x3772.valid){
continue;
}
IkReal x3765=x3772.value;
IkReal x3766=(px*x3765);
IkReal x3767=((9.9e-7)*x3765);
IkReal x3768=(x3760*x3767);
IkReal x3769=(x3759*x3767);
IkReal x3770=(x3766+x3768);
if((((((-7.8408e-12)*x3758*x3761))+((x3764*(r11*r11)))+(((4.0)*(py*py)))+((x3763*(r10*r10)))+(((-1.0)*x3759*x3762))+(((-1.0)*x3757*x3758))+(((-7.8408e-12)*x3759*x3760))+(((4.0)*(px*px)))+((x3757*x3761))+((x3760*x3762))+((x3763*(r00*r00)))+((x3764*(r01*r01))))) < -0.00001)
continue;
IkReal x3771=((0.5)*x3765*(IKsqrt(((((-7.8408e-12)*x3758*x3761))+((x3764*(r11*r11)))+(((4.0)*(py*py)))+((x3763*(r10*r10)))+(((-1.0)*x3759*x3762))+(((-1.0)*x3757*x3758))+(((-7.8408e-12)*x3759*x3760))+(((4.0)*(px*px)))+((x3757*x3761))+((x3760*x3762))+((x3763*(r00*r00)))+((x3764*(r01*r01)))))));
j0array[0]=((2.0)*(atan((x3769+x3771+(((-1.0)*x3770))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan((x3771+x3770+(((-1.0)*x3769))))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x3773=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((-9.9e-7)*cj4*cj5*r01))+((cj4*rxp2_0))+(((-9.9e-7)*cj4*r00*sj5))),-1);
if(!x3773.valid){
continue;
}
if((((((7.92e-6)*cj4*r01*rxp0_0*sj4*(cj5*cj5)))+(((3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((-7.92e-6)*r10*rxp2_1*sj5*(cj4*cj4)))+(((4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((7.8408e-12)*cj5*r00*r01*sj5*(cj4*cj4)))+(((8.0)*cj4*rxp1_0*rxp2_0*sj4*sj5))+(((7.92e-6)*cj4*r11*rxp0_1*sj4*(cj5*cj5)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((4.0)*(rxp1_0*rxp1_0)))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((8.0)*cj4*rxp1_1*rxp2_1*sj4*sj5))+(((-8.0)*cj4*cj5*rxp0_1*rxp2_1*sj4))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((-7.92e-6)*r00*rxp2_0*sj5*(cj4*cj4)))+(((-8.0)*cj4*cj5*rxp0_0*rxp2_0*sj4))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((3.9204e-12)*(cj4*cj4)*(r00*r00)))+(((-3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((7.92e-6)*cj4*r00*rxp1_0*sj4*(cj5*cj5)))+(((-7.92e-6)*cj5*r01*rxp2_0*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((7.92e-6)*cj4*cj5*r00*rxp0_0*sj4*sj5))+(((3.9204e-12)*(cj4*cj4)*(r10*r10)))+(((-7.92e-6)*cj4*cj5*r01*rxp1_0*sj4*sj5))+(((7.8408e-12)*cj5*r10*r11*sj5*(cj4*cj4)))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((7.92e-6)*cj4*cj5*r10*rxp0_1*sj4*sj5))+(((7.92e-6)*cj4*r10*rxp1_1*sj4*(cj5*cj5)))+(((-3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((-7.92e-6)*cj4*r00*rxp1_0*sj4))+(((4.0)*(rxp1_1*rxp1_1)))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(rxp1_0*rxp1_0)))+(((-4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-7.92e-6)*cj5*r11*rxp2_1*(cj4*cj4)))+(((-7.92e-6)*cj4*r10*rxp1_1*sj4))+(((-4.0)*(cj4*cj4)*(rxp1_1*rxp1_1)))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((-7.92e-6)*cj4*cj5*r11*rxp1_1*sj4*sj5))+(((4.0)*(cj5*cj5)*(rxp0_0*rxp0_0))))) < -0.00001)
continue;
CheckValue<IkReal> x3774=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((-9.9e-7)*cj4*cj5*r01))+((cj4*rxp2_0))+(((-9.9e-7)*cj4*r00*sj5))),-1);
if(!x3774.valid){
continue;
}
CheckValue<IkReal> x3775=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((-9.9e-7)*cj4*cj5*r01))+((cj4*rxp2_0))+(((-9.9e-7)*cj4*r00*sj5))),-1);
if(!x3775.valid){
continue;
}
CheckValue<IkReal> x3776=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((-9.9e-7)*cj4*cj5*r01))+((cj4*rxp2_0))+(((-9.9e-7)*cj4*r00*sj5))),-1);
if(!x3776.valid){
continue;
}
CheckValue<IkReal> x3777=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((-9.9e-7)*cj4*cj5*r01))+((cj4*rxp2_0))+(((-9.9e-7)*cj4*r00*sj5))),-1);
if(!x3777.valid){
continue;
}
CheckValue<IkReal> x3778=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((-9.9e-7)*cj4*cj5*r01))+((cj4*rxp2_0))+(((-9.9e-7)*cj4*r00*sj5))),-1);
if(!x3778.valid){
continue;
}
j0array[0]=((2.0)*(atan(((((0.5)*(x3773.value)*(IKsqrt(((((7.92e-6)*cj4*r01*rxp0_0*sj4*(cj5*cj5)))+(((3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((-7.92e-6)*r10*rxp2_1*sj5*(cj4*cj4)))+(((4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((7.8408e-12)*cj5*r00*r01*sj5*(cj4*cj4)))+(((8.0)*cj4*rxp1_0*rxp2_0*sj4*sj5))+(((7.92e-6)*cj4*r11*rxp0_1*sj4*(cj5*cj5)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((4.0)*(rxp1_0*rxp1_0)))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((8.0)*cj4*rxp1_1*rxp2_1*sj4*sj5))+(((-8.0)*cj4*cj5*rxp0_1*rxp2_1*sj4))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((-7.92e-6)*r00*rxp2_0*sj5*(cj4*cj4)))+(((-8.0)*cj4*cj5*rxp0_0*rxp2_0*sj4))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((3.9204e-12)*(cj4*cj4)*(r00*r00)))+(((-3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((7.92e-6)*cj4*r00*rxp1_0*sj4*(cj5*cj5)))+(((-7.92e-6)*cj5*r01*rxp2_0*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((7.92e-6)*cj4*cj5*r00*rxp0_0*sj4*sj5))+(((3.9204e-12)*(cj4*cj4)*(r10*r10)))+(((-7.92e-6)*cj4*cj5*r01*rxp1_0*sj4*sj5))+(((7.8408e-12)*cj5*r10*r11*sj5*(cj4*cj4)))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((7.92e-6)*cj4*cj5*r10*rxp0_1*sj4*sj5))+(((7.92e-6)*cj4*r10*rxp1_1*sj4*(cj5*cj5)))+(((-3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((-7.92e-6)*cj4*r00*rxp1_0*sj4))+(((4.0)*(rxp1_1*rxp1_1)))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(rxp1_0*rxp1_0)))+(((-4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-7.92e-6)*cj5*r11*rxp2_1*(cj4*cj4)))+(((-7.92e-6)*cj4*r10*rxp1_1*sj4))+(((-4.0)*(cj4*cj4)*(rxp1_1*rxp1_1)))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((-7.92e-6)*cj4*cj5*r11*rxp1_1*sj4*sj5))+(((4.0)*(cj5*cj5)*(rxp0_0*rxp0_0))))))))+(((-9.9e-7)*cj4*r10*sj5*(x3774.value)))+(((-1.0)*cj5*rxp0_1*sj4*(x3775.value)))+(((-9.9e-7)*cj4*cj5*r11*(x3776.value)))+(((1.0)*cj4*rxp2_1*(x3777.value)))+(((1.0)*rxp1_1*sj4*sj5*(x3778.value)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
CheckValue<IkReal> x3779=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((-9.9e-7)*cj4*cj5*r01))+((cj4*rxp2_0))+(((-9.9e-7)*cj4*r00*sj5))),-1);
if(!x3779.valid){
continue;
}
CheckValue<IkReal> x3780=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((-9.9e-7)*cj4*cj5*r01))+((cj4*rxp2_0))+(((-9.9e-7)*cj4*r00*sj5))),-1);
if(!x3780.valid){
continue;
}
CheckValue<IkReal> x3781=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((-9.9e-7)*cj4*cj5*r01))+((cj4*rxp2_0))+(((-9.9e-7)*cj4*r00*sj5))),-1);
if(!x3781.valid){
continue;
}
if((((((7.92e-6)*cj4*r01*rxp0_0*sj4*(cj5*cj5)))+(((3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((-7.92e-6)*r10*rxp2_1*sj5*(cj4*cj4)))+(((4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((7.8408e-12)*cj5*r00*r01*sj5*(cj4*cj4)))+(((8.0)*cj4*rxp1_0*rxp2_0*sj4*sj5))+(((7.92e-6)*cj4*r11*rxp0_1*sj4*(cj5*cj5)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((4.0)*(rxp1_0*rxp1_0)))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((8.0)*cj4*rxp1_1*rxp2_1*sj4*sj5))+(((-8.0)*cj4*cj5*rxp0_1*rxp2_1*sj4))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((-7.92e-6)*r00*rxp2_0*sj5*(cj4*cj4)))+(((-8.0)*cj4*cj5*rxp0_0*rxp2_0*sj4))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((3.9204e-12)*(cj4*cj4)*(r00*r00)))+(((-3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((7.92e-6)*cj4*r00*rxp1_0*sj4*(cj5*cj5)))+(((-7.92e-6)*cj5*r01*rxp2_0*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((7.92e-6)*cj4*cj5*r00*rxp0_0*sj4*sj5))+(((3.9204e-12)*(cj4*cj4)*(r10*r10)))+(((-7.92e-6)*cj4*cj5*r01*rxp1_0*sj4*sj5))+(((7.8408e-12)*cj5*r10*r11*sj5*(cj4*cj4)))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((7.92e-6)*cj4*cj5*r10*rxp0_1*sj4*sj5))+(((7.92e-6)*cj4*r10*rxp1_1*sj4*(cj5*cj5)))+(((-3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((-7.92e-6)*cj4*r00*rxp1_0*sj4))+(((4.0)*(rxp1_1*rxp1_1)))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(rxp1_0*rxp1_0)))+(((-4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-7.92e-6)*cj5*r11*rxp2_1*(cj4*cj4)))+(((-7.92e-6)*cj4*r10*rxp1_1*sj4))+(((-4.0)*(cj4*cj4)*(rxp1_1*rxp1_1)))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((-7.92e-6)*cj4*cj5*r11*rxp1_1*sj4*sj5))+(((4.0)*(cj5*cj5)*(rxp0_0*rxp0_0))))) < -0.00001)
continue;
CheckValue<IkReal> x3782=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((-9.9e-7)*cj4*cj5*r01))+((cj4*rxp2_0))+(((-9.9e-7)*cj4*r00*sj5))),-1);
if(!x3782.valid){
continue;
}
CheckValue<IkReal> x3783=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((-9.9e-7)*cj4*cj5*r01))+((cj4*rxp2_0))+(((-9.9e-7)*cj4*r00*sj5))),-1);
if(!x3783.valid){
continue;
}
CheckValue<IkReal> x3784=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((-9.9e-7)*cj4*cj5*r01))+((cj4*rxp2_0))+(((-9.9e-7)*cj4*r00*sj5))),-1);
if(!x3784.valid){
continue;
}
j0array[1]=((-2.0)*(atan(((((9.9e-7)*cj4*r10*sj5*(x3779.value)))+((cj5*rxp0_1*sj4*(x3780.value)))+(((0.5)*(x3781.value)*(IKsqrt(((((7.92e-6)*cj4*r01*rxp0_0*sj4*(cj5*cj5)))+(((3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((-7.92e-6)*r10*rxp2_1*sj5*(cj4*cj4)))+(((4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((7.8408e-12)*cj5*r00*r01*sj5*(cj4*cj4)))+(((8.0)*cj4*rxp1_0*rxp2_0*sj4*sj5))+(((7.92e-6)*cj4*r11*rxp0_1*sj4*(cj5*cj5)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((4.0)*(rxp1_0*rxp1_0)))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((8.0)*cj4*rxp1_1*rxp2_1*sj4*sj5))+(((-8.0)*cj4*cj5*rxp0_1*rxp2_1*sj4))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((-7.92e-6)*r00*rxp2_0*sj5*(cj4*cj4)))+(((-8.0)*cj4*cj5*rxp0_0*rxp2_0*sj4))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((3.9204e-12)*(cj4*cj4)*(r00*r00)))+(((-3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((7.92e-6)*cj4*r00*rxp1_0*sj4*(cj5*cj5)))+(((-7.92e-6)*cj5*r01*rxp2_0*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((7.92e-6)*cj4*cj5*r00*rxp0_0*sj4*sj5))+(((3.9204e-12)*(cj4*cj4)*(r10*r10)))+(((-7.92e-6)*cj4*cj5*r01*rxp1_0*sj4*sj5))+(((7.8408e-12)*cj5*r10*r11*sj5*(cj4*cj4)))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((7.92e-6)*cj4*cj5*r10*rxp0_1*sj4*sj5))+(((7.92e-6)*cj4*r10*rxp1_1*sj4*(cj5*cj5)))+(((-3.9204e-12)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((-7.92e-6)*cj4*r00*rxp1_0*sj4))+(((4.0)*(rxp1_1*rxp1_1)))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-4.0)*(cj4*cj4)*(rxp1_0*rxp1_0)))+(((-4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-7.92e-6)*cj5*r11*rxp2_1*(cj4*cj4)))+(((-7.92e-6)*cj4*r10*rxp1_1*sj4))+(((-4.0)*(cj4*cj4)*(rxp1_1*rxp1_1)))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((-7.92e-6)*cj4*cj5*r11*rxp1_1*sj4*sj5))+(((4.0)*(cj5*cj5)*(rxp0_0*rxp0_0))))))))+(((-1.0)*cj4*rxp2_1*(x3782.value)))+(((9.9e-7)*cj4*cj5*r11*(x3783.value)))+(((-1.0)*rxp1_1*sj4*sj5*(x3784.value)))))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x3785=cj4*cj4;
IkReal x3786=cj5*cj5;
IkReal x3787=r11*r11;
IkReal x3788=r01*r01;
IkReal x3789=r10*r10;
IkReal x3790=r00*r00;
IkReal x3791=(sj4*sj5);
IkReal x3792=((8.0)*cj4);
IkReal x3793=(cj5*sj4);
IkReal x3794=((4.0)*x3785);
IkReal x3795=((1.0)*x3793);
IkReal x3796=(x3786*x3788);
IkReal x3797=(x3786*x3789);
IkReal x3798=(x3786*x3790);
IkReal x3799=(x3786*x3787);
IkReal x3800=((8.0)*cj5*r10*r11*sj5);
IkReal x3801=((8.0)*cj5*r00*r01*sj5);
CheckValue<IkReal> x3808=IKPowWithIntegerCheck((((r11*x3791))+(((-1.0)*r10*x3795))+((cj4*r12))),-1);
if(!x3808.valid){
continue;
}
IkReal x3802=x3808.value;
IkReal x3803=(cj4*r02*x3802);
CheckValue<IkReal> x3809=IKPowWithIntegerCheck((((r11*sj4*sj5))+(((-1.0)*r10*x3795))+((cj4*r12))),-1);
if(!x3809.valid){
continue;
}
IkReal x3804=(r01*x3791*(x3809.value));
CheckValue<IkReal> x3810=IKPowWithIntegerCheck((((r11*x3791))+((cj4*r12))+(((-1.0)*cj5*r10*sj4))),-1);
if(!x3810.valid){
continue;
}
IkReal x3805=(r00*x3795*(x3810.value));
IkReal x3806=(x3804+x3803);
if(((((r01*r02*x3791*x3792))+((x3794*(r02*r02)))+(((-1.0)*r00*r02*x3792*x3793))+(((4.0)*x3788))+(((4.0)*x3787))+(((-1.0)*x3800))+(((-1.0)*x3801))+(((4.0)*x3798))+(((4.0)*x3797))+((r11*r12*x3791*x3792))+(((-4.0)*x3799))+(((-4.0)*x3796))+(((-1.0)*r10*r12*x3792*x3793))+((x3785*x3800))+((x3785*x3801))+(((-1.0)*x3788*x3794))+((x3794*x3799))+((x3794*x3796))+(((-1.0)*x3794*x3798))+(((-1.0)*x3794*x3797))+((x3794*(r12*r12)))+(((-1.0)*x3787*x3794)))) < -0.00001)
continue;
IkReal x3807=((0.5)*x3802*(IKsqrt((((r01*r02*x3791*x3792))+((x3794*(r02*r02)))+(((-1.0)*r00*r02*x3792*x3793))+(((4.0)*x3788))+(((4.0)*x3787))+(((-1.0)*x3800))+(((-1.0)*x3801))+(((4.0)*x3798))+(((4.0)*x3797))+((r11*r12*x3791*x3792))+(((-4.0)*x3799))+(((-4.0)*x3796))+(((-1.0)*r10*r12*x3792*x3793))+((x3785*x3800))+((x3785*x3801))+(((-1.0)*x3788*x3794))+((x3794*x3799))+((x3794*x3796))+(((-1.0)*x3794*x3798))+(((-1.0)*x3794*x3797))+((x3794*(r12*r12)))+(((-1.0)*x3787*x3794))))));
j0array[0]=((2.0)*(atan(((((-1.0)*x3806))+x3805+x3807))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan(((((-1.0)*x3805))+x3807+x3806))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x3811=cj5*cj5;
IkReal x3812=r11*r11;
IkReal x3813=r01*r01;
IkReal x3814=(cj5*r10);
IkReal x3815=((7.92e-6)*py);
IkReal x3816=(r11*sj5);
IkReal x3817=(r01*sj5);
IkReal x3818=((7.92e-6)*px);
IkReal x3819=(cj5*r00);
IkReal x3820=((3.9204e-12)*x3812);
IkReal x3821=((3.9204e-12)*x3811);
CheckValue<IkReal> x3829=IKPowWithIntegerCheck(((((-9.9e-7)*x3814))+py+(((9.9e-7)*x3816))),-1);
if(!x3829.valid){
continue;
}
IkReal x3822=x3829.value;
IkReal x3823=(px*x3822);
IkReal x3824=((9.9e-7)*x3822);
IkReal x3825=(x3817*x3824);
IkReal x3826=(x3819*x3824);
IkReal x3827=(x3825+x3823);
if(((((x3821*(r00*r00)))+(((-7.8408e-12)*x3817*x3819))+(((4.0)*(py*py)))+(((-7.8408e-12)*x3814*x3816))+(((-1.0)*x3814*x3815))+(((-1.0)*x3813*x3821))+((x3815*x3816))+(((-1.0)*x3811*x3820))+((x3817*x3818))+((x3821*(r10*r10)))+x3820+(((4.0)*(px*px)))+(((-1.0)*x3818*x3819))+(((3.9204e-12)*x3813)))) < -0.00001)
continue;
IkReal x3828=((0.5)*x3822*(IKsqrt((((x3821*(r00*r00)))+(((-7.8408e-12)*x3817*x3819))+(((4.0)*(py*py)))+(((-7.8408e-12)*x3814*x3816))+(((-1.0)*x3814*x3815))+(((-1.0)*x3813*x3821))+((x3815*x3816))+(((-1.0)*x3811*x3820))+((x3817*x3818))+((x3821*(r10*r10)))+x3820+(((4.0)*(px*px)))+(((-1.0)*x3818*x3819))+(((3.9204e-12)*x3813))))));
j0array[0]=((2.0)*(atan(((((-1.0)*x3827))+x3826+x3828))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan(((((-1.0)*x3826))+x3827+x3828))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[3];
IkReal x224=((1.0)*cj0);
IkReal x225=((((-1.0)*cj4*r02))+((cj5*r00*sj4))+(((-1.0)*r01*sj4*sj5)));
j3eval[0]=x225;
j3eval[1]=IKsign(x225);
j3eval[2]=((IKabs(((((-1.0)*cj5*r21*x224))+(((-1.0)*r20*sj5*x224)))))+(IKabs((((cj0*cj4*cj5*r20))+(((-1.0)*cj4*r21*sj5*x224))+((cj0*r22*sj4))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x226=((1.0)*sj5);
IkReal x227=(r20*sj0);
IkReal x228=((1.0)*r21*sj0);
IkReal x229=((((-1.0)*r11*sj4*x226))+((cj5*r10*sj4))+(((-1.0)*cj4*r12)));
j3eval[0]=x229;
j3eval[1]=((IKabs(((((-1.0)*cj4*r21*sj0*x226))+((cj4*cj5*x227))+((r22*sj0*sj4)))))+(IKabs(((((-1.0)*cj5*x228))+(((-1.0)*x226*x227))))));
j3eval[2]=IKsign(x229);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x230=(((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*cj5*r20*sj4)));
j3eval[0]=x230;
j3eval[1]=IKsign(x230);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x231=((1.0)*cj5);
IkReal x232=((1.0)*sj5);
IkReal x233=(((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*r20*sj4*x231)));
j3eval[0]=x233;
j3eval[1]=((IKabs((((r02*sj4))+((cj4*cj5*r00))+(((-1.0)*cj4*r01*x232)))))+(IKabs(((((-1.0)*r00*x232))+(((-1.0)*r01*x231))))));
j3eval[2]=IKsign(x233);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x234=((1.0)*sj5);
IkReal x235=((((-1.0)*cj4*r02))+((cj5*r00*sj4))+(((-1.0)*r01*sj4*x234)));
j3eval[0]=x235;
j3eval[1]=((IKabs((((r22*sj4))+(((-1.0)*cj4*r21*x234))+((cj4*cj5*r20)))))+(IKabs(((((-1.0)*r20*x234))+(((-1.0)*cj5*r21))))));
j3eval[2]=IKsign(x235);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x236=cj4*cj4;
IkReal x237=cj5*cj5;
IkReal x238=r10*r10;
IkReal x239=r11*r11;
IkReal x240=r12*r12;
IkReal x241=(r11*sj5);
IkReal x242=((1.0)*r10);
IkReal x243=(r12*sj4);
IkReal x244=((1.0)*x238);
IkReal x245=((2.0)*cj5*r10);
IkReal x246=(x237*x239);
IkReal x247=(((x237*x238))+(((2.0)*cj4*x241*x243))+(((-1.0)*x246))+(((-1.0)*x240))+(((-1.0)*x236*x237*x244))+((x236*x246))+((x236*x240))+(((-1.0)*cj4*x243*x245))+((x236*x241*x245))+(((-1.0)*x241*x245))+(((-1.0)*x236*x239))+(((-1.0)*x244)));
j3eval[0]=x247;
j3eval[1]=IKsign(x247);
j3eval[2]=((IKabs(((((-1.0)*cj5*r11))+(((-1.0)*sj5*x242)))))+(IKabs(((((-1.0)*x243))+((cj4*x241))+(((-1.0)*cj4*cj5*x242))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x248=cj4*cj4;
IkReal x249=cj5*cj5;
IkReal x250=r10*r10;
IkReal x251=r11*r11;
IkReal x252=r12*r12;
IkReal x253=(r11*sj5);
IkReal x254=((1.0)*cj5);
IkReal x255=(r12*sj4);
IkReal x256=((1.0)*x250);
IkReal x257=((2.0)*cj5*r10);
IkReal x258=(x249*x251);
CheckValue<IkReal> x259=IKPowWithIntegerCheck(IKsign((((x248*x252))+((x248*x258))+((x249*x250))+(((-1.0)*cj4*x255*x257))+(((-1.0)*x248*x251))+(((-1.0)*x248*x249*x256))+(((2.0)*cj4*x253*x255))+(((-1.0)*x253*x257))+(((-1.0)*x252))+(((-1.0)*x258))+(((-1.0)*x256))+((x248*x253*x257)))),-1);
if(!x259.valid){
continue;
}
CheckValue<IkReal> x260 = IKatan2WithCheck(IkReal((((cj4*x253))+(((-1.0)*cj4*r10*x254))+(((-1.0)*x255)))),IkReal(((((-1.0)*r10*sj5))+(((-1.0)*r11*x254)))),IKFAST_ATAN2_MAGTHRESH);
if(!x260.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x259.value)))+(x260.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x261=IKsin(j3);
IkReal x262=IKcos(j3);
IkReal x263=(r10*sj5);
IkReal x264=(cj4*sj5);
IkReal x265=(cj5*r11);
IkReal x266=(cj4*cj5);
IkReal x267=(r12*sj4);
IkReal x268=((1.0)*x262);
IkReal x269=((1.0)*x261);
evalcond[0]=(((r11*x262*x264))+(((-1.0)*r10*x266*x268))+(((-1.0)*x267*x268))+((x261*x265))+((x261*x263)));
evalcond[1]=((((-1.0)*cj5*r21*x268))+(((-1.0)*r22*sj4*x269))+(((-1.0)*r20*sj5*x268))+((r21*x261*x264))+(((-1.0)*r20*x266*x269)));
evalcond[2]=((((-1.0)*r02*sj4*x269))+(((-1.0)*r00*sj5*x268))+(((-1.0)*cj5*r01*x268))+((r01*x261*x264))+(((-1.0)*r00*x266*x269)));
evalcond[3]=((1.0)+(((-1.0)*x263*x268))+((r11*x261*x264))+(((-1.0)*r10*x266*x269))+(((-1.0)*x267*x269))+(((-1.0)*x265*x268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x270=((4.82499999988767e-6)*sj4);
IkReal x271=(r01*sj5);
IkReal x272=((0.999999999976719)*cj4);
IkReal x273=(cj5*r00);
IkReal x274=(r21*sj5);
IkReal x275=(cj5*r20);
IkReal x276=((0.999999999976719)*sj4);
IkReal x277=((4.82499999988767e-6)*cj4);
if( IKabs((((r02*x277))+((r22*x272))+(((-1.1941874999722e-11)*x271))+((x274*x276))+(((-1.20624999997192e-5)*px))+((x270*x271))+(((1.1941874999722e-11)*x273))+(((-1.0)*x270*x273))+(((-1.0)*x275*x276))+(((2.47499999994238e-6)*x275))+(((-2.4999999999418)*pz))+(((-2.47499999994238e-6)*x274)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x273*x276))+(((2.4999999999418)*px))+(((-1.0)*x271*x276))+((r22*x277))+(((-1.1941874999722e-11)*x274))+(((-1.20624999997192e-5)*pz))+((x270*x274))+(((1.1941874999722e-11)*x275))+(((-1.0)*r02*x272))+(((-1.0)*x270*x275))+(((2.47499999994238e-6)*x271))+(((-2.47499999994238e-6)*x273)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x277))+((r22*x272))+(((-1.1941874999722e-11)*x271))+((x274*x276))+(((-1.20624999997192e-5)*px))+((x270*x271))+(((1.1941874999722e-11)*x273))+(((-1.0)*x270*x273))+(((-1.0)*x275*x276))+(((2.47499999994238e-6)*x275))+(((-2.4999999999418)*pz))+(((-2.47499999994238e-6)*x274))))+IKsqr((((x273*x276))+(((2.4999999999418)*px))+(((-1.0)*x271*x276))+((r22*x277))+(((-1.1941874999722e-11)*x274))+(((-1.20624999997192e-5)*pz))+((x270*x274))+(((1.1941874999722e-11)*x275))+(((-1.0)*r02*x272))+(((-1.0)*x270*x275))+(((2.47499999994238e-6)*x271))+(((-2.47499999994238e-6)*x273))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r02*x277))+((r22*x272))+(((-1.1941874999722e-11)*x271))+((x274*x276))+(((-1.20624999997192e-5)*px))+((x270*x271))+(((1.1941874999722e-11)*x273))+(((-1.0)*x270*x273))+(((-1.0)*x275*x276))+(((2.47499999994238e-6)*x275))+(((-2.4999999999418)*pz))+(((-2.47499999994238e-6)*x274))), (((x273*x276))+(((2.4999999999418)*px))+(((-1.0)*x271*x276))+((r22*x277))+(((-1.1941874999722e-11)*x274))+(((-1.20624999997192e-5)*pz))+((x270*x274))+(((1.1941874999722e-11)*x275))+(((-1.0)*r02*x272))+(((-1.0)*x270*x275))+(((2.47499999994238e-6)*x271))+(((-2.47499999994238e-6)*x273))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x278=IKcos(j1);
IkReal x279=IKsin(j1);
IkReal x280=((0.4)*sj4);
IkReal x281=(r21*sj5);
IkReal x282=((0.4)*cj4);
IkReal x283=(cj5*r20);
IkReal x284=(r01*sj5);
IkReal x285=(cj5*r00);
IkReal x286=((9.9e-7)*x284);
IkReal x287=((1.93e-6)*x279);
IkReal x288=((0.4)*x278);
IkReal x289=((9.9e-7)*x285);
IkReal x290=((1.93e-6)*x278);
IkReal x291=((0.4)*x279);
IkReal x292=((9.9e-7)*x281);
IkReal x293=((9.9e-7)*x283);
IkReal x294=((0.4)*sj3*sj5);
IkReal x295=((0.4)*cj5*sj3);
IkReal x296=(x289+x288);
IkReal x297=(x287+x286+px);
IkReal x298=(x290+x291+x292);
evalcond[0]=((((-1.0)*r02*x282))+(((-1.0)*x296))+(((-1.0)*x280*x284))+x297+((x280*x285)));
evalcond[1]=((((-1.0)*x298))+(((-1.0)*x280*x283))+((r22*x282))+(((-1.0)*pz))+x293+((x280*x281)));
evalcond[2]=((((-1.0)*cj3*x281*x282))+((cj3*r22*x280))+(((-1.0)*x296))+((cj3*x282*x283))+x297+(((-1.0)*r21*x295))+(((-1.0)*r20*x294)));
evalcond[3]=((((-1.0)*x293))+((cj3*x282*x284))+x298+pz+((r01*x295))+((r00*x294))+(((-1.0)*cj3*x282*x285))+(((-1.0)*cj3*r02*x280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x299=(cj4*sj1);
IkReal x300=(cj1*sj4);
IkReal x301=((1.0)*cj5);
IkReal x302=(r21*sj5);
IkReal x303=(cj1*cj4);
IkReal x304=(sj1*sj4);
IkReal x305=(r01*sj4*sj5);
if( IKabs((((cj5*r20*x304))+(((-1.0)*r22*x299))+(((-1.0)*x302*x304))+((r01*sj5*x300))+((r02*x303))+(((-1.0)*r00*x300*x301)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x303))+((r01*sj5*x304))+(((-1.0)*r20*x300*x301))+(((-1.0)*r00*x301*x304))+((r02*x299))+((x300*x302)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r20*x304))+(((-1.0)*r22*x299))+(((-1.0)*x302*x304))+((r01*sj5*x300))+((r02*x303))+(((-1.0)*r00*x300*x301))))+IKsqr((((r22*x303))+((r01*sj5*x304))+(((-1.0)*r20*x300*x301))+(((-1.0)*r00*x301*x304))+((r02*x299))+((x300*x302))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r20*x304))+(((-1.0)*r22*x299))+(((-1.0)*x302*x304))+((r01*sj5*x300))+((r02*x303))+(((-1.0)*r00*x300*x301))), (((r22*x303))+((r01*sj5*x304))+(((-1.0)*r20*x300*x301))+(((-1.0)*r00*x301*x304))+((r02*x299))+((x300*x302))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x306=IKcos(j2);
IkReal x307=IKsin(j2);
IkReal x308=((1.0)*cj3);
IkReal x309=(cj5*r00);
IkReal x310=((1.0)*cj4);
IkReal x311=(r01*sj5);
IkReal x312=((1.0)*sj4);
IkReal x313=(cj5*sj3);
IkReal x314=(cj5*r20);
IkReal x315=(sj3*sj5);
IkReal x316=(r21*sj5);
IkReal x317=(cj1*x306);
IkReal x318=(cj3*cj4*sj5);
IkReal x319=(cj1*x307);
IkReal x320=(sj1*x307);
IkReal x321=(sj1*x306);
IkReal x322=((1.0)*x320);
evalcond[0]=((((-1.0)*r02*x310))+x321+x319+((sj4*x309))+(((-1.0)*x311*x312)));
evalcond[1]=((((-1.0)*x312*x316))+(((-1.0)*x322))+((sj4*x314))+x317+(((-1.0)*r22*x310)));
evalcond[2]=((((-1.93e-6)*cj1))+(((0.4)*x317))+(((-1.0)*pz))+(((-0.4)*x320))+(((-9.9e-7)*x316))+(((9.9e-7)*x314))+(((-0.4)*sj1)));
evalcond[3]=((((9.9e-7)*x309))+(((0.4)*cj1))+(((0.4)*x319))+(((-1.0)*px))+(((-1.93e-6)*sj1))+(((-9.9e-7)*x311))+(((0.4)*x321)));
evalcond[4]=(((cj3*cj4*x311))+(((-1.0)*x322))+(((-1.0)*r02*sj4*x308))+x317+((r01*x313))+((r00*x315))+(((-1.0)*cj4*x308*x309)));
evalcond[5]=((((-1.0)*r22*sj4*x308))+(((-1.0)*cj4*x308*x314))+((r20*x315))+((cj3*cj4*x316))+(((-1.0)*x321))+(((-1.0)*x319))+((r21*x313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x323=((1.0)*sj5);
CheckValue<IkReal> x324=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r02))+((cj5*r00*sj4))+(((-1.0)*r01*sj4*x323)))),-1);
if(!x324.valid){
continue;
}
CheckValue<IkReal> x325 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21))+(((-1.0)*r20*x323)))),IkReal((((r22*sj4))+(((-1.0)*cj4*r21*x323))+((cj4*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x325.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x324.value)))+(x325.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x326=IKsin(j3);
IkReal x327=IKcos(j3);
IkReal x328=(r10*sj5);
IkReal x329=(cj4*sj5);
IkReal x330=(cj5*r11);
IkReal x331=(cj4*cj5);
IkReal x332=(r12*sj4);
IkReal x333=((1.0)*x327);
IkReal x334=((1.0)*x326);
evalcond[0]=(((x326*x328))+(((-1.0)*r10*x331*x333))+(((-1.0)*x332*x333))+((x326*x330))+((r11*x327*x329)));
evalcond[1]=((((-1.0)*cj5*r21*x333))+(((-1.0)*r20*sj5*x333))+(((-1.0)*r22*sj4*x334))+(((-1.0)*r20*x331*x334))+((r21*x326*x329)));
evalcond[2]=((((-1.0)*r00*x331*x334))+(((-1.0)*r00*sj5*x333))+(((-1.0)*r02*sj4*x334))+((r01*x326*x329))+(((-1.0)*cj5*r01*x333)));
evalcond[3]=((1.0)+(((-1.0)*x328*x333))+(((-1.0)*x330*x333))+(((-1.0)*r10*x331*x334))+(((-1.0)*x332*x334))+((r11*x326*x329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x335=((4.82499999988767e-6)*sj4);
IkReal x336=(r01*sj5);
IkReal x337=((0.999999999976719)*cj4);
IkReal x338=(cj5*r00);
IkReal x339=(r21*sj5);
IkReal x340=(cj5*r20);
IkReal x341=((0.999999999976719)*sj4);
IkReal x342=((4.82499999988767e-6)*cj4);
if( IKabs((((r22*x337))+((x335*x336))+(((-1.1941874999722e-11)*x336))+(((-1.20624999997192e-5)*px))+((r02*x342))+(((1.1941874999722e-11)*x338))+(((-1.0)*x340*x341))+(((-2.47499999994238e-6)*x339))+(((-2.4999999999418)*pz))+((x339*x341))+(((-1.0)*x335*x338))+(((2.47499999994238e-6)*x340)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x335*x340))+((x335*x339))+(((2.4999999999418)*px))+(((-1.0)*x336*x341))+(((2.47499999994238e-6)*x336))+(((1.1941874999722e-11)*x340))+((r22*x342))+(((-1.1941874999722e-11)*x339))+(((-1.20624999997192e-5)*pz))+(((-1.0)*r02*x337))+((x338*x341))+(((-2.47499999994238e-6)*x338)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x337))+((x335*x336))+(((-1.1941874999722e-11)*x336))+(((-1.20624999997192e-5)*px))+((r02*x342))+(((1.1941874999722e-11)*x338))+(((-1.0)*x340*x341))+(((-2.47499999994238e-6)*x339))+(((-2.4999999999418)*pz))+((x339*x341))+(((-1.0)*x335*x338))+(((2.47499999994238e-6)*x340))))+IKsqr(((((-1.0)*x335*x340))+((x335*x339))+(((2.4999999999418)*px))+(((-1.0)*x336*x341))+(((2.47499999994238e-6)*x336))+(((1.1941874999722e-11)*x340))+((r22*x342))+(((-1.1941874999722e-11)*x339))+(((-1.20624999997192e-5)*pz))+(((-1.0)*r02*x337))+((x338*x341))+(((-2.47499999994238e-6)*x338))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r22*x337))+((x335*x336))+(((-1.1941874999722e-11)*x336))+(((-1.20624999997192e-5)*px))+((r02*x342))+(((1.1941874999722e-11)*x338))+(((-1.0)*x340*x341))+(((-2.47499999994238e-6)*x339))+(((-2.4999999999418)*pz))+((x339*x341))+(((-1.0)*x335*x338))+(((2.47499999994238e-6)*x340))), ((((-1.0)*x335*x340))+((x335*x339))+(((2.4999999999418)*px))+(((-1.0)*x336*x341))+(((2.47499999994238e-6)*x336))+(((1.1941874999722e-11)*x340))+((r22*x342))+(((-1.1941874999722e-11)*x339))+(((-1.20624999997192e-5)*pz))+(((-1.0)*r02*x337))+((x338*x341))+(((-2.47499999994238e-6)*x338))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x343=IKcos(j1);
IkReal x344=IKsin(j1);
IkReal x345=((0.4)*sj4);
IkReal x346=(r21*sj5);
IkReal x347=((0.4)*cj4);
IkReal x348=(cj5*r20);
IkReal x349=(r01*sj5);
IkReal x350=(cj5*r00);
IkReal x351=((9.9e-7)*x349);
IkReal x352=((1.93e-6)*x344);
IkReal x353=((0.4)*x343);
IkReal x354=((9.9e-7)*x350);
IkReal x355=((1.93e-6)*x343);
IkReal x356=((0.4)*x344);
IkReal x357=((9.9e-7)*x346);
IkReal x358=((9.9e-7)*x348);
IkReal x359=((0.4)*sj3*sj5);
IkReal x360=((0.4)*cj5*sj3);
IkReal x361=(x353+x354);
IkReal x362=(x351+x352+px);
IkReal x363=(x355+x357+x356);
evalcond[0]=((((-1.0)*r02*x347))+((x345*x350))+(((-1.0)*x361))+x362+(((-1.0)*x345*x349)));
evalcond[1]=((((-1.0)*x363))+((r22*x347))+x358+((x345*x346))+(((-1.0)*pz))+(((-1.0)*x345*x348)));
evalcond[2]=((((-1.0)*r21*x360))+((cj3*r22*x345))+(((-1.0)*x361))+(((-1.0)*cj3*x346*x347))+x362+(((-1.0)*r20*x359))+((cj3*x347*x348)));
evalcond[3]=((((-1.0)*cj3*r02*x345))+((r01*x360))+(((-1.0)*x358))+((r00*x359))+x363+pz+((cj3*x347*x349))+(((-1.0)*cj3*x347*x350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x364=(cj4*sj1);
IkReal x365=(cj1*sj4);
IkReal x366=((1.0)*cj5);
IkReal x367=(r21*sj5);
IkReal x368=(cj1*cj4);
IkReal x369=(sj1*sj4);
IkReal x370=(r01*sj4*sj5);
if( IKabs((((cj5*r20*x369))+(((-1.0)*x367*x369))+(((-1.0)*r00*x365*x366))+((r01*sj5*x365))+(((-1.0)*r22*x364))+((r02*x368)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x365*x366))+((r01*sj5*x369))+((x365*x367))+((r22*x368))+(((-1.0)*r00*x366*x369))+((r02*x364)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r20*x369))+(((-1.0)*x367*x369))+(((-1.0)*r00*x365*x366))+((r01*sj5*x365))+(((-1.0)*r22*x364))+((r02*x368))))+IKsqr(((((-1.0)*r20*x365*x366))+((r01*sj5*x369))+((x365*x367))+((r22*x368))+(((-1.0)*r00*x366*x369))+((r02*x364))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r20*x369))+(((-1.0)*x367*x369))+(((-1.0)*r00*x365*x366))+((r01*sj5*x365))+(((-1.0)*r22*x364))+((r02*x368))), ((((-1.0)*r20*x365*x366))+((r01*sj5*x369))+((x365*x367))+((r22*x368))+(((-1.0)*r00*x366*x369))+((r02*x364))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x371=IKcos(j2);
IkReal x372=IKsin(j2);
IkReal x373=((1.0)*cj3);
IkReal x374=(cj5*r00);
IkReal x375=((1.0)*cj4);
IkReal x376=(r01*sj5);
IkReal x377=((1.0)*sj4);
IkReal x378=(cj5*sj3);
IkReal x379=(cj5*r20);
IkReal x380=(sj3*sj5);
IkReal x381=(r21*sj5);
IkReal x382=(cj1*x371);
IkReal x383=(cj3*cj4*sj5);
IkReal x384=(cj1*x372);
IkReal x385=(sj1*x372);
IkReal x386=(sj1*x371);
IkReal x387=((1.0)*x385);
evalcond[0]=(((sj4*x374))+(((-1.0)*r02*x375))+x386+x384+(((-1.0)*x376*x377)));
evalcond[1]=(((sj4*x379))+x382+(((-1.0)*x387))+(((-1.0)*x377*x381))+(((-1.0)*r22*x375)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-1.0)*pz))+(((0.4)*x382))+(((9.9e-7)*x379))+(((-0.4)*x385))+(((-9.9e-7)*x381))+(((-0.4)*sj1)));
evalcond[3]=((((0.4)*cj1))+(((-9.9e-7)*x376))+(((-1.0)*px))+(((-1.93e-6)*sj1))+(((0.4)*x384))+(((0.4)*x386))+(((9.9e-7)*x374)));
evalcond[4]=(((cj3*cj4*x376))+((r01*x378))+(((-1.0)*r02*sj4*x373))+x382+(((-1.0)*cj4*x373*x374))+(((-1.0)*x387))+((r00*x380)));
evalcond[5]=((((-1.0)*r22*sj4*x373))+((r20*x380))+(((-1.0)*x386))+(((-1.0)*x384))+(((-1.0)*cj4*x373*x379))+((r21*x378))+((cj3*cj4*x381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x388=((1.0)*r01);
CheckValue<IkReal> x389=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*cj5*r20*sj4)))),-1);
if(!x389.valid){
continue;
}
CheckValue<IkReal> x390 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*x388)))),IkReal((((r02*sj4))+(((-1.0)*cj4*sj5*x388))+((cj4*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x390.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x389.value)))+(x390.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x391=IKsin(j3);
IkReal x392=IKcos(j3);
IkReal x393=(r10*sj5);
IkReal x394=(cj4*sj5);
IkReal x395=(cj5*r11);
IkReal x396=(cj4*cj5);
IkReal x397=(r12*sj4);
IkReal x398=((1.0)*x392);
IkReal x399=((1.0)*x391);
evalcond[0]=(((x391*x395))+((x391*x393))+(((-1.0)*x397*x398))+((r11*x392*x394))+(((-1.0)*r10*x396*x398)));
evalcond[1]=((((-1.0)*r20*x396*x399))+(((-1.0)*r20*sj5*x398))+(((-1.0)*r22*sj4*x399))+((r21*x391*x394))+(((-1.0)*cj5*r21*x398)));
evalcond[2]=((((-1.0)*r02*sj4*x399))+(((-1.0)*r00*sj5*x398))+((r01*x391*x394))+(((-1.0)*r00*x396*x399))+(((-1.0)*cj5*r01*x398)));
evalcond[3]=((1.0)+((r11*x391*x394))+(((-1.0)*x395*x398))+(((-1.0)*x397*x399))+(((-1.0)*r10*x396*x399))+(((-1.0)*x393*x398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x400=((4.82499999988767e-6)*sj4);
IkReal x401=(r01*sj5);
IkReal x402=((0.999999999976719)*cj4);
IkReal x403=(cj5*r00);
IkReal x404=(r21*sj5);
IkReal x405=(cj5*r20);
IkReal x406=((0.999999999976719)*sj4);
IkReal x407=((4.82499999988767e-6)*cj4);
if( IKabs(((((-2.47499999994238e-6)*x404))+((x404*x406))+((r22*x402))+(((-1.20624999997192e-5)*px))+(((-1.0)*x400*x403))+(((-1.1941874999722e-11)*x401))+(((-1.0)*x405*x406))+((x400*x401))+(((1.1941874999722e-11)*x403))+(((-2.4999999999418)*pz))+(((2.47499999994238e-6)*x405))+((r02*x407)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.47499999994238e-6)*x403))+(((2.4999999999418)*px))+((r22*x407))+(((-1.0)*r02*x402))+(((-1.0)*x401*x406))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x400*x405))+(((-1.1941874999722e-11)*x404))+((x400*x404))+(((1.1941874999722e-11)*x405))+((x403*x406))+(((2.47499999994238e-6)*x401)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.47499999994238e-6)*x404))+((x404*x406))+((r22*x402))+(((-1.20624999997192e-5)*px))+(((-1.0)*x400*x403))+(((-1.1941874999722e-11)*x401))+(((-1.0)*x405*x406))+((x400*x401))+(((1.1941874999722e-11)*x403))+(((-2.4999999999418)*pz))+(((2.47499999994238e-6)*x405))+((r02*x407))))+IKsqr(((((-2.47499999994238e-6)*x403))+(((2.4999999999418)*px))+((r22*x407))+(((-1.0)*r02*x402))+(((-1.0)*x401*x406))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x400*x405))+(((-1.1941874999722e-11)*x404))+((x400*x404))+(((1.1941874999722e-11)*x405))+((x403*x406))+(((2.47499999994238e-6)*x401))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.47499999994238e-6)*x404))+((x404*x406))+((r22*x402))+(((-1.20624999997192e-5)*px))+(((-1.0)*x400*x403))+(((-1.1941874999722e-11)*x401))+(((-1.0)*x405*x406))+((x400*x401))+(((1.1941874999722e-11)*x403))+(((-2.4999999999418)*pz))+(((2.47499999994238e-6)*x405))+((r02*x407))), ((((-2.47499999994238e-6)*x403))+(((2.4999999999418)*px))+((r22*x407))+(((-1.0)*r02*x402))+(((-1.0)*x401*x406))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x400*x405))+(((-1.1941874999722e-11)*x404))+((x400*x404))+(((1.1941874999722e-11)*x405))+((x403*x406))+(((2.47499999994238e-6)*x401))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x408=IKcos(j1);
IkReal x409=IKsin(j1);
IkReal x410=((0.4)*sj4);
IkReal x411=(r21*sj5);
IkReal x412=((0.4)*cj4);
IkReal x413=(cj5*r20);
IkReal x414=(r01*sj5);
IkReal x415=(cj5*r00);
IkReal x416=((9.9e-7)*x414);
IkReal x417=((1.93e-6)*x409);
IkReal x418=((0.4)*x408);
IkReal x419=((9.9e-7)*x415);
IkReal x420=((1.93e-6)*x408);
IkReal x421=((0.4)*x409);
IkReal x422=((9.9e-7)*x411);
IkReal x423=((9.9e-7)*x413);
IkReal x424=((0.4)*sj3*sj5);
IkReal x425=((0.4)*cj5*sj3);
IkReal x426=(x418+x419);
IkReal x427=(x416+x417+px);
IkReal x428=(x422+x421+x420);
evalcond[0]=((((-1.0)*x426))+(((-1.0)*r02*x412))+((x410*x415))+x427+(((-1.0)*x410*x414)));
evalcond[1]=((((-1.0)*x428))+((x410*x411))+((r22*x412))+(((-1.0)*pz))+x423+(((-1.0)*x410*x413)));
evalcond[2]=((((-1.0)*x426))+((cj3*x412*x413))+((cj3*r22*x410))+(((-1.0)*r20*x424))+(((-1.0)*r21*x425))+x427+(((-1.0)*cj3*x411*x412)));
evalcond[3]=((((-1.0)*x423))+((cj3*x412*x414))+(((-1.0)*cj3*r02*x410))+((r00*x424))+((r01*x425))+x428+pz+(((-1.0)*cj3*x412*x415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x429=(cj4*sj1);
IkReal x430=(cj1*sj4);
IkReal x431=((1.0)*cj5);
IkReal x432=(r21*sj5);
IkReal x433=(cj1*cj4);
IkReal x434=(sj1*sj4);
IkReal x435=(r01*sj4*sj5);
if( IKabs((((r02*x433))+(((-1.0)*r00*x430*x431))+(((-1.0)*r22*x429))+((r01*sj5*x430))+((cj5*r20*x434))+(((-1.0)*x432*x434)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x429))+(((-1.0)*r00*x431*x434))+((r22*x433))+((x430*x432))+((r01*sj5*x434))+(((-1.0)*r20*x430*x431)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x433))+(((-1.0)*r00*x430*x431))+(((-1.0)*r22*x429))+((r01*sj5*x430))+((cj5*r20*x434))+(((-1.0)*x432*x434))))+IKsqr((((r02*x429))+(((-1.0)*r00*x431*x434))+((r22*x433))+((x430*x432))+((r01*sj5*x434))+(((-1.0)*r20*x430*x431))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r02*x433))+(((-1.0)*r00*x430*x431))+(((-1.0)*r22*x429))+((r01*sj5*x430))+((cj5*r20*x434))+(((-1.0)*x432*x434))), (((r02*x429))+(((-1.0)*r00*x431*x434))+((r22*x433))+((x430*x432))+((r01*sj5*x434))+(((-1.0)*r20*x430*x431))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x436=IKcos(j2);
IkReal x437=IKsin(j2);
IkReal x438=((1.0)*cj3);
IkReal x439=(cj5*r00);
IkReal x440=((1.0)*cj4);
IkReal x441=(r01*sj5);
IkReal x442=((1.0)*sj4);
IkReal x443=(cj5*sj3);
IkReal x444=(cj5*r20);
IkReal x445=(sj3*sj5);
IkReal x446=(r21*sj5);
IkReal x447=(cj1*x436);
IkReal x448=(cj3*cj4*sj5);
IkReal x449=(cj1*x437);
IkReal x450=(sj1*x437);
IkReal x451=(sj1*x436);
IkReal x452=((1.0)*x450);
evalcond[0]=(((sj4*x439))+x449+x451+(((-1.0)*r02*x440))+(((-1.0)*x441*x442)));
evalcond[1]=(((sj4*x444))+(((-1.0)*x452))+x447+(((-1.0)*r22*x440))+(((-1.0)*x442*x446)));
evalcond[2]=((((-9.9e-7)*x446))+(((-1.93e-6)*cj1))+(((-0.4)*x450))+(((9.9e-7)*x444))+(((-1.0)*pz))+(((0.4)*x447))+(((-0.4)*sj1)));
evalcond[3]=((((-9.9e-7)*x441))+(((9.9e-7)*x439))+(((0.4)*cj1))+(((-1.0)*px))+(((-1.93e-6)*sj1))+(((0.4)*x451))+(((0.4)*x449)));
evalcond[4]=((((-1.0)*x452))+x447+(((-1.0)*r02*sj4*x438))+((r01*x443))+((r00*x445))+((cj3*cj4*x441))+(((-1.0)*cj4*x438*x439)));
evalcond[5]=((((-1.0)*cj4*x438*x444))+(((-1.0)*x449))+(((-1.0)*x451))+((r21*x443))+(((-1.0)*r22*sj4*x438))+((r20*x445))+((cj3*cj4*x446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x453=((1.0)*sj5);
IkReal x454=((1.0)*cj5);
IkReal x455=((((-1.0)*r00*sj4*x454))+((r01*sj4*sj5))+((cj4*r02)));
j3eval[0]=x455;
j3eval[1]=IKsign(x455);
j3eval[2]=((IKabs(((((-1.0)*r20*x453))+(((-1.0)*r21*x454)))))+(IKabs(((((-1.0)*cj4*r21*x453))+((r22*sj4))+((cj4*cj5*r20))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x456=((1.0)*r01);
IkReal x457=((1.0)*sj5);
IkReal x458=(((cj5*r20*sj4))+(((-1.0)*r21*sj4*x457))+(((-1.0)*cj4*r22)));
j3eval[0]=x458;
j3eval[1]=((IKabs(((((-1.0)*r00*x457))+(((-1.0)*cj5*x456)))))+(IKabs(((((-1.0)*cj4*sj5*x456))+((r02*sj4))+((cj4*cj5*r00))))));
j3eval[2]=IKsign(x458);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x459=cj4*cj4;
IkReal x460=r10*r10;
IkReal x461=cj5*cj5;
IkReal x462=r11*r11;
IkReal x463=r12*r12;
IkReal x464=(r11*sj5);
IkReal x465=((1.0)*r10);
IkReal x466=(r12*sj4);
IkReal x467=((1.0)*x459);
IkReal x468=((2.0)*cj5*r10);
IkReal x469=(x461*x462);
IkReal x470=(x460*x461);
IkReal x471=(((x459*x470))+(((-1.0)*x463*x467))+(((-1.0)*x470))+((cj4*x466*x468))+x469+x463+x460+((x459*x462))+(((-1.0)*x467*x469))+((x464*x468))+(((-2.0)*cj4*x464*x466))+(((-1.0)*x459*x464*x468)));
j3eval[0]=x471;
j3eval[1]=IKsign(x471);
j3eval[2]=((IKabs(((((-1.0)*cj5*r11))+(((-1.0)*sj5*x465)))))+(IKabs((((cj4*x464))+(((-1.0)*x466))+(((-1.0)*cj4*cj5*x465))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x472=cj4*cj4;
IkReal x473=r10*r10;
IkReal x474=cj5*cj5;
IkReal x475=r11*r11;
IkReal x476=r12*r12;
IkReal x477=(r11*sj5);
IkReal x478=((1.0)*cj5);
IkReal x479=(r12*sj4);
IkReal x480=((1.0)*x472);
IkReal x481=((2.0)*cj5*r10);
IkReal x482=(x474*x475);
IkReal x483=(x473*x474);
CheckValue<IkReal> x484=IKPowWithIntegerCheck(IKsign(((((-1.0)*x476*x480))+((x472*x475))+(((-1.0)*x472*x477*x481))+(((-2.0)*cj4*x477*x479))+(((-1.0)*x483))+x482+x476+x473+(((-1.0)*x480*x482))+((cj4*x479*x481))+((x477*x481))+((x472*x483)))),-1);
if(!x484.valid){
continue;
}
CheckValue<IkReal> x485 = IKatan2WithCheck(IkReal((((cj4*x477))+(((-1.0)*cj4*r10*x478))+(((-1.0)*x479)))),IkReal(((((-1.0)*r10*sj5))+(((-1.0)*r11*x478)))),IKFAST_ATAN2_MAGTHRESH);
if(!x485.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x484.value)))+(x485.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x486=IKsin(j3);
IkReal x487=IKcos(j3);
IkReal x488=(r10*sj5);
IkReal x489=(cj4*sj5);
IkReal x490=(cj5*r11);
IkReal x491=(cj4*cj5);
IkReal x492=(r12*sj4);
IkReal x493=((1.0)*x487);
IkReal x494=((1.0)*x486);
evalcond[0]=((((-1.0)*r10*x491*x493))+((r11*x487*x489))+((x486*x488))+((x486*x490))+(((-1.0)*x492*x493)));
evalcond[1]=((((-1.0)*r22*sj4*x494))+(((-1.0)*r20*x491*x494))+(((-1.0)*cj5*r21*x493))+(((-1.0)*r20*sj5*x493))+((r21*x486*x489)));
evalcond[2]=((((-1.0)*r00*sj5*x493))+(((-1.0)*r00*x491*x494))+(((-1.0)*cj5*r01*x493))+(((-1.0)*r02*sj4*x494))+((r01*x486*x489)));
evalcond[3]=((-1.0)+(((-1.0)*x488*x493))+(((-1.0)*x490*x493))+((r11*x486*x489))+(((-1.0)*r10*x491*x494))+(((-1.0)*x492*x494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x495=((4.82499999988767e-6)*sj4);
IkReal x496=(r01*sj5);
IkReal x497=((0.999999999976719)*cj4);
IkReal x498=(cj5*r00);
IkReal x499=(r21*sj5);
IkReal x500=(cj5*r20);
IkReal x501=((0.999999999976719)*sj4);
IkReal x502=((4.82499999988767e-6)*cj4);
if( IKabs((((x495*x498))+(((-1.0)*x495*x496))+(((-2.47499999994238e-6)*x499))+((r22*x497))+(((1.20624999997192e-5)*px))+(((-1.1941874999722e-11)*x498))+(((1.1941874999722e-11)*x496))+((x499*x501))+(((-2.4999999999418)*pz))+(((2.47499999994238e-6)*x500))+(((-1.0)*x500*x501))+(((-1.0)*r02*x502)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x497))+((x495*x499))+(((-2.47499999994238e-6)*x496))+(((1.1941874999722e-11)*x500))+((r22*x502))+(((-1.0)*x495*x500))+(((-1.20624999997192e-5)*pz))+((x496*x501))+(((-1.1941874999722e-11)*x499))+(((-2.4999999999418)*px))+(((-1.0)*x498*x501))+(((2.47499999994238e-6)*x498)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x495*x498))+(((-1.0)*x495*x496))+(((-2.47499999994238e-6)*x499))+((r22*x497))+(((1.20624999997192e-5)*px))+(((-1.1941874999722e-11)*x498))+(((1.1941874999722e-11)*x496))+((x499*x501))+(((-2.4999999999418)*pz))+(((2.47499999994238e-6)*x500))+(((-1.0)*x500*x501))+(((-1.0)*r02*x502))))+IKsqr((((r02*x497))+((x495*x499))+(((-2.47499999994238e-6)*x496))+(((1.1941874999722e-11)*x500))+((r22*x502))+(((-1.0)*x495*x500))+(((-1.20624999997192e-5)*pz))+((x496*x501))+(((-1.1941874999722e-11)*x499))+(((-2.4999999999418)*px))+(((-1.0)*x498*x501))+(((2.47499999994238e-6)*x498))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((x495*x498))+(((-1.0)*x495*x496))+(((-2.47499999994238e-6)*x499))+((r22*x497))+(((1.20624999997192e-5)*px))+(((-1.1941874999722e-11)*x498))+(((1.1941874999722e-11)*x496))+((x499*x501))+(((-2.4999999999418)*pz))+(((2.47499999994238e-6)*x500))+(((-1.0)*x500*x501))+(((-1.0)*r02*x502))), (((r02*x497))+((x495*x499))+(((-2.47499999994238e-6)*x496))+(((1.1941874999722e-11)*x500))+((r22*x502))+(((-1.0)*x495*x500))+(((-1.20624999997192e-5)*pz))+((x496*x501))+(((-1.1941874999722e-11)*x499))+(((-2.4999999999418)*px))+(((-1.0)*x498*x501))+(((2.47499999994238e-6)*x498))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x503=IKcos(j1);
IkReal x504=IKsin(j1);
IkReal x505=((1.0)*pz);
IkReal x506=((0.4)*sj4);
IkReal x507=(r21*sj5);
IkReal x508=((0.4)*cj4);
IkReal x509=(cj5*r20);
IkReal x510=(r01*sj5);
IkReal x511=(cj5*r00);
IkReal x512=((0.4)*x503);
IkReal x513=((9.9e-7)*x510);
IkReal x514=((9.9e-7)*x511);
IkReal x515=((1.93e-6)*x504);
IkReal x516=((9.9e-7)*x509);
IkReal x517=((1.93e-6)*x503);
IkReal x518=((0.4)*x504);
IkReal x519=((9.9e-7)*x507);
IkReal x520=((0.4)*sj3*sj5);
IkReal x521=((0.4)*cj5*sj3);
IkReal x522=(x513+x512);
IkReal x523=(x515+x514);
IkReal x524=(x505+x519+x518+x517);
evalcond[0]=((((-1.0)*x522))+(((-1.0)*px))+x523+(((-1.0)*x506*x511))+((x506*x510))+((r02*x508)));
evalcond[1]=((((-1.0)*x506*x509))+((x506*x507))+((r22*x508))+(((-1.0)*x524))+x516);
evalcond[2]=(((r21*x521))+((r20*x520))+(((-1.0)*cj3*r22*x506))+(((-1.0)*x523))+(((-1.0)*cj3*x508*x509))+px+x522+((cj3*x507*x508)));
evalcond[3]=((((-1.0)*cj3*x508*x511))+(((-1.0)*cj3*r02*x506))+((cj3*x508*x510))+(((-1.0)*x524))+x516+((r01*x521))+((r00*x520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x525=((1.0)*r01);
IkReal x526=(sj1*sj4);
IkReal x527=(cj5*r00);
IkReal x528=(cj1*cj4);
IkReal x529=(cj5*r20);
IkReal x530=(cj1*sj4);
IkReal x531=(sj5*x530);
IkReal x532=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*r22*x532))+(((-1.0)*r02*x528))+(((-1.0)*x525*x531))+((x526*x529))+(((-1.0)*r21*sj5*x526))+((x527*x530)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x529*x530))+((x526*x527))+(((-1.0)*r02*x532))+((r22*x528))+(((-1.0)*sj5*x525*x526))+((r21*x531)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x532))+(((-1.0)*r02*x528))+(((-1.0)*x525*x531))+((x526*x529))+(((-1.0)*r21*sj5*x526))+((x527*x530))))+IKsqr(((((-1.0)*x529*x530))+((x526*x527))+(((-1.0)*r02*x532))+((r22*x528))+(((-1.0)*sj5*x525*x526))+((r21*x531))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x532))+(((-1.0)*r02*x528))+(((-1.0)*x525*x531))+((x526*x529))+(((-1.0)*r21*sj5*x526))+((x527*x530))), ((((-1.0)*x529*x530))+((x526*x527))+(((-1.0)*r02*x532))+((r22*x528))+(((-1.0)*sj5*x525*x526))+((r21*x531))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x533=IKcos(j2);
IkReal x534=IKsin(j2);
IkReal x535=((1.0)*cj3);
IkReal x536=(cj5*r00);
IkReal x537=((1.0)*cj4);
IkReal x538=(r01*sj5);
IkReal x539=((1.0)*sj4);
IkReal x540=(cj5*sj3);
IkReal x541=(cj5*r20);
IkReal x542=((1.0)*sj1);
IkReal x543=(sj3*sj5);
IkReal x544=((0.4)*sj1);
IkReal x545=(r21*sj5);
IkReal x546=(cj1*x533);
IkReal x547=(cj3*cj4*sj5);
IkReal x548=((0.4)*x534);
IkReal x549=(x533*x542);
IkReal x550=((1.0)*cj1*x534);
IkReal x551=(x550+x549);
evalcond[0]=((((-1.0)*r22*x537))+(((-1.0)*x534*x542))+(((-1.0)*x539*x545))+x546+((sj4*x541)));
evalcond[1]=((((-1.0)*x538*x539))+(((-1.0)*r02*x537))+(((-1.0)*x551))+((sj4*x536)));
evalcond[2]=((((-9.9e-7)*x545))+(((-1.93e-6)*cj1))+(((-1.0)*x534*x544))+(((-1.0)*x544))+(((-1.0)*pz))+(((9.9e-7)*x541))+(((0.4)*x546)));
evalcond[3]=((((-1.0)*cj1*x548))+(((-1.0)*x533*x544))+(((1.93e-6)*sj1))+(((-1.0)*px))+(((9.9e-7)*x536))+(((-0.4)*cj1))+(((-9.9e-7)*x538)));
evalcond[4]=((((-1.0)*x546))+((sj1*x534))+(((-1.0)*cj4*x535*x536))+((cj3*cj4*x538))+(((-1.0)*r02*sj4*x535))+((r00*x543))+((r01*x540)));
evalcond[5]=(((r21*x540))+((r20*x543))+(((-1.0)*cj4*x535*x541))+(((-1.0)*x551))+(((-1.0)*r22*sj4*x535))+((cj3*cj4*x545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x552=((1.0)*r01);
IkReal x553=((1.0)*sj5);
CheckValue<IkReal> x554=IKPowWithIntegerCheck(IKsign((((cj5*r20*sj4))+(((-1.0)*r21*sj4*x553))+(((-1.0)*cj4*r22)))),-1);
if(!x554.valid){
continue;
}
CheckValue<IkReal> x555 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x552))+(((-1.0)*r00*x553)))),IkReal((((r02*sj4))+((cj4*cj5*r00))+(((-1.0)*cj4*sj5*x552)))),IKFAST_ATAN2_MAGTHRESH);
if(!x555.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x554.value)))+(x555.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x556=IKsin(j3);
IkReal x557=IKcos(j3);
IkReal x558=(r10*sj5);
IkReal x559=(cj4*sj5);
IkReal x560=(cj5*r11);
IkReal x561=(cj4*cj5);
IkReal x562=(r12*sj4);
IkReal x563=((1.0)*x557);
IkReal x564=((1.0)*x556);
evalcond[0]=(((r11*x557*x559))+((x556*x560))+(((-1.0)*r10*x561*x563))+(((-1.0)*x562*x563))+((x556*x558)));
evalcond[1]=((((-1.0)*cj5*r21*x563))+((r21*x556*x559))+(((-1.0)*r22*sj4*x564))+(((-1.0)*r20*sj5*x563))+(((-1.0)*r20*x561*x564)));
evalcond[2]=((((-1.0)*r00*x561*x564))+((r01*x556*x559))+(((-1.0)*cj5*r01*x563))+(((-1.0)*r00*sj5*x563))+(((-1.0)*r02*sj4*x564)));
evalcond[3]=((-1.0)+(((-1.0)*x558*x563))+(((-1.0)*r10*x561*x564))+(((-1.0)*x562*x564))+(((-1.0)*x560*x563))+((r11*x556*x559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x565=((4.82499999988767e-6)*sj4);
IkReal x566=(r01*sj5);
IkReal x567=((0.999999999976719)*cj4);
IkReal x568=(cj5*r00);
IkReal x569=(r21*sj5);
IkReal x570=(cj5*r20);
IkReal x571=((0.999999999976719)*sj4);
IkReal x572=((4.82499999988767e-6)*cj4);
if( IKabs(((((-2.47499999994238e-6)*x569))+((x565*x568))+((r22*x567))+(((-1.0)*x570*x571))+(((-1.1941874999722e-11)*x568))+(((1.20624999997192e-5)*px))+(((1.1941874999722e-11)*x566))+(((2.47499999994238e-6)*x570))+((x569*x571))+(((-1.0)*r02*x572))+(((-2.4999999999418)*pz))+(((-1.0)*x565*x566)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.47499999994238e-6)*x566))+((x565*x569))+(((2.47499999994238e-6)*x568))+(((-1.1941874999722e-11)*x569))+(((-1.0)*x565*x570))+(((-1.20624999997192e-5)*pz))+(((1.1941874999722e-11)*x570))+((x566*x571))+(((-1.0)*x568*x571))+((r22*x572))+((r02*x567))+(((-2.4999999999418)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.47499999994238e-6)*x569))+((x565*x568))+((r22*x567))+(((-1.0)*x570*x571))+(((-1.1941874999722e-11)*x568))+(((1.20624999997192e-5)*px))+(((1.1941874999722e-11)*x566))+(((2.47499999994238e-6)*x570))+((x569*x571))+(((-1.0)*r02*x572))+(((-2.4999999999418)*pz))+(((-1.0)*x565*x566))))+IKsqr(((((-2.47499999994238e-6)*x566))+((x565*x569))+(((2.47499999994238e-6)*x568))+(((-1.1941874999722e-11)*x569))+(((-1.0)*x565*x570))+(((-1.20624999997192e-5)*pz))+(((1.1941874999722e-11)*x570))+((x566*x571))+(((-1.0)*x568*x571))+((r22*x572))+((r02*x567))+(((-2.4999999999418)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.47499999994238e-6)*x569))+((x565*x568))+((r22*x567))+(((-1.0)*x570*x571))+(((-1.1941874999722e-11)*x568))+(((1.20624999997192e-5)*px))+(((1.1941874999722e-11)*x566))+(((2.47499999994238e-6)*x570))+((x569*x571))+(((-1.0)*r02*x572))+(((-2.4999999999418)*pz))+(((-1.0)*x565*x566))), ((((-2.47499999994238e-6)*x566))+((x565*x569))+(((2.47499999994238e-6)*x568))+(((-1.1941874999722e-11)*x569))+(((-1.0)*x565*x570))+(((-1.20624999997192e-5)*pz))+(((1.1941874999722e-11)*x570))+((x566*x571))+(((-1.0)*x568*x571))+((r22*x572))+((r02*x567))+(((-2.4999999999418)*px))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x573=IKcos(j1);
IkReal x574=IKsin(j1);
IkReal x575=((1.0)*pz);
IkReal x576=((0.4)*sj4);
IkReal x577=(r21*sj5);
IkReal x578=((0.4)*cj4);
IkReal x579=(cj5*r20);
IkReal x580=(r01*sj5);
IkReal x581=(cj5*r00);
IkReal x582=((0.4)*x573);
IkReal x583=((9.9e-7)*x580);
IkReal x584=((9.9e-7)*x581);
IkReal x585=((1.93e-6)*x574);
IkReal x586=((9.9e-7)*x579);
IkReal x587=((1.93e-6)*x573);
IkReal x588=((0.4)*x574);
IkReal x589=((9.9e-7)*x577);
IkReal x590=((0.4)*sj3*sj5);
IkReal x591=((0.4)*cj5*sj3);
IkReal x592=(x582+x583);
IkReal x593=(x584+x585);
IkReal x594=(x575+x587+x588+x589);
evalcond[0]=(((r02*x578))+(((-1.0)*x592))+(((-1.0)*px))+x593+(((-1.0)*x576*x581))+((x576*x580)));
evalcond[1]=(((x576*x577))+(((-1.0)*x576*x579))+(((-1.0)*x594))+x586+((r22*x578)));
evalcond[2]=(((cj3*x577*x578))+(((-1.0)*cj3*x578*x579))+(((-1.0)*x593))+((r21*x591))+px+x592+(((-1.0)*cj3*r22*x576))+((r20*x590)));
evalcond[3]=(((r01*x591))+((r00*x590))+(((-1.0)*x594))+x586+(((-1.0)*cj3*r02*x576))+(((-1.0)*cj3*x578*x581))+((cj3*x578*x580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x595=((1.0)*r01);
IkReal x596=(sj1*sj4);
IkReal x597=(cj5*r00);
IkReal x598=(cj1*cj4);
IkReal x599=(cj5*r20);
IkReal x600=(cj1*sj4);
IkReal x601=(sj5*x600);
IkReal x602=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*r22*x602))+((x597*x600))+((x596*x599))+(((-1.0)*r02*x598))+(((-1.0)*x595*x601))+(((-1.0)*r21*sj5*x596)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x598))+((r21*x601))+((x596*x597))+(((-1.0)*r02*x602))+(((-1.0)*x599*x600))+(((-1.0)*sj5*x595*x596)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x602))+((x597*x600))+((x596*x599))+(((-1.0)*r02*x598))+(((-1.0)*x595*x601))+(((-1.0)*r21*sj5*x596))))+IKsqr((((r22*x598))+((r21*x601))+((x596*x597))+(((-1.0)*r02*x602))+(((-1.0)*x599*x600))+(((-1.0)*sj5*x595*x596))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x602))+((x597*x600))+((x596*x599))+(((-1.0)*r02*x598))+(((-1.0)*x595*x601))+(((-1.0)*r21*sj5*x596))), (((r22*x598))+((r21*x601))+((x596*x597))+(((-1.0)*r02*x602))+(((-1.0)*x599*x600))+(((-1.0)*sj5*x595*x596))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x603=IKcos(j2);
IkReal x604=IKsin(j2);
IkReal x605=((1.0)*cj3);
IkReal x606=(cj5*r00);
IkReal x607=((1.0)*cj4);
IkReal x608=(r01*sj5);
IkReal x609=((1.0)*sj4);
IkReal x610=(cj5*sj3);
IkReal x611=(cj5*r20);
IkReal x612=((1.0)*sj1);
IkReal x613=(sj3*sj5);
IkReal x614=((0.4)*sj1);
IkReal x615=(r21*sj5);
IkReal x616=(cj1*x603);
IkReal x617=(cj3*cj4*sj5);
IkReal x618=((0.4)*x604);
IkReal x619=(x603*x612);
IkReal x620=((1.0)*cj1*x604);
IkReal x621=(x619+x620);
evalcond[0]=(((sj4*x611))+(((-1.0)*x609*x615))+(((-1.0)*r22*x607))+(((-1.0)*x604*x612))+x616);
evalcond[1]=((((-1.0)*x608*x609))+(((-1.0)*x621))+((sj4*x606))+(((-1.0)*r02*x607)));
evalcond[2]=((((-1.93e-6)*cj1))+(((9.9e-7)*x611))+(((-9.9e-7)*x615))+(((0.4)*x616))+(((-1.0)*x604*x614))+(((-1.0)*pz))+(((-1.0)*x614)));
evalcond[3]=((((-9.9e-7)*x608))+(((9.9e-7)*x606))+(((-1.0)*cj1*x618))+(((1.93e-6)*sj1))+(((-1.0)*px))+(((-1.0)*x603*x614))+(((-0.4)*cj1)));
evalcond[4]=(((r00*x613))+((r01*x610))+((sj1*x604))+(((-1.0)*r02*sj4*x605))+(((-1.0)*x616))+(((-1.0)*cj4*x605*x606))+((cj3*cj4*x608)));
evalcond[5]=(((r20*x613))+(((-1.0)*cj4*x605*x611))+(((-1.0)*x621))+((r21*x610))+(((-1.0)*r22*sj4*x605))+((cj3*cj4*x615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x622=((1.0)*cj5);
IkReal x623=((1.0)*sj5);
CheckValue<IkReal> x624 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x622))+(((-1.0)*r20*x623)))),IkReal((((r22*sj4))+(((-1.0)*cj4*r21*x623))+((cj4*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x624.valid){
continue;
}
CheckValue<IkReal> x625=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj4*x622))+((r01*sj4*sj5))+((cj4*r02)))),-1);
if(!x625.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x624.value)+(((1.5707963267949)*(x625.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x626=IKsin(j3);
IkReal x627=IKcos(j3);
IkReal x628=(r10*sj5);
IkReal x629=(cj4*sj5);
IkReal x630=(cj5*r11);
IkReal x631=(cj4*cj5);
IkReal x632=(r12*sj4);
IkReal x633=((1.0)*x627);
IkReal x634=((1.0)*x626);
evalcond[0]=(((r11*x627*x629))+(((-1.0)*r10*x631*x633))+((x626*x628))+((x626*x630))+(((-1.0)*x632*x633)));
evalcond[1]=((((-1.0)*r20*x631*x634))+((r21*x626*x629))+(((-1.0)*cj5*r21*x633))+(((-1.0)*r20*sj5*x633))+(((-1.0)*r22*sj4*x634)));
evalcond[2]=((((-1.0)*cj5*r01*x633))+(((-1.0)*r00*x631*x634))+((r01*x626*x629))+(((-1.0)*r02*sj4*x634))+(((-1.0)*r00*sj5*x633)));
evalcond[3]=((-1.0)+(((-1.0)*x630*x633))+(((-1.0)*x628*x633))+((r11*x626*x629))+(((-1.0)*r10*x631*x634))+(((-1.0)*x632*x634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x635=((4.82499999988767e-6)*sj4);
IkReal x636=(r01*sj5);
IkReal x637=((0.999999999976719)*cj4);
IkReal x638=(cj5*r00);
IkReal x639=(r21*sj5);
IkReal x640=(cj5*r20);
IkReal x641=((0.999999999976719)*sj4);
IkReal x642=((4.82499999988767e-6)*cj4);
if( IKabs(((((-1.1941874999722e-11)*x638))+((x635*x638))+((x639*x641))+(((-1.0)*x640*x641))+((r22*x637))+(((-1.0)*r02*x642))+(((1.20624999997192e-5)*px))+(((-2.47499999994238e-6)*x639))+(((-1.0)*x635*x636))+(((2.47499999994238e-6)*x640))+(((1.1941874999722e-11)*x636))+(((-2.4999999999418)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x637))+(((2.47499999994238e-6)*x638))+((x636*x641))+(((-1.1941874999722e-11)*x639))+((x635*x639))+(((1.1941874999722e-11)*x640))+(((-1.20624999997192e-5)*pz))+(((-2.47499999994238e-6)*x636))+(((-1.0)*x635*x640))+((r22*x642))+(((-2.4999999999418)*px))+(((-1.0)*x638*x641)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.1941874999722e-11)*x638))+((x635*x638))+((x639*x641))+(((-1.0)*x640*x641))+((r22*x637))+(((-1.0)*r02*x642))+(((1.20624999997192e-5)*px))+(((-2.47499999994238e-6)*x639))+(((-1.0)*x635*x636))+(((2.47499999994238e-6)*x640))+(((1.1941874999722e-11)*x636))+(((-2.4999999999418)*pz))))+IKsqr((((r02*x637))+(((2.47499999994238e-6)*x638))+((x636*x641))+(((-1.1941874999722e-11)*x639))+((x635*x639))+(((1.1941874999722e-11)*x640))+(((-1.20624999997192e-5)*pz))+(((-2.47499999994238e-6)*x636))+(((-1.0)*x635*x640))+((r22*x642))+(((-2.4999999999418)*px))+(((-1.0)*x638*x641))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.1941874999722e-11)*x638))+((x635*x638))+((x639*x641))+(((-1.0)*x640*x641))+((r22*x637))+(((-1.0)*r02*x642))+(((1.20624999997192e-5)*px))+(((-2.47499999994238e-6)*x639))+(((-1.0)*x635*x636))+(((2.47499999994238e-6)*x640))+(((1.1941874999722e-11)*x636))+(((-2.4999999999418)*pz))), (((r02*x637))+(((2.47499999994238e-6)*x638))+((x636*x641))+(((-1.1941874999722e-11)*x639))+((x635*x639))+(((1.1941874999722e-11)*x640))+(((-1.20624999997192e-5)*pz))+(((-2.47499999994238e-6)*x636))+(((-1.0)*x635*x640))+((r22*x642))+(((-2.4999999999418)*px))+(((-1.0)*x638*x641))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x643=IKcos(j1);
IkReal x644=IKsin(j1);
IkReal x645=((1.0)*pz);
IkReal x646=((0.4)*sj4);
IkReal x647=(r21*sj5);
IkReal x648=((0.4)*cj4);
IkReal x649=(cj5*r20);
IkReal x650=(r01*sj5);
IkReal x651=(cj5*r00);
IkReal x652=((0.4)*x643);
IkReal x653=((9.9e-7)*x650);
IkReal x654=((9.9e-7)*x651);
IkReal x655=((1.93e-6)*x644);
IkReal x656=((9.9e-7)*x649);
IkReal x657=((1.93e-6)*x643);
IkReal x658=((0.4)*x644);
IkReal x659=((9.9e-7)*x647);
IkReal x660=((0.4)*sj3*sj5);
IkReal x661=((0.4)*cj5*sj3);
IkReal x662=(x652+x653);
IkReal x663=(x654+x655);
IkReal x664=(x645+x657+x658+x659);
evalcond[0]=(((x646*x650))+(((-1.0)*x646*x651))+((r02*x648))+(((-1.0)*px))+(((-1.0)*x662))+x663);
evalcond[1]=((((-1.0)*x646*x649))+(((-1.0)*x664))+x656+((r22*x648))+((x646*x647)));
evalcond[2]=(((r20*x660))+(((-1.0)*cj3*x648*x649))+(((-1.0)*cj3*r22*x646))+((cj3*x647*x648))+((r21*x661))+(((-1.0)*x663))+px+x662);
evalcond[3]=(((r01*x661))+((r00*x660))+(((-1.0)*cj3*r02*x646))+(((-1.0)*cj3*x648*x651))+(((-1.0)*x664))+((cj3*x648*x650))+x656);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x665=((1.0)*r01);
IkReal x666=(sj1*sj4);
IkReal x667=(cj5*r00);
IkReal x668=(cj1*cj4);
IkReal x669=(cj5*r20);
IkReal x670=(cj1*sj4);
IkReal x671=(sj5*x670);
IkReal x672=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*r22*x672))+((x666*x669))+(((-1.0)*x665*x671))+((x667*x670))+(((-1.0)*r02*x668))+(((-1.0)*r21*sj5*x666)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x672))+((r21*x671))+((x666*x667))+(((-1.0)*sj5*x665*x666))+(((-1.0)*x669*x670))+((r22*x668)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x672))+((x666*x669))+(((-1.0)*x665*x671))+((x667*x670))+(((-1.0)*r02*x668))+(((-1.0)*r21*sj5*x666))))+IKsqr(((((-1.0)*r02*x672))+((r21*x671))+((x666*x667))+(((-1.0)*sj5*x665*x666))+(((-1.0)*x669*x670))+((r22*x668))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x672))+((x666*x669))+(((-1.0)*x665*x671))+((x667*x670))+(((-1.0)*r02*x668))+(((-1.0)*r21*sj5*x666))), ((((-1.0)*r02*x672))+((r21*x671))+((x666*x667))+(((-1.0)*sj5*x665*x666))+(((-1.0)*x669*x670))+((r22*x668))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x673=IKcos(j2);
IkReal x674=IKsin(j2);
IkReal x675=((1.0)*cj3);
IkReal x676=(cj5*r00);
IkReal x677=((1.0)*cj4);
IkReal x678=(r01*sj5);
IkReal x679=((1.0)*sj4);
IkReal x680=(cj5*sj3);
IkReal x681=(cj5*r20);
IkReal x682=((1.0)*sj1);
IkReal x683=(sj3*sj5);
IkReal x684=((0.4)*sj1);
IkReal x685=(r21*sj5);
IkReal x686=(cj1*x673);
IkReal x687=(cj3*cj4*sj5);
IkReal x688=((0.4)*x674);
IkReal x689=(x673*x682);
IkReal x690=((1.0)*cj1*x674);
IkReal x691=(x689+x690);
evalcond[0]=((((-1.0)*r22*x677))+(((-1.0)*x679*x685))+x686+(((-1.0)*x674*x682))+((sj4*x681)));
evalcond[1]=((((-1.0)*r02*x677))+(((-1.0)*x678*x679))+(((-1.0)*x691))+((sj4*x676)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-1.0)*x684))+(((-1.0)*pz))+(((-9.9e-7)*x685))+(((0.4)*x686))+(((-1.0)*x674*x684))+(((9.9e-7)*x681)));
evalcond[3]=((((9.9e-7)*x676))+(((-1.0)*cj1*x688))+(((1.93e-6)*sj1))+(((-1.0)*px))+(((-9.9e-7)*x678))+(((-1.0)*x673*x684))+(((-0.4)*cj1)));
evalcond[4]=(((cj3*cj4*x678))+(((-1.0)*cj4*x675*x676))+((r01*x680))+(((-1.0)*r02*sj4*x675))+((r00*x683))+((sj1*x674))+(((-1.0)*x686)));
evalcond[5]=((((-1.0)*cj4*x675*x681))+(((-1.0)*r22*sj4*x675))+((cj3*cj4*x685))+((r21*x680))+(((-1.0)*x691))+((r20*x683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x692=((1.0)*r11);
IkReal x693=(((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*cj5*r20*sj4)));
j3eval[0]=x693;
j3eval[1]=IKsign(x693);
j3eval[2]=((IKabs((((cj4*cj5*r10))+((r12*sj4))+(((-1.0)*cj4*sj5*x692)))))+(IKabs(((((-1.0)*r10*sj5))+(((-1.0)*cj5*x692))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x694=((1.0)*sj5);
IkReal x695=(((cj5*r10*sj4))+(((-1.0)*r11*sj4*x694))+(((-1.0)*cj4*r12)));
j3eval[0]=x695;
j3eval[1]=((IKabs(((((-1.0)*cj5*r21))+(((-1.0)*r20*x694)))))+(IKabs((((r22*sj4))+((cj4*cj5*r20))+(((-1.0)*cj4*r21*x694))))));
j3eval[2]=IKsign(x695);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x696=r00*r00;
IkReal x697=cj5*cj5;
IkReal x698=cj4*cj4;
IkReal x699=r01*r01;
IkReal x700=r02*r02;
IkReal x701=(cj5*r00);
IkReal x702=(r02*sj4);
IkReal x703=((2.0)*r01*sj5);
IkReal x704=((1.0)*x698);
IkReal x705=(x696*x697);
IkReal x706=(x697*x699);
IkReal x707=(((x701*x703))+(((-1.0)*cj4*x702*x703))+(((2.0)*cj4*x701*x702))+(((-1.0)*x698*x701*x703))+(((-1.0)*x705))+(((-1.0)*x704*x706))+x696+((x698*x705))+x700+x706+((x698*x699))+(((-1.0)*x700*x704)));
j3eval[0]=x707;
j3eval[1]=((IKabs(((((-1.0)*cj4*x701))+(((-1.0)*x702))+((cj4*r01*sj5)))))+(IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))))));
j3eval[2]=IKsign(x707);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x708=r00*r00;
IkReal x709=cj5*cj5;
IkReal x710=cj4*cj4;
IkReal x711=r01*r01;
IkReal x712=r02*r02;
IkReal x713=(cj5*r00);
IkReal x714=(r02*sj4);
IkReal x715=((2.0)*r01*sj5);
IkReal x716=((1.0)*x710);
IkReal x717=(x708*x709);
IkReal x718=(x709*x711);
CheckValue<IkReal> x719=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*x714*x715))+(((-1.0)*x710*x713*x715))+(((-1.0)*x717))+(((2.0)*cj4*x713*x714))+((x710*x711))+((x710*x717))+(((-1.0)*x716*x718))+(((-1.0)*x712*x716))+x718+x712+x708+((x713*x715)))),-1);
if(!x719.valid){
continue;
}
CheckValue<IkReal> x720 = IKatan2WithCheck(IkReal(((((-1.0)*x714))+((cj4*r01*sj5))+(((-1.0)*cj4*x713)))),IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x720.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x719.value)))+(x720.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x721=IKsin(j3);
IkReal x722=IKcos(j3);
IkReal x723=(r02*sj4);
IkReal x724=(cj4*cj5);
IkReal x725=(cj4*sj5);
IkReal x726=(cj5*r01);
IkReal x727=(r00*sj5);
IkReal x728=((1.0)*x722);
IkReal x729=((1.0)*x721);
evalcond[0]=(((x721*x727))+((x721*x726))+(((-1.0)*r00*x724*x728))+((r01*x722*x725))+(((-1.0)*x723*x728)));
evalcond[1]=((((-1.0)*r20*sj5*x728))+(((-1.0)*r20*x724*x729))+(((-1.0)*cj5*r21*x728))+(((-1.0)*r22*sj4*x729))+((r21*x721*x725)));
evalcond[2]=((((-1.0)*r12*sj4*x729))+(((-1.0)*cj5*r11*x728))+(((-1.0)*r10*sj5*x728))+((r11*x721*x725))+(((-1.0)*r10*x724*x729)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x724*x729))+(((-1.0)*x727*x728))+(((-1.0)*x723*x729))+((r01*x721*x725))+(((-1.0)*x726*x728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x730=((4.82499999988767e-6)*sj4);
IkReal x731=(cj5*r20);
IkReal x732=(r11*sj5);
IkReal x733=(r21*sj5);
IkReal x734=(cj5*r10);
IkReal x735=((0.999999999976719)*sj4);
IkReal x736=((4.82499999988767e-6)*cj4);
IkReal x737=((0.999999999976719)*cj4);
if( IKabs((((r12*x736))+(((-2.47499999994238e-6)*x733))+(((-1.0)*x731*x735))+(((-1.20624999997192e-5)*py))+(((2.47499999994238e-6)*x731))+((x733*x735))+(((-1.0)*x730*x734))+(((-1.1941874999722e-11)*x732))+((r22*x737))+(((-2.4999999999418)*pz))+(((1.1941874999722e-11)*x734))+((x730*x732)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.47499999994238e-6)*x734))+(((-1.0)*x732*x735))+(((2.4999999999418)*py))+((x734*x735))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x732))+(((-1.0)*x730*x731))+(((-1.1941874999722e-11)*x733))+((r22*x736))+(((1.1941874999722e-11)*x731))+(((-1.0)*r12*x737))+((x730*x733)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x736))+(((-2.47499999994238e-6)*x733))+(((-1.0)*x731*x735))+(((-1.20624999997192e-5)*py))+(((2.47499999994238e-6)*x731))+((x733*x735))+(((-1.0)*x730*x734))+(((-1.1941874999722e-11)*x732))+((r22*x737))+(((-2.4999999999418)*pz))+(((1.1941874999722e-11)*x734))+((x730*x732))))+IKsqr(((((-2.47499999994238e-6)*x734))+(((-1.0)*x732*x735))+(((2.4999999999418)*py))+((x734*x735))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x732))+(((-1.0)*x730*x731))+(((-1.1941874999722e-11)*x733))+((r22*x736))+(((1.1941874999722e-11)*x731))+(((-1.0)*r12*x737))+((x730*x733))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r12*x736))+(((-2.47499999994238e-6)*x733))+(((-1.0)*x731*x735))+(((-1.20624999997192e-5)*py))+(((2.47499999994238e-6)*x731))+((x733*x735))+(((-1.0)*x730*x734))+(((-1.1941874999722e-11)*x732))+((r22*x737))+(((-2.4999999999418)*pz))+(((1.1941874999722e-11)*x734))+((x730*x732))), ((((-2.47499999994238e-6)*x734))+(((-1.0)*x732*x735))+(((2.4999999999418)*py))+((x734*x735))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x732))+(((-1.0)*x730*x731))+(((-1.1941874999722e-11)*x733))+((r22*x736))+(((1.1941874999722e-11)*x731))+(((-1.0)*r12*x737))+((x730*x733))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x738=IKcos(j1);
IkReal x739=IKsin(j1);
IkReal x740=((0.4)*sj4);
IkReal x741=(r21*sj5);
IkReal x742=(cj5*r10);
IkReal x743=((0.4)*cj4);
IkReal x744=(cj5*r20);
IkReal x745=((0.4)*sj3);
IkReal x746=(r11*sj5);
IkReal x747=((1.93e-6)*x739);
IkReal x748=((9.9e-7)*x746);
IkReal x749=((0.4)*x738);
IkReal x750=((9.9e-7)*x742);
IkReal x751=((1.93e-6)*x738);
IkReal x752=((0.4)*x739);
IkReal x753=((9.9e-7)*x741);
IkReal x754=((9.9e-7)*x744);
IkReal x755=(x750+x749);
IkReal x756=(py+x747+x748);
IkReal x757=(x751+x753+x752);
evalcond[0]=((((-1.0)*r12*x743))+((x740*x742))+(((-1.0)*x740*x746))+x756+(((-1.0)*x755)));
evalcond[1]=(((r22*x743))+((x740*x741))+(((-1.0)*pz))+(((-1.0)*x740*x744))+x754+(((-1.0)*x757)));
evalcond[2]=((((-1.0)*cj3*x741*x743))+x756+((cj3*x743*x744))+(((-1.0)*cj5*r21*x745))+((cj3*r22*x740))+(((-1.0)*r20*sj5*x745))+(((-1.0)*x755)));
evalcond[3]=((((-1.0)*cj3*x742*x743))+(((-1.0)*cj3*r12*x740))+pz+x757+((cj3*x743*x746))+((r10*sj5*x745))+(((-1.0)*x754))+((cj5*r11*x745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x758=(cj4*r12);
IkReal x759=(cj4*r22);
IkReal x760=(cj1*sj4);
IkReal x761=(r11*sj5);
IkReal x762=(r21*sj5);
IkReal x763=((1.0)*sj1);
IkReal x764=(sj1*sj4);
IkReal x765=(cj5*r20);
IkReal x766=((1.0)*cj5*r10);
if( IKabs((((cj1*x758))+((x760*x761))+(((-1.0)*sj4*x762*x763))+(((-1.0)*x760*x766))+((x764*x765))+(((-1.0)*x759*x763)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x759))+((x760*x762))+(((-1.0)*cj5*r10*sj4*x763))+((x761*x764))+((sj1*x758))+(((-1.0)*x760*x765)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x758))+((x760*x761))+(((-1.0)*sj4*x762*x763))+(((-1.0)*x760*x766))+((x764*x765))+(((-1.0)*x759*x763))))+IKsqr((((cj1*x759))+((x760*x762))+(((-1.0)*cj5*r10*sj4*x763))+((x761*x764))+((sj1*x758))+(((-1.0)*x760*x765))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x758))+((x760*x761))+(((-1.0)*sj4*x762*x763))+(((-1.0)*x760*x766))+((x764*x765))+(((-1.0)*x759*x763))), (((cj1*x759))+((x760*x762))+(((-1.0)*cj5*r10*sj4*x763))+((x761*x764))+((sj1*x758))+(((-1.0)*x760*x765))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x767=IKcos(j2);
IkReal x768=IKsin(j2);
IkReal x769=(cj3*cj4);
IkReal x770=(r21*sj5);
IkReal x771=((1.0)*r22);
IkReal x772=(cj5*r10);
IkReal x773=(cj5*r20);
IkReal x774=(cj5*sj3);
IkReal x775=(cj3*sj4);
IkReal x776=(r11*sj5);
IkReal x777=((1.0)*sj4);
IkReal x778=((1.0)*r12);
IkReal x779=(sj3*sj5);
IkReal x780=(cj1*x767);
IkReal x781=(cj1*x768);
IkReal x782=(sj1*x768);
IkReal x783=(sj1*x767);
IkReal x784=((1.0)*x782);
evalcond[0]=(((sj4*x772))+(((-1.0)*cj4*x778))+(((-1.0)*x776*x777))+x783+x781);
evalcond[1]=(((sj4*x773))+(((-1.0)*x784))+(((-1.0)*cj4*x771))+x780+(((-1.0)*x770*x777)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x770))+(((9.9e-7)*x773))+(((-1.0)*pz))+(((-0.4)*x782))+(((0.4)*x780))+(((-0.4)*sj1)));
evalcond[3]=((((-9.9e-7)*x776))+(((9.9e-7)*x772))+(((0.4)*cj1))+(((-1.0)*py))+(((-1.93e-6)*sj1))+(((0.4)*x783))+(((0.4)*x781)));
evalcond[4]=((((-1.0)*x784))+(((-1.0)*x769*x772))+((r10*x779))+((x769*x776))+((r11*x774))+(((-1.0)*x775*x778))+x780);
evalcond[5]=((((-1.0)*x769*x773))+((x769*x770))+((r21*x774))+(((-1.0)*x771*x775))+((r20*x779))+(((-1.0)*x781))+(((-1.0)*x783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x785=((1.0)*sj5);
CheckValue<IkReal> x786 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x785))+(((-1.0)*cj5*r21)))),IkReal((((r22*sj4))+((cj4*cj5*r20))+(((-1.0)*cj4*r21*x785)))),IKFAST_ATAN2_MAGTHRESH);
if(!x786.valid){
continue;
}
CheckValue<IkReal> x787=IKPowWithIntegerCheck(IKsign((((cj5*r10*sj4))+(((-1.0)*r11*sj4*x785))+(((-1.0)*cj4*r12)))),-1);
if(!x787.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x786.value)+(((1.5707963267949)*(x787.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x788=IKsin(j3);
IkReal x789=IKcos(j3);
IkReal x790=(r02*sj4);
IkReal x791=(cj4*cj5);
IkReal x792=(cj4*sj5);
IkReal x793=(cj5*r01);
IkReal x794=(r00*sj5);
IkReal x795=((1.0)*x789);
IkReal x796=((1.0)*x788);
evalcond[0]=((((-1.0)*r00*x791*x795))+((r01*x789*x792))+((x788*x794))+((x788*x793))+(((-1.0)*x790*x795)));
evalcond[1]=(((r21*x788*x792))+(((-1.0)*r20*sj5*x795))+(((-1.0)*r20*x791*x796))+(((-1.0)*r22*sj4*x796))+(((-1.0)*cj5*r21*x795)));
evalcond[2]=((((-1.0)*r12*sj4*x796))+(((-1.0)*cj5*r11*x795))+(((-1.0)*r10*sj5*x795))+(((-1.0)*r10*x791*x796))+((r11*x788*x792)));
evalcond[3]=((-1.0)+(((-1.0)*x794*x795))+(((-1.0)*r00*x791*x796))+(((-1.0)*x793*x795))+(((-1.0)*x790*x796))+((r01*x788*x792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x797=((4.82499999988767e-6)*sj4);
IkReal x798=(cj5*r20);
IkReal x799=(r11*sj5);
IkReal x800=(r21*sj5);
IkReal x801=(cj5*r10);
IkReal x802=((0.999999999976719)*sj4);
IkReal x803=((4.82499999988767e-6)*cj4);
IkReal x804=((0.999999999976719)*cj4);
if( IKabs(((((-1.0)*x798*x802))+((x800*x802))+(((-1.0)*x797*x801))+(((-1.1941874999722e-11)*x799))+((r12*x803))+(((-2.47499999994238e-6)*x800))+((r22*x804))+(((-1.20624999997192e-5)*py))+(((2.47499999994238e-6)*x798))+(((-2.4999999999418)*pz))+(((1.1941874999722e-11)*x801))+((x797*x799)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x804))+(((1.1941874999722e-11)*x798))+(((2.4999999999418)*py))+(((-1.0)*x799*x802))+(((-2.47499999994238e-6)*x801))+((r22*x803))+((x797*x800))+(((-1.1941874999722e-11)*x800))+(((-1.0)*x797*x798))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x799))+((x801*x802)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x798*x802))+((x800*x802))+(((-1.0)*x797*x801))+(((-1.1941874999722e-11)*x799))+((r12*x803))+(((-2.47499999994238e-6)*x800))+((r22*x804))+(((-1.20624999997192e-5)*py))+(((2.47499999994238e-6)*x798))+(((-2.4999999999418)*pz))+(((1.1941874999722e-11)*x801))+((x797*x799))))+IKsqr(((((-1.0)*r12*x804))+(((1.1941874999722e-11)*x798))+(((2.4999999999418)*py))+(((-1.0)*x799*x802))+(((-2.47499999994238e-6)*x801))+((r22*x803))+((x797*x800))+(((-1.1941874999722e-11)*x800))+(((-1.0)*x797*x798))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x799))+((x801*x802))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*x798*x802))+((x800*x802))+(((-1.0)*x797*x801))+(((-1.1941874999722e-11)*x799))+((r12*x803))+(((-2.47499999994238e-6)*x800))+((r22*x804))+(((-1.20624999997192e-5)*py))+(((2.47499999994238e-6)*x798))+(((-2.4999999999418)*pz))+(((1.1941874999722e-11)*x801))+((x797*x799))), ((((-1.0)*r12*x804))+(((1.1941874999722e-11)*x798))+(((2.4999999999418)*py))+(((-1.0)*x799*x802))+(((-2.47499999994238e-6)*x801))+((r22*x803))+((x797*x800))+(((-1.1941874999722e-11)*x800))+(((-1.0)*x797*x798))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x799))+((x801*x802))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x805=IKcos(j1);
IkReal x806=IKsin(j1);
IkReal x807=((0.4)*sj4);
IkReal x808=(r21*sj5);
IkReal x809=(cj5*r10);
IkReal x810=((0.4)*cj4);
IkReal x811=(cj5*r20);
IkReal x812=((0.4)*sj3);
IkReal x813=(r11*sj5);
IkReal x814=((1.93e-6)*x806);
IkReal x815=((9.9e-7)*x813);
IkReal x816=((0.4)*x805);
IkReal x817=((9.9e-7)*x809);
IkReal x818=((1.93e-6)*x805);
IkReal x819=((0.4)*x806);
IkReal x820=((9.9e-7)*x808);
IkReal x821=((9.9e-7)*x811);
IkReal x822=(x816+x817);
IkReal x823=(py+x814+x815);
IkReal x824=(x818+x819+x820);
evalcond[0]=((((-1.0)*x822))+(((-1.0)*r12*x810))+(((-1.0)*x807*x813))+x823+((x807*x809)));
evalcond[1]=((((-1.0)*x824))+(((-1.0)*pz))+(((-1.0)*x807*x811))+x821+((r22*x810))+((x807*x808)));
evalcond[2]=(((cj3*r22*x807))+((cj3*x810*x811))+(((-1.0)*cj3*x808*x810))+(((-1.0)*x822))+(((-1.0)*r20*sj5*x812))+(((-1.0)*cj5*r21*x812))+x823);
evalcond[3]=((((-1.0)*cj3*r12*x807))+((r10*sj5*x812))+((cj3*x810*x813))+((cj5*r11*x812))+(((-1.0)*x821))+(((-1.0)*cj3*x809*x810))+pz+x824);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x825=(cj4*r12);
IkReal x826=(cj4*r22);
IkReal x827=(cj1*sj4);
IkReal x828=(r11*sj5);
IkReal x829=(r21*sj5);
IkReal x830=((1.0)*sj1);
IkReal x831=(sj1*sj4);
IkReal x832=(cj5*r20);
IkReal x833=((1.0)*cj5*r10);
if( IKabs((((x831*x832))+(((-1.0)*x827*x833))+(((-1.0)*x826*x830))+(((-1.0)*sj4*x829*x830))+((cj1*x825))+((x827*x828)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x825))+(((-1.0)*x827*x832))+((cj1*x826))+((x828*x831))+((x827*x829))+(((-1.0)*cj5*r10*sj4*x830)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x831*x832))+(((-1.0)*x827*x833))+(((-1.0)*x826*x830))+(((-1.0)*sj4*x829*x830))+((cj1*x825))+((x827*x828))))+IKsqr((((sj1*x825))+(((-1.0)*x827*x832))+((cj1*x826))+((x828*x831))+((x827*x829))+(((-1.0)*cj5*r10*sj4*x830))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x831*x832))+(((-1.0)*x827*x833))+(((-1.0)*x826*x830))+(((-1.0)*sj4*x829*x830))+((cj1*x825))+((x827*x828))), (((sj1*x825))+(((-1.0)*x827*x832))+((cj1*x826))+((x828*x831))+((x827*x829))+(((-1.0)*cj5*r10*sj4*x830))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x834=IKcos(j2);
IkReal x835=IKsin(j2);
IkReal x836=(cj3*cj4);
IkReal x837=(r21*sj5);
IkReal x838=((1.0)*r22);
IkReal x839=(cj5*r10);
IkReal x840=(cj5*r20);
IkReal x841=(cj5*sj3);
IkReal x842=(cj3*sj4);
IkReal x843=(r11*sj5);
IkReal x844=((1.0)*sj4);
IkReal x845=((1.0)*r12);
IkReal x846=(sj3*sj5);
IkReal x847=(cj1*x834);
IkReal x848=(cj1*x835);
IkReal x849=(sj1*x835);
IkReal x850=(sj1*x834);
IkReal x851=((1.0)*x849);
evalcond[0]=(((sj4*x839))+(((-1.0)*cj4*x845))+(((-1.0)*x843*x844))+x850+x848);
evalcond[1]=((((-1.0)*x851))+((sj4*x840))+(((-1.0)*cj4*x838))+(((-1.0)*x837*x844))+x847);
evalcond[2]=((((-1.93e-6)*cj1))+(((-0.4)*x849))+(((0.4)*x847))+(((9.9e-7)*x840))+(((-1.0)*pz))+(((-9.9e-7)*x837))+(((-0.4)*sj1)));
evalcond[3]=((((0.4)*x848))+(((0.4)*cj1))+(((9.9e-7)*x839))+(((-1.0)*py))+(((-1.93e-6)*sj1))+(((-9.9e-7)*x843))+(((0.4)*x850)));
evalcond[4]=((((-1.0)*x851))+(((-1.0)*x842*x845))+((x836*x843))+((r10*x846))+(((-1.0)*x836*x839))+x847+((r11*x841)));
evalcond[5]=((((-1.0)*x850))+((r20*x846))+((x836*x837))+((r21*x841))+(((-1.0)*x848))+(((-1.0)*x838*x842))+(((-1.0)*x836*x840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x852=((1.0)*r11);
CheckValue<IkReal> x853=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*cj5*r20*sj4)))),-1);
if(!x853.valid){
continue;
}
CheckValue<IkReal> x854 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj5))+(((-1.0)*cj5*x852)))),IkReal((((cj4*cj5*r10))+((r12*sj4))+(((-1.0)*cj4*sj5*x852)))),IKFAST_ATAN2_MAGTHRESH);
if(!x854.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x853.value)))+(x854.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x855=IKsin(j3);
IkReal x856=IKcos(j3);
IkReal x857=(r02*sj4);
IkReal x858=(cj4*cj5);
IkReal x859=(cj4*sj5);
IkReal x860=(cj5*r01);
IkReal x861=(r00*sj5);
IkReal x862=((1.0)*x856);
IkReal x863=((1.0)*x855);
evalcond[0]=(((r01*x856*x859))+(((-1.0)*r00*x858*x862))+((x855*x860))+((x855*x861))+(((-1.0)*x857*x862)));
evalcond[1]=((((-1.0)*r20*sj5*x862))+((r21*x855*x859))+(((-1.0)*cj5*r21*x862))+(((-1.0)*r22*sj4*x863))+(((-1.0)*r20*x858*x863)));
evalcond[2]=((((-1.0)*cj5*r11*x862))+(((-1.0)*r12*sj4*x863))+((r11*x855*x859))+(((-1.0)*r10*sj5*x862))+(((-1.0)*r10*x858*x863)));
evalcond[3]=((-1.0)+(((-1.0)*x861*x862))+(((-1.0)*x860*x862))+(((-1.0)*r00*x858*x863))+((r01*x855*x859))+(((-1.0)*x857*x863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x864=((4.82499999988767e-6)*sj4);
IkReal x865=(cj5*r20);
IkReal x866=(r11*sj5);
IkReal x867=(r21*sj5);
IkReal x868=(cj5*r10);
IkReal x869=((0.999999999976719)*sj4);
IkReal x870=((4.82499999988767e-6)*cj4);
IkReal x871=((0.999999999976719)*cj4);
if( IKabs(((((-1.0)*x865*x869))+((x867*x869))+((r12*x870))+(((-2.47499999994238e-6)*x867))+((r22*x871))+(((-1.0)*x864*x868))+(((-1.20624999997192e-5)*py))+(((1.1941874999722e-11)*x868))+(((-1.1941874999722e-11)*x866))+(((2.47499999994238e-6)*x865))+((x864*x866))+(((-2.4999999999418)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x871))+((x868*x869))+(((2.4999999999418)*py))+(((-1.0)*x866*x869))+(((-2.47499999994238e-6)*x868))+((r22*x870))+(((-1.0)*x864*x865))+(((-1.20624999997192e-5)*pz))+(((1.1941874999722e-11)*x865))+(((-1.1941874999722e-11)*x867))+(((2.47499999994238e-6)*x866))+((x864*x867)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x865*x869))+((x867*x869))+((r12*x870))+(((-2.47499999994238e-6)*x867))+((r22*x871))+(((-1.0)*x864*x868))+(((-1.20624999997192e-5)*py))+(((1.1941874999722e-11)*x868))+(((-1.1941874999722e-11)*x866))+(((2.47499999994238e-6)*x865))+((x864*x866))+(((-2.4999999999418)*pz))))+IKsqr(((((-1.0)*r12*x871))+((x868*x869))+(((2.4999999999418)*py))+(((-1.0)*x866*x869))+(((-2.47499999994238e-6)*x868))+((r22*x870))+(((-1.0)*x864*x865))+(((-1.20624999997192e-5)*pz))+(((1.1941874999722e-11)*x865))+(((-1.1941874999722e-11)*x867))+(((2.47499999994238e-6)*x866))+((x864*x867))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*x865*x869))+((x867*x869))+((r12*x870))+(((-2.47499999994238e-6)*x867))+((r22*x871))+(((-1.0)*x864*x868))+(((-1.20624999997192e-5)*py))+(((1.1941874999722e-11)*x868))+(((-1.1941874999722e-11)*x866))+(((2.47499999994238e-6)*x865))+((x864*x866))+(((-2.4999999999418)*pz))), ((((-1.0)*r12*x871))+((x868*x869))+(((2.4999999999418)*py))+(((-1.0)*x866*x869))+(((-2.47499999994238e-6)*x868))+((r22*x870))+(((-1.0)*x864*x865))+(((-1.20624999997192e-5)*pz))+(((1.1941874999722e-11)*x865))+(((-1.1941874999722e-11)*x867))+(((2.47499999994238e-6)*x866))+((x864*x867))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x872=IKcos(j1);
IkReal x873=IKsin(j1);
IkReal x874=((0.4)*sj4);
IkReal x875=(r21*sj5);
IkReal x876=(cj5*r10);
IkReal x877=((0.4)*cj4);
IkReal x878=(cj5*r20);
IkReal x879=((0.4)*sj3);
IkReal x880=(r11*sj5);
IkReal x881=((1.93e-6)*x873);
IkReal x882=((9.9e-7)*x880);
IkReal x883=((0.4)*x872);
IkReal x884=((9.9e-7)*x876);
IkReal x885=((1.93e-6)*x872);
IkReal x886=((0.4)*x873);
IkReal x887=((9.9e-7)*x875);
IkReal x888=((9.9e-7)*x878);
IkReal x889=(x884+x883);
IkReal x890=(py+x881+x882);
IkReal x891=(x885+x887+x886);
evalcond[0]=((((-1.0)*r12*x877))+((x874*x876))+(((-1.0)*x889))+x890+(((-1.0)*x874*x880)));
evalcond[1]=(((x874*x875))+(((-1.0)*x891))+((r22*x877))+(((-1.0)*pz))+(((-1.0)*x874*x878))+x888);
evalcond[2]=((((-1.0)*r20*sj5*x879))+(((-1.0)*cj3*x875*x877))+(((-1.0)*x889))+(((-1.0)*cj5*r21*x879))+((cj3*r22*x874))+x890+((cj3*x877*x878)));
evalcond[3]=((((-1.0)*cj3*x876*x877))+(((-1.0)*cj3*r12*x874))+((cj5*r11*x879))+((r10*sj5*x879))+(((-1.0)*x888))+((cj3*x877*x880))+pz+x891);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x892=(cj4*r12);
IkReal x893=(cj4*r22);
IkReal x894=(cj1*sj4);
IkReal x895=(r11*sj5);
IkReal x896=(r21*sj5);
IkReal x897=((1.0)*sj1);
IkReal x898=(sj1*sj4);
IkReal x899=(cj5*r20);
IkReal x900=((1.0)*cj5*r10);
if( IKabs((((x898*x899))+((x894*x895))+(((-1.0)*x894*x900))+(((-1.0)*x893*x897))+((cj1*x892))+(((-1.0)*sj4*x896*x897)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x892))+((x894*x896))+((x895*x898))+(((-1.0)*cj5*r10*sj4*x897))+(((-1.0)*x894*x899))+((cj1*x893)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x898*x899))+((x894*x895))+(((-1.0)*x894*x900))+(((-1.0)*x893*x897))+((cj1*x892))+(((-1.0)*sj4*x896*x897))))+IKsqr((((sj1*x892))+((x894*x896))+((x895*x898))+(((-1.0)*cj5*r10*sj4*x897))+(((-1.0)*x894*x899))+((cj1*x893))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x898*x899))+((x894*x895))+(((-1.0)*x894*x900))+(((-1.0)*x893*x897))+((cj1*x892))+(((-1.0)*sj4*x896*x897))), (((sj1*x892))+((x894*x896))+((x895*x898))+(((-1.0)*cj5*r10*sj4*x897))+(((-1.0)*x894*x899))+((cj1*x893))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x901=IKcos(j2);
IkReal x902=IKsin(j2);
IkReal x903=(cj3*cj4);
IkReal x904=(r21*sj5);
IkReal x905=((1.0)*r22);
IkReal x906=(cj5*r10);
IkReal x907=(cj5*r20);
IkReal x908=(cj5*sj3);
IkReal x909=(cj3*sj4);
IkReal x910=(r11*sj5);
IkReal x911=((1.0)*sj4);
IkReal x912=((1.0)*r12);
IkReal x913=(sj3*sj5);
IkReal x914=(cj1*x901);
IkReal x915=(cj1*x902);
IkReal x916=(sj1*x902);
IkReal x917=(sj1*x901);
IkReal x918=((1.0)*x916);
evalcond[0]=((((-1.0)*x910*x911))+(((-1.0)*cj4*x912))+((sj4*x906))+x917+x915);
evalcond[1]=((((-1.0)*x918))+(((-1.0)*cj4*x905))+((sj4*x907))+(((-1.0)*x904*x911))+x914);
evalcond[2]=((((-1.93e-6)*cj1))+(((-0.4)*x916))+(((9.9e-7)*x907))+(((-1.0)*pz))+(((-9.9e-7)*x904))+(((0.4)*x914))+(((-0.4)*sj1)));
evalcond[3]=((((0.4)*cj1))+(((9.9e-7)*x906))+(((-1.0)*py))+(((-1.93e-6)*sj1))+(((0.4)*x915))+(((0.4)*x917))+(((-9.9e-7)*x910)));
evalcond[4]=(((r11*x908))+((x903*x910))+(((-1.0)*x918))+((r10*x913))+(((-1.0)*x903*x906))+x914+(((-1.0)*x909*x912)));
evalcond[5]=(((r21*x908))+((x903*x904))+((r20*x913))+(((-1.0)*x917))+(((-1.0)*x915))+(((-1.0)*x903*x907))+(((-1.0)*x905*x909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x919=((1.0)*cj5);
IkReal x920=((1.0)*sj5);
IkReal x921=((((-1.0)*r10*sj4*x919))+((r11*sj4*sj5))+((cj4*r12)));
j3eval[0]=x921;
j3eval[1]=((IKabs((((r22*sj4))+((cj4*cj5*r20))+(((-1.0)*cj4*r21*x920)))))+(IKabs(((((-1.0)*r20*x920))+(((-1.0)*r21*x919))))));
j3eval[2]=IKsign(x921);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x922=((1.0)*r11);
IkReal x923=((1.0)*sj5);
IkReal x924=((((-1.0)*r21*sj4*x923))+((cj5*r20*sj4))+(((-1.0)*cj4*r22)));
j3eval[0]=x924;
j3eval[1]=((IKabs(((((-1.0)*cj4*sj5*x922))+((cj4*cj5*r10))+((r12*sj4)))))+(IKabs(((((-1.0)*r10*x923))+(((-1.0)*cj5*x922))))));
j3eval[2]=IKsign(x924);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x925=cj4*cj4;
IkReal x926=cj5*cj5;
IkReal x927=r01*r01;
IkReal x928=r02*r02;
IkReal x929=r00*r00;
IkReal x930=(cj5*r00);
IkReal x931=(r01*sj5);
IkReal x932=(r02*sj4);
IkReal x933=((2.0)*cj4);
IkReal x934=((1.0)*x925);
IkReal x935=(x926*x929);
IkReal x936=(x926*x927);
IkReal x937=((((-2.0)*x930*x931))+(((-1.0)*x927*x934))+(((-1.0)*x934*x935))+(((-1.0)*x929))+(((-1.0)*x928))+(((-1.0)*x936))+((x931*x932*x933))+((x925*x936))+(((-1.0)*x930*x932*x933))+((x925*x928))+x935+(((2.0)*x925*x930*x931)));
j3eval[0]=x937;
j3eval[1]=IKsign(x937);
j3eval[2]=((IKabs(((((-1.0)*cj4*x930))+(((-1.0)*x932))+((cj4*x931)))))+(IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x938=cj4*cj4;
IkReal x939=cj5*cj5;
IkReal x940=r01*r01;
IkReal x941=r02*r02;
IkReal x942=r00*r00;
IkReal x943=((1.0)*cj5);
IkReal x944=(cj4*r00);
IkReal x945=(r02*sj4);
IkReal x946=((2.0)*cj5);
IkReal x947=(r00*sj5);
IkReal x948=((1.0)*x939);
IkReal x949=(cj4*r01*sj5);
IkReal x950=(x938*x940);
CheckValue<IkReal> x951=IKPowWithIntegerCheck(IKsign((((x938*x941))+(((-1.0)*x950))+((x939*x942))+(((-1.0)*x944*x945*x946))+(((-1.0)*x941))+(((-1.0)*x942))+(((-1.0)*r01*x946*x947))+(((-1.0)*x938*x942*x948))+(((2.0)*x945*x949))+((x939*x950))+((r01*x938*x946*x947))+(((-1.0)*x940*x948)))),-1);
if(!x951.valid){
continue;
}
CheckValue<IkReal> x952 = IKatan2WithCheck(IkReal(((((-1.0)*x945))+(((-1.0)*x943*x944))+x949)),IkReal(((((-1.0)*r01*x943))+(((-1.0)*x947)))),IKFAST_ATAN2_MAGTHRESH);
if(!x952.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x951.value)))+(x952.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x953=IKsin(j3);
IkReal x954=IKcos(j3);
IkReal x955=(r02*sj4);
IkReal x956=(cj4*cj5);
IkReal x957=(cj4*sj5);
IkReal x958=(cj5*r01);
IkReal x959=(r00*sj5);
IkReal x960=((1.0)*x954);
IkReal x961=((1.0)*x953);
evalcond[0]=(((r01*x954*x957))+(((-1.0)*r00*x956*x960))+(((-1.0)*x955*x960))+((x953*x958))+((x953*x959)));
evalcond[1]=(((r21*x953*x957))+(((-1.0)*r22*sj4*x961))+(((-1.0)*r20*sj5*x960))+(((-1.0)*r20*x956*x961))+(((-1.0)*cj5*r21*x960)));
evalcond[2]=((((-1.0)*r12*sj4*x961))+(((-1.0)*r10*x956*x961))+(((-1.0)*cj5*r11*x960))+(((-1.0)*r10*sj5*x960))+((r11*x953*x957)));
evalcond[3]=((1.0)+((r01*x953*x957))+(((-1.0)*x958*x960))+(((-1.0)*x959*x960))+(((-1.0)*r00*x956*x961))+(((-1.0)*x955*x961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x962=((4.82499999988767e-6)*sj4);
IkReal x963=(cj5*r20);
IkReal x964=(r11*sj5);
IkReal x965=(r21*sj5);
IkReal x966=(cj5*r10);
IkReal x967=((0.999999999976719)*sj4);
IkReal x968=((4.82499999988767e-6)*cj4);
IkReal x969=((0.999999999976719)*cj4);
if( IKabs(((((-2.47499999994238e-6)*x965))+(((2.47499999994238e-6)*x963))+(((-1.0)*x962*x964))+(((-1.0)*x963*x967))+(((-1.1941874999722e-11)*x966))+((x962*x966))+(((1.20624999997192e-5)*py))+(((1.1941874999722e-11)*x964))+((x965*x967))+(((-1.0)*r12*x968))+(((-2.4999999999418)*pz))+((r22*x969)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.47499999994238e-6)*x964))+(((2.47499999994238e-6)*x966))+(((-1.0)*x962*x963))+(((-1.1941874999722e-11)*x965))+((x962*x965))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x966*x967))+(((1.1941874999722e-11)*x963))+((x964*x967))+((r12*x969))+(((-2.4999999999418)*py))+((r22*x968)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.47499999994238e-6)*x965))+(((2.47499999994238e-6)*x963))+(((-1.0)*x962*x964))+(((-1.0)*x963*x967))+(((-1.1941874999722e-11)*x966))+((x962*x966))+(((1.20624999997192e-5)*py))+(((1.1941874999722e-11)*x964))+((x965*x967))+(((-1.0)*r12*x968))+(((-2.4999999999418)*pz))+((r22*x969))))+IKsqr(((((-2.47499999994238e-6)*x964))+(((2.47499999994238e-6)*x966))+(((-1.0)*x962*x963))+(((-1.1941874999722e-11)*x965))+((x962*x965))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x966*x967))+(((1.1941874999722e-11)*x963))+((x964*x967))+((r12*x969))+(((-2.4999999999418)*py))+((r22*x968))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-2.47499999994238e-6)*x965))+(((2.47499999994238e-6)*x963))+(((-1.0)*x962*x964))+(((-1.0)*x963*x967))+(((-1.1941874999722e-11)*x966))+((x962*x966))+(((1.20624999997192e-5)*py))+(((1.1941874999722e-11)*x964))+((x965*x967))+(((-1.0)*r12*x968))+(((-2.4999999999418)*pz))+((r22*x969))), ((((-2.47499999994238e-6)*x964))+(((2.47499999994238e-6)*x966))+(((-1.0)*x962*x963))+(((-1.1941874999722e-11)*x965))+((x962*x965))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x966*x967))+(((1.1941874999722e-11)*x963))+((x964*x967))+((r12*x969))+(((-2.4999999999418)*py))+((r22*x968))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x970=IKcos(j1);
IkReal x971=IKsin(j1);
IkReal x972=((1.0)*pz);
IkReal x973=((0.4)*sj4);
IkReal x974=(r21*sj5);
IkReal x975=(cj5*r10);
IkReal x976=((0.4)*cj4);
IkReal x977=(cj5*r20);
IkReal x978=((0.4)*sj3);
IkReal x979=(r11*sj5);
IkReal x980=((0.4)*x970);
IkReal x981=((9.9e-7)*x979);
IkReal x982=((9.9e-7)*x975);
IkReal x983=((1.93e-6)*x971);
IkReal x984=((9.9e-7)*x977);
IkReal x985=((1.93e-6)*x970);
IkReal x986=((0.4)*x971);
IkReal x987=((9.9e-7)*x974);
IkReal x988=(x982+x983);
IkReal x989=(x980+x981);
IkReal x990=(x985+x986+x987+x972);
evalcond[0]=((((-1.0)*x989))+((x973*x979))+(((-1.0)*py))+((r12*x976))+x988+(((-1.0)*x973*x975)));
evalcond[1]=(((r22*x976))+((x973*x974))+(((-1.0)*x990))+x984+(((-1.0)*x973*x977)));
evalcond[2]=((((-1.0)*x988))+(((-1.0)*cj3*x976*x977))+(((-1.0)*cj3*r22*x973))+((cj5*r21*x978))+((r20*sj5*x978))+py+x989+((cj3*x974*x976)));
evalcond[3]=(((r10*sj5*x978))+((cj5*r11*x978))+(((-1.0)*cj3*x975*x976))+(((-1.0)*x990))+((cj3*x976*x979))+(((-1.0)*cj3*r12*x973))+x984);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x991=((1.0)*cj1);
IkReal x992=(sj4*sj5);
IkReal x993=(cj5*sj4);
IkReal x994=((1.0)*sj1);
IkReal x995=(sj1*x993);
IkReal x996=(cj4*x994);
if( IKabs(((((-1.0)*r22*x996))+(((-1.0)*r11*x991*x992))+(((-1.0)*cj4*r12*x991))+((r20*x995))+((cj1*r10*x993))+(((-1.0)*r21*x992*x994)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+(((-1.0)*r11*x992*x994))+(((-1.0)*r20*x991*x993))+(((-1.0)*r12*x996))+((cj1*r21*x992))+((r10*x995)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x996))+(((-1.0)*r11*x991*x992))+(((-1.0)*cj4*r12*x991))+((r20*x995))+((cj1*r10*x993))+(((-1.0)*r21*x992*x994))))+IKsqr((((cj1*cj4*r22))+(((-1.0)*r11*x992*x994))+(((-1.0)*r20*x991*x993))+(((-1.0)*r12*x996))+((cj1*r21*x992))+((r10*x995))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x996))+(((-1.0)*r11*x991*x992))+(((-1.0)*cj4*r12*x991))+((r20*x995))+((cj1*r10*x993))+(((-1.0)*r21*x992*x994))), (((cj1*cj4*r22))+(((-1.0)*r11*x992*x994))+(((-1.0)*r20*x991*x993))+(((-1.0)*r12*x996))+((cj1*r21*x992))+((r10*x995))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x997=IKcos(j2);
IkReal x998=IKsin(j2);
IkReal x999=(cj3*cj4);
IkReal x1000=(r21*sj5);
IkReal x1001=((1.0)*r22);
IkReal x1002=(cj5*r10);
IkReal x1003=(cj5*r20);
IkReal x1004=(cj5*sj3);
IkReal x1005=((1.0)*sj1);
IkReal x1006=(cj3*sj4);
IkReal x1007=(sj3*sj5);
IkReal x1008=(r11*sj5);
IkReal x1009=((1.0)*sj4);
IkReal x1010=((1.0)*r12);
IkReal x1011=((0.4)*sj1);
IkReal x1012=(cj1*x997);
IkReal x1013=((0.4)*x998);
IkReal x1014=(x1005*x997);
IkReal x1015=((1.0)*cj1*x998);
IkReal x1016=(x1014+x1015);
evalcond[0]=(((sj4*x1003))+x1012+(((-1.0)*cj4*x1001))+(((-1.0)*x1005*x998))+(((-1.0)*x1000*x1009)));
evalcond[1]=(((sj4*x1002))+(((-1.0)*x1016))+(((-1.0)*x1008*x1009))+(((-1.0)*cj4*x1010)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x1000))+(((0.4)*x1012))+(((-1.0)*x1011))+(((-1.0)*x1011*x998))+(((-1.0)*pz))+(((9.9e-7)*x1003)));
evalcond[3]=((((-9.9e-7)*x1008))+(((1.93e-6)*sj1))+(((-1.0)*x1011*x997))+(((-1.0)*py))+(((-1.0)*cj1*x1013))+(((9.9e-7)*x1002))+(((-0.4)*cj1)));
evalcond[4]=((((-1.0)*x1006*x1010))+(((-1.0)*x1002*x999))+((r11*x1004))+((x1008*x999))+((sj1*x998))+(((-1.0)*x1012))+((r10*x1007)));
evalcond[5]=(((x1000*x999))+(((-1.0)*x1016))+((r21*x1004))+(((-1.0)*x1003*x999))+((r20*x1007))+(((-1.0)*x1001*x1006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1017=((1.0)*r11);
IkReal x1018=((1.0)*sj5);
CheckValue<IkReal> x1019=IKPowWithIntegerCheck(IKsign((((cj5*r20*sj4))+(((-1.0)*cj4*r22))+(((-1.0)*r21*sj4*x1018)))),-1);
if(!x1019.valid){
continue;
}
CheckValue<IkReal> x1020 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x1017))+(((-1.0)*r10*x1018)))),IkReal(((((-1.0)*cj4*sj5*x1017))+((cj4*cj5*r10))+((r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1020.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1019.value)))+(x1020.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1021=IKsin(j3);
IkReal x1022=IKcos(j3);
IkReal x1023=(r02*sj4);
IkReal x1024=(cj4*cj5);
IkReal x1025=(cj4*sj5);
IkReal x1026=(cj5*r01);
IkReal x1027=(r00*sj5);
IkReal x1028=((1.0)*x1022);
IkReal x1029=((1.0)*x1021);
evalcond[0]=((((-1.0)*x1023*x1028))+(((-1.0)*r00*x1024*x1028))+((x1021*x1027))+((x1021*x1026))+((r01*x1022*x1025)));
evalcond[1]=((((-1.0)*r20*x1024*x1029))+(((-1.0)*cj5*r21*x1028))+(((-1.0)*r22*sj4*x1029))+(((-1.0)*r20*sj5*x1028))+((r21*x1021*x1025)));
evalcond[2]=((((-1.0)*cj5*r11*x1028))+(((-1.0)*r10*sj5*x1028))+((r11*x1021*x1025))+(((-1.0)*r12*sj4*x1029))+(((-1.0)*r10*x1024*x1029)));
evalcond[3]=((1.0)+(((-1.0)*x1023*x1029))+(((-1.0)*x1026*x1028))+(((-1.0)*r00*x1024*x1029))+((r01*x1021*x1025))+(((-1.0)*x1027*x1028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1030=((4.82499999988767e-6)*sj4);
IkReal x1031=(cj5*r20);
IkReal x1032=(r11*sj5);
IkReal x1033=(r21*sj5);
IkReal x1034=(cj5*r10);
IkReal x1035=((0.999999999976719)*sj4);
IkReal x1036=((4.82499999988767e-6)*cj4);
IkReal x1037=((0.999999999976719)*cj4);
if( IKabs((((r22*x1037))+((x1030*x1034))+(((1.20624999997192e-5)*py))+(((1.1941874999722e-11)*x1032))+(((-1.0)*x1031*x1035))+(((-1.0)*r12*x1036))+(((-1.0)*x1030*x1032))+(((-2.47499999994238e-6)*x1033))+((x1033*x1035))+(((-1.1941874999722e-11)*x1034))+(((-2.4999999999418)*pz))+(((2.47499999994238e-6)*x1031)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1036))+((x1030*x1033))+(((-1.0)*x1034*x1035))+(((-1.20624999997192e-5)*pz))+(((1.1941874999722e-11)*x1031))+(((-1.0)*x1030*x1031))+(((-2.47499999994238e-6)*x1032))+((r12*x1037))+(((-1.1941874999722e-11)*x1033))+(((-2.4999999999418)*py))+((x1032*x1035))+(((2.47499999994238e-6)*x1034)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x1037))+((x1030*x1034))+(((1.20624999997192e-5)*py))+(((1.1941874999722e-11)*x1032))+(((-1.0)*x1031*x1035))+(((-1.0)*r12*x1036))+(((-1.0)*x1030*x1032))+(((-2.47499999994238e-6)*x1033))+((x1033*x1035))+(((-1.1941874999722e-11)*x1034))+(((-2.4999999999418)*pz))+(((2.47499999994238e-6)*x1031))))+IKsqr((((r22*x1036))+((x1030*x1033))+(((-1.0)*x1034*x1035))+(((-1.20624999997192e-5)*pz))+(((1.1941874999722e-11)*x1031))+(((-1.0)*x1030*x1031))+(((-2.47499999994238e-6)*x1032))+((r12*x1037))+(((-1.1941874999722e-11)*x1033))+(((-2.4999999999418)*py))+((x1032*x1035))+(((2.47499999994238e-6)*x1034))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r22*x1037))+((x1030*x1034))+(((1.20624999997192e-5)*py))+(((1.1941874999722e-11)*x1032))+(((-1.0)*x1031*x1035))+(((-1.0)*r12*x1036))+(((-1.0)*x1030*x1032))+(((-2.47499999994238e-6)*x1033))+((x1033*x1035))+(((-1.1941874999722e-11)*x1034))+(((-2.4999999999418)*pz))+(((2.47499999994238e-6)*x1031))), (((r22*x1036))+((x1030*x1033))+(((-1.0)*x1034*x1035))+(((-1.20624999997192e-5)*pz))+(((1.1941874999722e-11)*x1031))+(((-1.0)*x1030*x1031))+(((-2.47499999994238e-6)*x1032))+((r12*x1037))+(((-1.1941874999722e-11)*x1033))+(((-2.4999999999418)*py))+((x1032*x1035))+(((2.47499999994238e-6)*x1034))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1038=IKcos(j1);
IkReal x1039=IKsin(j1);
IkReal x1040=((1.0)*pz);
IkReal x1041=((0.4)*sj4);
IkReal x1042=(r21*sj5);
IkReal x1043=(cj5*r10);
IkReal x1044=((0.4)*cj4);
IkReal x1045=(cj5*r20);
IkReal x1046=((0.4)*sj3);
IkReal x1047=(r11*sj5);
IkReal x1048=((0.4)*x1038);
IkReal x1049=((9.9e-7)*x1047);
IkReal x1050=((9.9e-7)*x1043);
IkReal x1051=((1.93e-6)*x1039);
IkReal x1052=((9.9e-7)*x1045);
IkReal x1053=((1.93e-6)*x1038);
IkReal x1054=((0.4)*x1039);
IkReal x1055=((9.9e-7)*x1042);
IkReal x1056=(x1050+x1051);
IkReal x1057=(x1049+x1048);
IkReal x1058=(x1053+x1054+x1055+x1040);
evalcond[0]=((((-1.0)*x1057))+x1056+((x1041*x1047))+(((-1.0)*x1041*x1043))+(((-1.0)*py))+((r12*x1044)));
evalcond[1]=((((-1.0)*x1058))+x1052+((x1041*x1042))+(((-1.0)*x1041*x1045))+((r22*x1044)));
evalcond[2]=((((-1.0)*x1056))+(((-1.0)*cj3*x1044*x1045))+x1057+((cj3*x1042*x1044))+((cj5*r21*x1046))+py+(((-1.0)*cj3*r22*x1041))+((r20*sj5*x1046)));
evalcond[3]=((((-1.0)*cj3*x1043*x1044))+(((-1.0)*x1058))+x1052+((cj5*r11*x1046))+(((-1.0)*cj3*r12*x1041))+((r10*sj5*x1046))+((cj3*x1044*x1047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1059=((1.0)*cj1);
IkReal x1060=(sj4*sj5);
IkReal x1061=(cj5*sj4);
IkReal x1062=((1.0)*sj1);
IkReal x1063=(sj1*x1061);
IkReal x1064=(cj4*x1062);
if( IKabs(((((-1.0)*r22*x1064))+(((-1.0)*cj4*r12*x1059))+((r20*x1063))+((cj1*r10*x1061))+(((-1.0)*r11*x1059*x1060))+(((-1.0)*r21*x1060*x1062)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+(((-1.0)*r20*x1059*x1061))+((cj1*r21*x1060))+(((-1.0)*r11*x1060*x1062))+(((-1.0)*r12*x1064))+((r10*x1063)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x1064))+(((-1.0)*cj4*r12*x1059))+((r20*x1063))+((cj1*r10*x1061))+(((-1.0)*r11*x1059*x1060))+(((-1.0)*r21*x1060*x1062))))+IKsqr((((cj1*cj4*r22))+(((-1.0)*r20*x1059*x1061))+((cj1*r21*x1060))+(((-1.0)*r11*x1060*x1062))+(((-1.0)*r12*x1064))+((r10*x1063))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x1064))+(((-1.0)*cj4*r12*x1059))+((r20*x1063))+((cj1*r10*x1061))+(((-1.0)*r11*x1059*x1060))+(((-1.0)*r21*x1060*x1062))), (((cj1*cj4*r22))+(((-1.0)*r20*x1059*x1061))+((cj1*r21*x1060))+(((-1.0)*r11*x1060*x1062))+(((-1.0)*r12*x1064))+((r10*x1063))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1065=IKcos(j2);
IkReal x1066=IKsin(j2);
IkReal x1067=(cj3*cj4);
IkReal x1068=(r21*sj5);
IkReal x1069=((1.0)*r22);
IkReal x1070=(cj5*r10);
IkReal x1071=(cj5*r20);
IkReal x1072=(cj5*sj3);
IkReal x1073=((1.0)*sj1);
IkReal x1074=(cj3*sj4);
IkReal x1075=(sj3*sj5);
IkReal x1076=(r11*sj5);
IkReal x1077=((1.0)*sj4);
IkReal x1078=((1.0)*r12);
IkReal x1079=((0.4)*sj1);
IkReal x1080=(cj1*x1065);
IkReal x1081=((0.4)*x1066);
IkReal x1082=(x1065*x1073);
IkReal x1083=((1.0)*cj1*x1066);
IkReal x1084=(x1083+x1082);
evalcond[0]=(x1080+(((-1.0)*cj4*x1069))+(((-1.0)*x1068*x1077))+((sj4*x1071))+(((-1.0)*x1066*x1073)));
evalcond[1]=((((-1.0)*x1076*x1077))+(((-1.0)*cj4*x1078))+((sj4*x1070))+(((-1.0)*x1084)));
evalcond[2]=((((-1.93e-6)*cj1))+(((9.9e-7)*x1071))+(((-1.0)*pz))+(((-9.9e-7)*x1068))+(((-1.0)*x1066*x1079))+(((0.4)*x1080))+(((-1.0)*x1079)));
evalcond[3]=((((9.9e-7)*x1070))+(((1.93e-6)*sj1))+(((-1.0)*py))+(((-1.0)*cj1*x1081))+(((-1.0)*x1065*x1079))+(((-9.9e-7)*x1076))+(((-0.4)*cj1)));
evalcond[4]=((((-1.0)*x1074*x1078))+(((-1.0)*x1067*x1070))+((x1067*x1076))+(((-1.0)*x1080))+((r10*x1075))+((sj1*x1066))+((r11*x1072)));
evalcond[5]=((((-1.0)*x1067*x1071))+((x1067*x1068))+((r20*x1075))+((r21*x1072))+(((-1.0)*x1084))+(((-1.0)*x1069*x1074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1085=((1.0)*r21);
CheckValue<IkReal> x1086=IKPowWithIntegerCheck(IKsign((((r11*sj4*sj5))+((cj4*r12))+(((-1.0)*cj5*r10*sj4)))),-1);
if(!x1086.valid){
continue;
}
CheckValue<IkReal> x1087 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x1085))+(((-1.0)*r20*sj5)))),IkReal((((r22*sj4))+(((-1.0)*cj4*sj5*x1085))+((cj4*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1087.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1086.value)))+(x1087.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1088=IKsin(j3);
IkReal x1089=IKcos(j3);
IkReal x1090=(r02*sj4);
IkReal x1091=(cj4*cj5);
IkReal x1092=(cj4*sj5);
IkReal x1093=(cj5*r01);
IkReal x1094=(r00*sj5);
IkReal x1095=((1.0)*x1089);
IkReal x1096=((1.0)*x1088);
evalcond[0]=((((-1.0)*x1090*x1095))+((x1088*x1094))+((x1088*x1093))+((r01*x1089*x1092))+(((-1.0)*r00*x1091*x1095)));
evalcond[1]=((((-1.0)*r20*sj5*x1095))+(((-1.0)*cj5*r21*x1095))+(((-1.0)*r22*sj4*x1096))+(((-1.0)*r20*x1091*x1096))+((r21*x1088*x1092)));
evalcond[2]=((((-1.0)*r12*sj4*x1096))+(((-1.0)*r10*x1091*x1096))+((r11*x1088*x1092))+(((-1.0)*r10*sj5*x1095))+(((-1.0)*cj5*r11*x1095)));
evalcond[3]=((1.0)+(((-1.0)*x1090*x1096))+(((-1.0)*x1094*x1095))+(((-1.0)*x1093*x1095))+(((-1.0)*r00*x1091*x1096))+((r01*x1088*x1092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1097=((4.82499999988767e-6)*sj4);
IkReal x1098=(cj5*r20);
IkReal x1099=(r11*sj5);
IkReal x1100=(r21*sj5);
IkReal x1101=(cj5*r10);
IkReal x1102=((0.999999999976719)*sj4);
IkReal x1103=((4.82499999988767e-6)*cj4);
IkReal x1104=((0.999999999976719)*cj4);
if( IKabs(((((-1.0)*r12*x1103))+(((-1.0)*x1098*x1102))+(((-2.47499999994238e-6)*x1100))+((x1097*x1101))+(((-1.1941874999722e-11)*x1101))+(((1.1941874999722e-11)*x1099))+(((-1.0)*x1097*x1099))+(((1.20624999997192e-5)*py))+(((2.47499999994238e-6)*x1098))+((r22*x1104))+((x1100*x1102))+(((-2.4999999999418)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1097*x1100))+(((-1.1941874999722e-11)*x1100))+(((1.1941874999722e-11)*x1098))+(((-1.0)*x1097*x1098))+(((-1.20624999997192e-5)*pz))+((x1099*x1102))+((r22*x1103))+((r12*x1104))+(((-2.4999999999418)*py))+(((2.47499999994238e-6)*x1101))+(((-2.47499999994238e-6)*x1099))+(((-1.0)*x1101*x1102)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x1103))+(((-1.0)*x1098*x1102))+(((-2.47499999994238e-6)*x1100))+((x1097*x1101))+(((-1.1941874999722e-11)*x1101))+(((1.1941874999722e-11)*x1099))+(((-1.0)*x1097*x1099))+(((1.20624999997192e-5)*py))+(((2.47499999994238e-6)*x1098))+((r22*x1104))+((x1100*x1102))+(((-2.4999999999418)*pz))))+IKsqr((((x1097*x1100))+(((-1.1941874999722e-11)*x1100))+(((1.1941874999722e-11)*x1098))+(((-1.0)*x1097*x1098))+(((-1.20624999997192e-5)*pz))+((x1099*x1102))+((r22*x1103))+((r12*x1104))+(((-2.4999999999418)*py))+(((2.47499999994238e-6)*x1101))+(((-2.47499999994238e-6)*x1099))+(((-1.0)*x1101*x1102))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r12*x1103))+(((-1.0)*x1098*x1102))+(((-2.47499999994238e-6)*x1100))+((x1097*x1101))+(((-1.1941874999722e-11)*x1101))+(((1.1941874999722e-11)*x1099))+(((-1.0)*x1097*x1099))+(((1.20624999997192e-5)*py))+(((2.47499999994238e-6)*x1098))+((r22*x1104))+((x1100*x1102))+(((-2.4999999999418)*pz))), (((x1097*x1100))+(((-1.1941874999722e-11)*x1100))+(((1.1941874999722e-11)*x1098))+(((-1.0)*x1097*x1098))+(((-1.20624999997192e-5)*pz))+((x1099*x1102))+((r22*x1103))+((r12*x1104))+(((-2.4999999999418)*py))+(((2.47499999994238e-6)*x1101))+(((-2.47499999994238e-6)*x1099))+(((-1.0)*x1101*x1102))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1105=IKcos(j1);
IkReal x1106=IKsin(j1);
IkReal x1107=((1.0)*pz);
IkReal x1108=((0.4)*sj4);
IkReal x1109=(r21*sj5);
IkReal x1110=(cj5*r10);
IkReal x1111=((0.4)*cj4);
IkReal x1112=(cj5*r20);
IkReal x1113=((0.4)*sj3);
IkReal x1114=(r11*sj5);
IkReal x1115=((0.4)*x1105);
IkReal x1116=((9.9e-7)*x1114);
IkReal x1117=((9.9e-7)*x1110);
IkReal x1118=((1.93e-6)*x1106);
IkReal x1119=((9.9e-7)*x1112);
IkReal x1120=((1.93e-6)*x1105);
IkReal x1121=((0.4)*x1106);
IkReal x1122=((9.9e-7)*x1109);
IkReal x1123=(x1117+x1118);
IkReal x1124=(x1115+x1116);
IkReal x1125=(x1107+x1120+x1121+x1122);
evalcond[0]=(x1123+((x1108*x1114))+(((-1.0)*py))+(((-1.0)*x1108*x1110))+(((-1.0)*x1124))+((r12*x1111)));
evalcond[1]=(((x1108*x1109))+x1119+(((-1.0)*x1108*x1112))+((r22*x1111))+(((-1.0)*x1125)));
evalcond[2]=(x1124+((cj5*r21*x1113))+(((-1.0)*cj3*r22*x1108))+((cj3*x1109*x1111))+py+(((-1.0)*x1123))+((r20*sj5*x1113))+(((-1.0)*cj3*x1111*x1112)));
evalcond[3]=(x1119+((cj5*r11*x1113))+((r10*sj5*x1113))+(((-1.0)*x1125))+(((-1.0)*cj3*x1110*x1111))+((cj3*x1111*x1114))+(((-1.0)*cj3*r12*x1108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1126=((1.0)*cj1);
IkReal x1127=(sj4*sj5);
IkReal x1128=(cj5*sj4);
IkReal x1129=((1.0)*sj1);
IkReal x1130=(sj1*x1128);
IkReal x1131=(cj4*x1129);
if( IKabs(((((-1.0)*cj4*r12*x1126))+(((-1.0)*r11*x1126*x1127))+(((-1.0)*r22*x1131))+((cj1*r10*x1128))+(((-1.0)*r21*x1127*x1129))+((r20*x1130)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+(((-1.0)*r12*x1131))+((r10*x1130))+(((-1.0)*r11*x1127*x1129))+((cj1*r21*x1127))+(((-1.0)*r20*x1126*x1128)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r12*x1126))+(((-1.0)*r11*x1126*x1127))+(((-1.0)*r22*x1131))+((cj1*r10*x1128))+(((-1.0)*r21*x1127*x1129))+((r20*x1130))))+IKsqr((((cj1*cj4*r22))+(((-1.0)*r12*x1131))+((r10*x1130))+(((-1.0)*r11*x1127*x1129))+((cj1*r21*x1127))+(((-1.0)*r20*x1126*x1128))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj4*r12*x1126))+(((-1.0)*r11*x1126*x1127))+(((-1.0)*r22*x1131))+((cj1*r10*x1128))+(((-1.0)*r21*x1127*x1129))+((r20*x1130))), (((cj1*cj4*r22))+(((-1.0)*r12*x1131))+((r10*x1130))+(((-1.0)*r11*x1127*x1129))+((cj1*r21*x1127))+(((-1.0)*r20*x1126*x1128))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1132=IKcos(j2);
IkReal x1133=IKsin(j2);
IkReal x1134=(cj3*cj4);
IkReal x1135=(r21*sj5);
IkReal x1136=((1.0)*r22);
IkReal x1137=(cj5*r10);
IkReal x1138=(cj5*r20);
IkReal x1139=(cj5*sj3);
IkReal x1140=((1.0)*sj1);
IkReal x1141=(cj3*sj4);
IkReal x1142=(sj3*sj5);
IkReal x1143=(r11*sj5);
IkReal x1144=((1.0)*sj4);
IkReal x1145=((1.0)*r12);
IkReal x1146=((0.4)*sj1);
IkReal x1147=(cj1*x1132);
IkReal x1148=((0.4)*x1133);
IkReal x1149=(x1132*x1140);
IkReal x1150=((1.0)*cj1*x1133);
IkReal x1151=(x1149+x1150);
evalcond[0]=((((-1.0)*x1135*x1144))+x1147+(((-1.0)*cj4*x1136))+((sj4*x1138))+(((-1.0)*x1133*x1140)));
evalcond[1]=((((-1.0)*x1143*x1144))+(((-1.0)*x1151))+((sj4*x1137))+(((-1.0)*cj4*x1145)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-1.0)*x1146))+(((-1.0)*pz))+(((-9.9e-7)*x1135))+(((-1.0)*x1133*x1146))+(((9.9e-7)*x1138))+(((0.4)*x1147)));
evalcond[3]=((((-1.0)*cj1*x1148))+(((-1.0)*x1132*x1146))+(((-9.9e-7)*x1143))+(((1.93e-6)*sj1))+(((-1.0)*py))+(((9.9e-7)*x1137))+(((-0.4)*cj1)));
evalcond[4]=(((x1134*x1143))+(((-1.0)*x1141*x1145))+((sj1*x1133))+(((-1.0)*x1134*x1137))+(((-1.0)*x1147))+((r10*x1142))+((r11*x1139)));
evalcond[5]=((((-1.0)*x1136*x1141))+(((-1.0)*x1151))+((x1134*x1135))+(((-1.0)*x1134*x1138))+((r21*x1139))+((r20*x1142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1152=((1.0)*sj0);
IkReal x1153=(cj4*cj5);
IkReal x1154=(cj0*r00);
IkReal x1155=((1.0)*cj5);
IkReal x1156=(cj4*sj5);
IkReal x1157=(cj0*r01);
CheckValue<IkReal> x1158=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*r20*sj4*x1155)))),-1);
if(!x1158.valid){
continue;
}
CheckValue<IkReal> x1159 = IKatan2WithCheck(IkReal(((((-1.0)*x1155*x1157))+(((-1.0)*sj5*x1154))+(((-1.0)*cj5*r11*x1152))+(((-1.0)*r10*sj5*x1152)))),IkReal(((((-1.0)*x1156*x1157))+((r12*sj0*sj4))+((x1153*x1154))+((r10*sj0*x1153))+((cj0*r02*sj4))+(((-1.0)*r11*x1152*x1156)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1159.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1158.value)))+(x1159.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1160=IKsin(j3);
IkReal x1161=IKcos(j3);
IkReal x1162=((1.0)*cj5);
IkReal x1163=(cj4*x1160);
IkReal x1164=((1.0)*sj5*x1161);
IkReal x1165=((1.0)*sj4*x1160);
evalcond[0]=((((-1.0)*r20*x1164))+(((-1.0)*r21*x1161*x1162))+(((-1.0)*r22*x1165))+(((-1.0)*r20*x1162*x1163))+((r21*sj5*x1163)));
evalcond[1]=((((-1.0)*r10*x1164))+cj0+(((-1.0)*r11*x1161*x1162))+(((-1.0)*r12*x1165))+(((-1.0)*r10*x1162*x1163))+((r11*sj5*x1163)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x1165))+(((-1.0)*r01*x1161*x1162))+((r01*sj5*x1163))+(((-1.0)*r00*x1164))+(((-1.0)*r00*x1162*x1163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[2];
IkReal x1166=sj0*sj0;
j1eval[0]=x1166;
j1eval[1]=IKsign(x1166);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1167=cj0*cj0;
j1eval[0]=x1167;
j1eval[1]=IKsign(x1167);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j1eval[0]=sj0;
j1eval[1]=IKsign(sj0);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1168=((4.82499999988767e-6)*sj4);
IkReal x1169=(r01*sj5);
IkReal x1170=((0.999999999976719)*cj4);
IkReal x1171=(cj5*r00);
IkReal x1172=(r21*sj5);
IkReal x1173=(cj5*r20);
IkReal x1174=((0.999999999976719)*sj4);
IkReal x1175=((4.82499999988767e-6)*cj4);
if( IKabs((((r02*x1175))+(((-1.0)*x1173*x1174))+((x1168*x1169))+(((-1.1941874999722e-11)*x1169))+(((-1.0)*x1168*x1171))+(((-2.47499999994238e-6)*x1172))+(((-1.20624999997192e-5)*px))+((x1172*x1174))+(((2.47499999994238e-6)*x1173))+(((1.1941874999722e-11)*x1171))+((r22*x1170))+(((-2.4999999999418)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x1170))+(((-1.0)*x1168*x1173))+((x1168*x1172))+(((2.4999999999418)*px))+(((-2.47499999994238e-6)*x1171))+(((-1.1941874999722e-11)*x1172))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x1169))+(((-1.0)*x1169*x1174))+(((1.1941874999722e-11)*x1173))+((r22*x1175))+((x1171*x1174)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x1175))+(((-1.0)*x1173*x1174))+((x1168*x1169))+(((-1.1941874999722e-11)*x1169))+(((-1.0)*x1168*x1171))+(((-2.47499999994238e-6)*x1172))+(((-1.20624999997192e-5)*px))+((x1172*x1174))+(((2.47499999994238e-6)*x1173))+(((1.1941874999722e-11)*x1171))+((r22*x1170))+(((-2.4999999999418)*pz))))+IKsqr(((((-1.0)*r02*x1170))+(((-1.0)*x1168*x1173))+((x1168*x1172))+(((2.4999999999418)*px))+(((-2.47499999994238e-6)*x1171))+(((-1.1941874999722e-11)*x1172))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x1169))+(((-1.0)*x1169*x1174))+(((1.1941874999722e-11)*x1173))+((r22*x1175))+((x1171*x1174))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r02*x1175))+(((-1.0)*x1173*x1174))+((x1168*x1169))+(((-1.1941874999722e-11)*x1169))+(((-1.0)*x1168*x1171))+(((-2.47499999994238e-6)*x1172))+(((-1.20624999997192e-5)*px))+((x1172*x1174))+(((2.47499999994238e-6)*x1173))+(((1.1941874999722e-11)*x1171))+((r22*x1170))+(((-2.4999999999418)*pz))), ((((-1.0)*r02*x1170))+(((-1.0)*x1168*x1173))+((x1168*x1172))+(((2.4999999999418)*px))+(((-2.47499999994238e-6)*x1171))+(((-1.1941874999722e-11)*x1172))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x1169))+(((-1.0)*x1169*x1174))+(((1.1941874999722e-11)*x1173))+((r22*x1175))+((x1171*x1174))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1176=IKcos(j1);
IkReal x1177=IKsin(j1);
IkReal x1178=((0.4)*sj4);
IkReal x1179=(r21*sj5);
IkReal x1180=((0.4)*cj4);
IkReal x1181=(cj5*r20);
IkReal x1182=(r01*sj5);
IkReal x1183=(cj5*r00);
IkReal x1184=((9.9e-7)*x1182);
IkReal x1185=((1.93e-6)*x1177);
IkReal x1186=((0.4)*x1176);
IkReal x1187=((9.9e-7)*x1183);
IkReal x1188=((1.93e-6)*x1176);
IkReal x1189=((0.4)*x1177);
IkReal x1190=((9.9e-7)*x1179);
IkReal x1191=((9.9e-7)*x1181);
IkReal x1192=((0.4)*sj3*sj5);
IkReal x1193=((0.4)*cj5*sj3);
IkReal x1194=(x1186+x1187);
IkReal x1195=(x1184+x1185+px);
IkReal x1196=(x1188+x1189+x1190);
evalcond[0]=(x1195+((x1178*x1183))+(((-1.0)*x1178*x1182))+(((-1.0)*x1194))+(((-1.0)*r02*x1180)));
evalcond[1]=(x1191+((r22*x1180))+(((-1.0)*x1178*x1181))+(((-1.0)*x1196))+(((-1.0)*pz))+((x1178*x1179)));
evalcond[2]=(x1195+((cj3*x1180*x1181))+(((-1.0)*x1194))+(((-1.0)*cj3*x1179*x1180))+((cj3*r22*x1178))+(((-1.0)*r21*x1193))+(((-1.0)*r20*x1192)));
evalcond[3]=((((-1.0)*cj3*r02*x1178))+x1196+((r01*x1193))+((r00*x1192))+((cj3*x1180*x1182))+(((-1.0)*x1191))+pz+(((-1.0)*cj3*x1180*x1183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1197=(cj4*sj1);
IkReal x1198=(cj1*sj4);
IkReal x1199=((1.0)*cj5);
IkReal x1200=(r21*sj5);
IkReal x1201=(cj1*cj4);
IkReal x1202=(sj1*sj4);
IkReal x1203=(r01*sj4*sj5);
if( IKabs((((r01*sj5*x1198))+(((-1.0)*r00*x1198*x1199))+(((-1.0)*x1200*x1202))+((cj5*r20*x1202))+(((-1.0)*r22*x1197))+((r02*x1201)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x1198*x1199))+((r02*x1197))+((r01*sj5*x1202))+(((-1.0)*r00*x1199*x1202))+((r22*x1201))+((x1198*x1200)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj5*x1198))+(((-1.0)*r00*x1198*x1199))+(((-1.0)*x1200*x1202))+((cj5*r20*x1202))+(((-1.0)*r22*x1197))+((r02*x1201))))+IKsqr(((((-1.0)*r20*x1198*x1199))+((r02*x1197))+((r01*sj5*x1202))+(((-1.0)*r00*x1199*x1202))+((r22*x1201))+((x1198*x1200))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r01*sj5*x1198))+(((-1.0)*r00*x1198*x1199))+(((-1.0)*x1200*x1202))+((cj5*r20*x1202))+(((-1.0)*r22*x1197))+((r02*x1201))), ((((-1.0)*r20*x1198*x1199))+((r02*x1197))+((r01*sj5*x1202))+(((-1.0)*r00*x1199*x1202))+((r22*x1201))+((x1198*x1200))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1204=IKcos(j2);
IkReal x1205=IKsin(j2);
IkReal x1206=((1.0)*cj3);
IkReal x1207=(cj5*r00);
IkReal x1208=((1.0)*cj4);
IkReal x1209=(r01*sj5);
IkReal x1210=((1.0)*sj4);
IkReal x1211=(cj5*sj3);
IkReal x1212=(cj5*r20);
IkReal x1213=(sj3*sj5);
IkReal x1214=(r21*sj5);
IkReal x1215=(cj1*x1204);
IkReal x1216=(cj3*cj4*sj5);
IkReal x1217=(cj1*x1205);
IkReal x1218=(sj1*x1205);
IkReal x1219=(sj1*x1204);
IkReal x1220=((1.0)*x1218);
evalcond[0]=(x1217+x1219+(((-1.0)*x1209*x1210))+((sj4*x1207))+(((-1.0)*r02*x1208)));
evalcond[1]=(x1215+((sj4*x1212))+(((-1.0)*x1220))+(((-1.0)*r22*x1208))+(((-1.0)*x1210*x1214)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x1214))+(((-0.4)*x1218))+(((-1.0)*pz))+(((0.4)*x1215))+(((-0.4)*sj1))+(((9.9e-7)*x1212)));
evalcond[3]=((((-9.9e-7)*x1209))+(((0.4)*cj1))+(((9.9e-7)*x1207))+(((-1.0)*px))+(((-1.93e-6)*sj1))+(((0.4)*x1217))+(((0.4)*x1219)));
evalcond[4]=(x1215+(((-1.0)*x1220))+((r00*x1213))+((r01*x1211))+(((-1.0)*cj4*x1206*x1207))+(((-1.0)*r02*sj4*x1206))+((cj3*cj4*x1209)));
evalcond[5]=(((r20*x1213))+(((-1.0)*r22*sj4*x1206))+((r21*x1211))+((cj3*cj4*x1214))+(((-1.0)*cj4*x1206*x1212))+(((-1.0)*x1217))+(((-1.0)*x1219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1221=((4.82499999988767e-6)*sj4);
IkReal x1222=(r01*sj5);
IkReal x1223=((0.999999999976719)*cj4);
IkReal x1224=(cj5*r00);
IkReal x1225=(r21*sj5);
IkReal x1226=(cj5*r20);
IkReal x1227=((0.999999999976719)*sj4);
IkReal x1228=((4.82499999988767e-6)*cj4);
if( IKabs(((((1.1941874999722e-11)*x1222))+(((-1.0)*x1226*x1227))+((x1225*x1227))+(((-1.0)*x1221*x1222))+(((1.20624999997192e-5)*px))+((r22*x1223))+((x1221*x1224))+(((2.47499999994238e-6)*x1226))+(((-1.1941874999722e-11)*x1224))+(((-2.47499999994238e-6)*x1225))+(((-2.4999999999418)*pz))+(((-1.0)*r02*x1228)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1224*x1227))+(((1.1941874999722e-11)*x1226))+(((-1.0)*x1221*x1226))+((r02*x1223))+(((-1.20624999997192e-5)*pz))+((r22*x1228))+((x1221*x1225))+(((2.47499999994238e-6)*x1224))+((x1222*x1227))+(((-1.1941874999722e-11)*x1225))+(((-2.47499999994238e-6)*x1222))+(((-2.4999999999418)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.1941874999722e-11)*x1222))+(((-1.0)*x1226*x1227))+((x1225*x1227))+(((-1.0)*x1221*x1222))+(((1.20624999997192e-5)*px))+((r22*x1223))+((x1221*x1224))+(((2.47499999994238e-6)*x1226))+(((-1.1941874999722e-11)*x1224))+(((-2.47499999994238e-6)*x1225))+(((-2.4999999999418)*pz))+(((-1.0)*r02*x1228))))+IKsqr(((((-1.0)*x1224*x1227))+(((1.1941874999722e-11)*x1226))+(((-1.0)*x1221*x1226))+((r02*x1223))+(((-1.20624999997192e-5)*pz))+((r22*x1228))+((x1221*x1225))+(((2.47499999994238e-6)*x1224))+((x1222*x1227))+(((-1.1941874999722e-11)*x1225))+(((-2.47499999994238e-6)*x1222))+(((-2.4999999999418)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((1.1941874999722e-11)*x1222))+(((-1.0)*x1226*x1227))+((x1225*x1227))+(((-1.0)*x1221*x1222))+(((1.20624999997192e-5)*px))+((r22*x1223))+((x1221*x1224))+(((2.47499999994238e-6)*x1226))+(((-1.1941874999722e-11)*x1224))+(((-2.47499999994238e-6)*x1225))+(((-2.4999999999418)*pz))+(((-1.0)*r02*x1228))), ((((-1.0)*x1224*x1227))+(((1.1941874999722e-11)*x1226))+(((-1.0)*x1221*x1226))+((r02*x1223))+(((-1.20624999997192e-5)*pz))+((r22*x1228))+((x1221*x1225))+(((2.47499999994238e-6)*x1224))+((x1222*x1227))+(((-1.1941874999722e-11)*x1225))+(((-2.47499999994238e-6)*x1222))+(((-2.4999999999418)*px))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1229=IKcos(j1);
IkReal x1230=IKsin(j1);
IkReal x1231=((1.0)*pz);
IkReal x1232=((0.4)*sj4);
IkReal x1233=(r21*sj5);
IkReal x1234=((0.4)*cj4);
IkReal x1235=(cj5*r20);
IkReal x1236=(r01*sj5);
IkReal x1237=(cj5*r00);
IkReal x1238=((0.4)*x1229);
IkReal x1239=((9.9e-7)*x1236);
IkReal x1240=((9.9e-7)*x1237);
IkReal x1241=((1.93e-6)*x1230);
IkReal x1242=((9.9e-7)*x1235);
IkReal x1243=((1.93e-6)*x1229);
IkReal x1244=((0.4)*x1230);
IkReal x1245=((9.9e-7)*x1233);
IkReal x1246=((0.4)*sj3*sj5);
IkReal x1247=((0.4)*cj5*sj3);
IkReal x1248=(x1238+x1239);
IkReal x1249=(x1241+x1240);
IkReal x1250=(x1243+x1245+x1244+x1231);
evalcond[0]=(x1249+(((-1.0)*x1248))+(((-1.0)*px))+((r02*x1234))+((x1232*x1236))+(((-1.0)*x1232*x1237)));
evalcond[1]=((((-1.0)*x1250))+x1242+((r22*x1234))+((x1232*x1233))+(((-1.0)*x1232*x1235)));
evalcond[2]=(x1248+(((-1.0)*cj3*r22*x1232))+((r20*x1246))+((cj3*x1233*x1234))+(((-1.0)*x1249))+(((-1.0)*cj3*x1234*x1235))+px+((r21*x1247)));
evalcond[3]=((((-1.0)*x1250))+x1242+(((-1.0)*cj3*r02*x1232))+((r01*x1247))+((r00*x1246))+(((-1.0)*cj3*x1234*x1237))+((cj3*x1234*x1236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1251=((1.0)*r01);
IkReal x1252=(sj1*sj4);
IkReal x1253=(cj5*r00);
IkReal x1254=(cj1*cj4);
IkReal x1255=(cj5*r20);
IkReal x1256=(cj1*sj4);
IkReal x1257=(sj5*x1256);
IkReal x1258=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*r22*x1258))+(((-1.0)*r02*x1254))+((x1253*x1256))+((x1252*x1255))+(((-1.0)*x1251*x1257))+(((-1.0)*r21*sj5*x1252)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1254))+((r21*x1257))+(((-1.0)*sj5*x1251*x1252))+((x1252*x1253))+(((-1.0)*r02*x1258))+(((-1.0)*x1255*x1256)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x1258))+(((-1.0)*r02*x1254))+((x1253*x1256))+((x1252*x1255))+(((-1.0)*x1251*x1257))+(((-1.0)*r21*sj5*x1252))))+IKsqr((((r22*x1254))+((r21*x1257))+(((-1.0)*sj5*x1251*x1252))+((x1252*x1253))+(((-1.0)*r02*x1258))+(((-1.0)*x1255*x1256))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x1258))+(((-1.0)*r02*x1254))+((x1253*x1256))+((x1252*x1255))+(((-1.0)*x1251*x1257))+(((-1.0)*r21*sj5*x1252))), (((r22*x1254))+((r21*x1257))+(((-1.0)*sj5*x1251*x1252))+((x1252*x1253))+(((-1.0)*r02*x1258))+(((-1.0)*x1255*x1256))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1259=IKcos(j2);
IkReal x1260=IKsin(j2);
IkReal x1261=((1.0)*cj3);
IkReal x1262=(cj5*r00);
IkReal x1263=((1.0)*cj4);
IkReal x1264=(r01*sj5);
IkReal x1265=((1.0)*sj4);
IkReal x1266=(cj5*sj3);
IkReal x1267=(cj5*r20);
IkReal x1268=((1.0)*sj1);
IkReal x1269=(sj3*sj5);
IkReal x1270=((0.4)*sj1);
IkReal x1271=(r21*sj5);
IkReal x1272=(cj1*x1259);
IkReal x1273=(cj3*cj4*sj5);
IkReal x1274=((0.4)*x1260);
IkReal x1275=(x1259*x1268);
IkReal x1276=((1.0)*cj1*x1260);
IkReal x1277=(x1275+x1276);
evalcond[0]=(x1272+(((-1.0)*x1260*x1268))+(((-1.0)*r22*x1263))+((sj4*x1267))+(((-1.0)*x1265*x1271)));
evalcond[1]=((((-1.0)*x1264*x1265))+(((-1.0)*x1277))+((sj4*x1262))+(((-1.0)*r02*x1263)));
evalcond[2]=((((-1.93e-6)*cj1))+(((0.4)*x1272))+(((-1.0)*x1270))+(((9.9e-7)*x1267))+(((-1.0)*x1260*x1270))+(((-9.9e-7)*x1271))+(((-1.0)*pz)));
evalcond[3]=((((-1.0)*x1259*x1270))+(((9.9e-7)*x1262))+(((-9.9e-7)*x1264))+(((-1.0)*cj1*x1274))+(((1.93e-6)*sj1))+(((-1.0)*px))+(((-0.4)*cj1)));
evalcond[4]=((((-1.0)*r02*sj4*x1261))+((sj1*x1260))+((cj3*cj4*x1264))+(((-1.0)*x1272))+((r00*x1269))+(((-1.0)*cj4*x1261*x1262))+((r01*x1266)));
evalcond[5]=((((-1.0)*x1277))+((r21*x1266))+((cj3*cj4*x1271))+(((-1.0)*r22*sj4*x1261))+((r20*x1269))+(((-1.0)*cj4*x1261*x1267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1278=((4.82499999988767e-6)*sj4);
IkReal x1279=(cj5*r20);
IkReal x1280=(r11*sj5);
IkReal x1281=(r21*sj5);
IkReal x1282=(cj5*r10);
IkReal x1283=((0.999999999976719)*sj4);
IkReal x1284=((4.82499999988767e-6)*cj4);
IkReal x1285=((0.999999999976719)*cj4);
if( IKabs((((x1278*x1280))+((r22*x1285))+(((-1.1941874999722e-11)*x1280))+(((-1.20624999997192e-5)*py))+(((-1.0)*x1278*x1282))+(((-2.47499999994238e-6)*x1281))+(((2.47499999994238e-6)*x1279))+(((-1.0)*x1279*x1283))+(((-2.4999999999418)*pz))+((x1281*x1283))+(((1.1941874999722e-11)*x1282))+((r12*x1284)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1278*x1281))+(((2.4999999999418)*py))+((r22*x1284))+(((-1.1941874999722e-11)*x1281))+(((-1.20624999997192e-5)*pz))+(((-2.47499999994238e-6)*x1282))+(((-1.0)*x1278*x1279))+((x1282*x1283))+(((1.1941874999722e-11)*x1279))+(((-1.0)*r12*x1285))+(((-1.0)*x1280*x1283))+(((2.47499999994238e-6)*x1280)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1278*x1280))+((r22*x1285))+(((-1.1941874999722e-11)*x1280))+(((-1.20624999997192e-5)*py))+(((-1.0)*x1278*x1282))+(((-2.47499999994238e-6)*x1281))+(((2.47499999994238e-6)*x1279))+(((-1.0)*x1279*x1283))+(((-2.4999999999418)*pz))+((x1281*x1283))+(((1.1941874999722e-11)*x1282))+((r12*x1284))))+IKsqr((((x1278*x1281))+(((2.4999999999418)*py))+((r22*x1284))+(((-1.1941874999722e-11)*x1281))+(((-1.20624999997192e-5)*pz))+(((-2.47499999994238e-6)*x1282))+(((-1.0)*x1278*x1279))+((x1282*x1283))+(((1.1941874999722e-11)*x1279))+(((-1.0)*r12*x1285))+(((-1.0)*x1280*x1283))+(((2.47499999994238e-6)*x1280))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((x1278*x1280))+((r22*x1285))+(((-1.1941874999722e-11)*x1280))+(((-1.20624999997192e-5)*py))+(((-1.0)*x1278*x1282))+(((-2.47499999994238e-6)*x1281))+(((2.47499999994238e-6)*x1279))+(((-1.0)*x1279*x1283))+(((-2.4999999999418)*pz))+((x1281*x1283))+(((1.1941874999722e-11)*x1282))+((r12*x1284))), (((x1278*x1281))+(((2.4999999999418)*py))+((r22*x1284))+(((-1.1941874999722e-11)*x1281))+(((-1.20624999997192e-5)*pz))+(((-2.47499999994238e-6)*x1282))+(((-1.0)*x1278*x1279))+((x1282*x1283))+(((1.1941874999722e-11)*x1279))+(((-1.0)*r12*x1285))+(((-1.0)*x1280*x1283))+(((2.47499999994238e-6)*x1280))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1286=IKcos(j1);
IkReal x1287=IKsin(j1);
IkReal x1288=((0.4)*sj4);
IkReal x1289=(r21*sj5);
IkReal x1290=(cj5*r10);
IkReal x1291=((0.4)*cj4);
IkReal x1292=(cj5*r20);
IkReal x1293=((0.4)*sj3);
IkReal x1294=(r11*sj5);
IkReal x1295=((1.93e-6)*x1287);
IkReal x1296=((9.9e-7)*x1294);
IkReal x1297=((0.4)*x1286);
IkReal x1298=((9.9e-7)*x1290);
IkReal x1299=((1.93e-6)*x1286);
IkReal x1300=((0.4)*x1287);
IkReal x1301=((9.9e-7)*x1289);
IkReal x1302=((9.9e-7)*x1292);
IkReal x1303=(x1298+x1297);
IkReal x1304=(x1296+x1295+py);
IkReal x1305=(x1300+x1301+x1299);
evalcond[0]=(x1304+(((-1.0)*x1288*x1294))+(((-1.0)*x1303))+(((-1.0)*r12*x1291))+((x1288*x1290)));
evalcond[1]=(x1302+((x1288*x1289))+(((-1.0)*x1288*x1292))+(((-1.0)*x1305))+(((-1.0)*pz))+((r22*x1291)));
evalcond[2]=(x1304+(((-1.0)*cj3*x1289*x1291))+(((-1.0)*r20*sj5*x1293))+(((-1.0)*x1303))+((cj3*r22*x1288))+(((-1.0)*cj5*r21*x1293))+((cj3*x1291*x1292)));
evalcond[3]=(x1305+(((-1.0)*cj3*x1290*x1291))+(((-1.0)*cj3*r12*x1288))+(((-1.0)*x1302))+((r10*sj5*x1293))+pz+((cj5*r11*x1293))+((cj3*x1291*x1294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1306=(cj4*r12);
IkReal x1307=(cj4*r22);
IkReal x1308=(cj1*sj4);
IkReal x1309=(r11*sj5);
IkReal x1310=(r21*sj5);
IkReal x1311=((1.0)*sj1);
IkReal x1312=(sj1*sj4);
IkReal x1313=(cj5*r20);
IkReal x1314=((1.0)*cj5*r10);
if( IKabs(((((-1.0)*x1308*x1314))+((x1308*x1309))+(((-1.0)*x1307*x1311))+((cj1*x1306))+(((-1.0)*sj4*x1310*x1311))+((x1312*x1313)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1308*x1310))+(((-1.0)*cj5*r10*sj4*x1311))+((x1309*x1312))+((cj1*x1307))+((sj1*x1306))+(((-1.0)*x1308*x1313)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1308*x1314))+((x1308*x1309))+(((-1.0)*x1307*x1311))+((cj1*x1306))+(((-1.0)*sj4*x1310*x1311))+((x1312*x1313))))+IKsqr((((x1308*x1310))+(((-1.0)*cj5*r10*sj4*x1311))+((x1309*x1312))+((cj1*x1307))+((sj1*x1306))+(((-1.0)*x1308*x1313))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1308*x1314))+((x1308*x1309))+(((-1.0)*x1307*x1311))+((cj1*x1306))+(((-1.0)*sj4*x1310*x1311))+((x1312*x1313))), (((x1308*x1310))+(((-1.0)*cj5*r10*sj4*x1311))+((x1309*x1312))+((cj1*x1307))+((sj1*x1306))+(((-1.0)*x1308*x1313))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1315=IKcos(j2);
IkReal x1316=IKsin(j2);
IkReal x1317=(cj3*cj4);
IkReal x1318=(r21*sj5);
IkReal x1319=((1.0)*r22);
IkReal x1320=(cj5*r10);
IkReal x1321=(cj5*r20);
IkReal x1322=(cj5*sj3);
IkReal x1323=(cj3*sj4);
IkReal x1324=(r11*sj5);
IkReal x1325=((1.0)*sj4);
IkReal x1326=((1.0)*r12);
IkReal x1327=(sj3*sj5);
IkReal x1328=(cj1*x1315);
IkReal x1329=(cj1*x1316);
IkReal x1330=(sj1*x1316);
IkReal x1331=(sj1*x1315);
IkReal x1332=((1.0)*x1330);
evalcond[0]=(x1329+x1331+(((-1.0)*x1324*x1325))+(((-1.0)*cj4*x1326))+((sj4*x1320)));
evalcond[1]=(x1328+(((-1.0)*cj4*x1319))+((sj4*x1321))+(((-1.0)*x1332))+(((-1.0)*x1318*x1325)));
evalcond[2]=((((-1.93e-6)*cj1))+(((0.4)*x1328))+(((-9.9e-7)*x1318))+(((-0.4)*x1330))+(((-1.0)*pz))+(((9.9e-7)*x1321))+(((-0.4)*sj1)));
evalcond[3]=((((0.4)*x1329))+(((-9.9e-7)*x1324))+(((0.4)*cj1))+(((-1.0)*py))+(((9.9e-7)*x1320))+(((-1.93e-6)*sj1))+(((0.4)*x1331)));
evalcond[4]=((((-1.0)*x1317*x1320))+x1328+(((-1.0)*x1323*x1326))+((r11*x1322))+((r10*x1327))+(((-1.0)*x1332))+((x1317*x1324)));
evalcond[5]=((((-1.0)*x1317*x1321))+((x1317*x1318))+(((-1.0)*x1319*x1323))+(((-1.0)*x1331))+(((-1.0)*x1329))+((r21*x1322))+((r20*x1327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1333=((4.82499999988767e-6)*sj4);
IkReal x1334=(cj5*r20);
IkReal x1335=(r11*sj5);
IkReal x1336=(r21*sj5);
IkReal x1337=(cj5*r10);
IkReal x1338=((0.999999999976719)*sj4);
IkReal x1339=((4.82499999988767e-6)*cj4);
IkReal x1340=((0.999999999976719)*cj4);
if( IKabs((((x1336*x1338))+(((-2.47499999994238e-6)*x1336))+((r22*x1340))+(((-1.0)*x1334*x1338))+(((2.47499999994238e-6)*x1334))+(((1.20624999997192e-5)*py))+(((-1.0)*x1333*x1335))+(((1.1941874999722e-11)*x1335))+(((-1.1941874999722e-11)*x1337))+(((-1.0)*r12*x1339))+(((-2.4999999999418)*pz))+((x1333*x1337)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.47499999994238e-6)*x1335))+(((-1.0)*x1337*x1338))+((x1335*x1338))+(((2.47499999994238e-6)*x1337))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x1333*x1334))+((r12*x1340))+((r22*x1339))+(((1.1941874999722e-11)*x1334))+(((-1.1941874999722e-11)*x1336))+(((-2.4999999999418)*py))+((x1333*x1336)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1336*x1338))+(((-2.47499999994238e-6)*x1336))+((r22*x1340))+(((-1.0)*x1334*x1338))+(((2.47499999994238e-6)*x1334))+(((1.20624999997192e-5)*py))+(((-1.0)*x1333*x1335))+(((1.1941874999722e-11)*x1335))+(((-1.1941874999722e-11)*x1337))+(((-1.0)*r12*x1339))+(((-2.4999999999418)*pz))+((x1333*x1337))))+IKsqr(((((-2.47499999994238e-6)*x1335))+(((-1.0)*x1337*x1338))+((x1335*x1338))+(((2.47499999994238e-6)*x1337))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x1333*x1334))+((r12*x1340))+((r22*x1339))+(((1.1941874999722e-11)*x1334))+(((-1.1941874999722e-11)*x1336))+(((-2.4999999999418)*py))+((x1333*x1336))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((x1336*x1338))+(((-2.47499999994238e-6)*x1336))+((r22*x1340))+(((-1.0)*x1334*x1338))+(((2.47499999994238e-6)*x1334))+(((1.20624999997192e-5)*py))+(((-1.0)*x1333*x1335))+(((1.1941874999722e-11)*x1335))+(((-1.1941874999722e-11)*x1337))+(((-1.0)*r12*x1339))+(((-2.4999999999418)*pz))+((x1333*x1337))), ((((-2.47499999994238e-6)*x1335))+(((-1.0)*x1337*x1338))+((x1335*x1338))+(((2.47499999994238e-6)*x1337))+(((-1.20624999997192e-5)*pz))+(((-1.0)*x1333*x1334))+((r12*x1340))+((r22*x1339))+(((1.1941874999722e-11)*x1334))+(((-1.1941874999722e-11)*x1336))+(((-2.4999999999418)*py))+((x1333*x1336))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1341=IKcos(j1);
IkReal x1342=IKsin(j1);
IkReal x1343=((1.0)*pz);
IkReal x1344=((0.4)*sj4);
IkReal x1345=(r21*sj5);
IkReal x1346=(cj5*r10);
IkReal x1347=((0.4)*cj4);
IkReal x1348=(cj5*r20);
IkReal x1349=((0.4)*sj3);
IkReal x1350=(r11*sj5);
IkReal x1351=((0.4)*x1341);
IkReal x1352=((9.9e-7)*x1350);
IkReal x1353=((9.9e-7)*x1346);
IkReal x1354=((1.93e-6)*x1342);
IkReal x1355=((9.9e-7)*x1348);
IkReal x1356=((1.93e-6)*x1341);
IkReal x1357=((0.4)*x1342);
IkReal x1358=((9.9e-7)*x1345);
IkReal x1359=(x1353+x1354);
IkReal x1360=(x1352+x1351);
IkReal x1361=(x1343+x1358+x1357+x1356);
evalcond[0]=(x1359+((x1344*x1350))+(((-1.0)*py))+((r12*x1347))+(((-1.0)*x1344*x1346))+(((-1.0)*x1360)));
evalcond[1]=(x1355+((r22*x1347))+((x1344*x1345))+(((-1.0)*x1344*x1348))+(((-1.0)*x1361)));
evalcond[2]=(x1360+(((-1.0)*x1359))+((r20*sj5*x1349))+(((-1.0)*cj3*r22*x1344))+((cj5*r21*x1349))+py+((cj3*x1345*x1347))+(((-1.0)*cj3*x1347*x1348)));
evalcond[3]=(x1355+((r10*sj5*x1349))+((cj3*x1347*x1350))+((cj5*r11*x1349))+(((-1.0)*cj3*x1346*x1347))+(((-1.0)*cj3*r12*x1344))+(((-1.0)*x1361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1362=((1.0)*cj1);
IkReal x1363=(sj4*sj5);
IkReal x1364=(cj5*sj4);
IkReal x1365=((1.0)*sj1);
IkReal x1366=(sj1*x1364);
IkReal x1367=(cj4*x1365);
if( IKabs(((((-1.0)*cj4*r12*x1362))+(((-1.0)*r11*x1362*x1363))+((cj1*r10*x1364))+(((-1.0)*r22*x1367))+((r20*x1366))+(((-1.0)*r21*x1363*x1365)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+(((-1.0)*r20*x1362*x1364))+((r10*x1366))+(((-1.0)*r12*x1367))+((cj1*r21*x1363))+(((-1.0)*r11*x1363*x1365)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r12*x1362))+(((-1.0)*r11*x1362*x1363))+((cj1*r10*x1364))+(((-1.0)*r22*x1367))+((r20*x1366))+(((-1.0)*r21*x1363*x1365))))+IKsqr((((cj1*cj4*r22))+(((-1.0)*r20*x1362*x1364))+((r10*x1366))+(((-1.0)*r12*x1367))+((cj1*r21*x1363))+(((-1.0)*r11*x1363*x1365))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj4*r12*x1362))+(((-1.0)*r11*x1362*x1363))+((cj1*r10*x1364))+(((-1.0)*r22*x1367))+((r20*x1366))+(((-1.0)*r21*x1363*x1365))), (((cj1*cj4*r22))+(((-1.0)*r20*x1362*x1364))+((r10*x1366))+(((-1.0)*r12*x1367))+((cj1*r21*x1363))+(((-1.0)*r11*x1363*x1365))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1368=IKcos(j2);
IkReal x1369=IKsin(j2);
IkReal x1370=(cj3*cj4);
IkReal x1371=(r21*sj5);
IkReal x1372=((1.0)*r22);
IkReal x1373=(cj5*r10);
IkReal x1374=(cj5*r20);
IkReal x1375=(cj5*sj3);
IkReal x1376=((1.0)*sj1);
IkReal x1377=(cj3*sj4);
IkReal x1378=(sj3*sj5);
IkReal x1379=(r11*sj5);
IkReal x1380=((1.0)*sj4);
IkReal x1381=((1.0)*r12);
IkReal x1382=((0.4)*sj1);
IkReal x1383=(cj1*x1368);
IkReal x1384=((0.4)*x1369);
IkReal x1385=(x1368*x1376);
IkReal x1386=((1.0)*cj1*x1369);
IkReal x1387=(x1385+x1386);
evalcond[0]=(x1383+(((-1.0)*cj4*x1372))+((sj4*x1374))+(((-1.0)*x1371*x1380))+(((-1.0)*x1369*x1376)));
evalcond[1]=((((-1.0)*x1387))+(((-1.0)*cj4*x1381))+((sj4*x1373))+(((-1.0)*x1379*x1380)));
evalcond[2]=((((-1.0)*x1382))+(((-1.93e-6)*cj1))+(((-9.9e-7)*x1371))+(((-1.0)*pz))+(((0.4)*x1383))+(((9.9e-7)*x1374))+(((-1.0)*x1369*x1382)));
evalcond[3]=((((-9.9e-7)*x1379))+(((1.93e-6)*sj1))+(((-1.0)*py))+(((9.9e-7)*x1373))+(((-1.0)*cj1*x1384))+(((-1.0)*x1368*x1382))+(((-0.4)*cj1)));
evalcond[4]=(((r10*x1378))+((sj1*x1369))+(((-1.0)*x1377*x1381))+((r11*x1375))+(((-1.0)*x1370*x1373))+((x1370*x1379))+(((-1.0)*x1383)));
evalcond[5]=((((-1.0)*x1387))+(((-1.0)*x1372*x1377))+(((-1.0)*x1370*x1374))+((r21*x1375))+((x1370*x1371))+((r20*x1378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1388=(cj5*r10);
IkReal x1389=((0.4)*sj4);
IkReal x1390=(r21*sj5);
IkReal x1391=(cj5*r21);
IkReal x1392=(r11*sj5);
IkReal x1393=(r20*sj5);
IkReal x1394=(cj5*r20);
IkReal x1395=((7720000000.0)*sj0);
IkReal x1396=(cj3*cj4);
IkReal x1397=((1.6e+15)*sj0);
IkReal x1398=(cj3*r22*sj4);
IkReal x1399=((-1.6e+15)*sj0*sj3);
IkReal x1400=((((9.9e-7)*x1394))+(((-1.0)*x1389*x1394))+(((-1.0)*pz))+(((-9.9e-7)*x1390))+((x1389*x1390))+(((0.4)*cj4*r22)));
IkReal x1401=(sj0*x1400);
CheckValue<IkReal> x1402=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1402.valid){
continue;
}
CheckValue<IkReal> x1403 = IKatan2WithCheck(IkReal(((((19107.0)*x1388))+(((-19107.0)*x1392))+(((-1.0)*x1395*x1398))+((x1390*x1395*x1396))+(((-1.0)*x1394*x1395*x1396))+(((4.0e+15)*x1401))+(((-19300000000.0)*py))+((sj3*x1391*x1395))+((sj3*x1393*x1395)))),IkReal(((((3960000000.0)*x1392))+((x1393*x1399))+(((-1.6e+15)*sj0*x1390*x1396))+(((-3960000000.0)*x1388))+(((19300000000.0)*x1401))+((x1397*x1398))+(((4.0e+15)*py))+((x1391*x1399))+((x1394*x1396*x1397)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1403.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1402.value)))+(x1403.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1404=IKsin(j1);
IkReal x1405=sj0*sj0;
IkReal x1406=IKcos(j1);
IkReal x1407=cj0*cj0;
IkReal x1408=((0.4)*cj5);
IkReal x1409=(r21*sj0);
IkReal x1410=((0.4)*sj4);
IkReal x1411=(r21*sj5);
IkReal x1412=(cj3*r22);
IkReal x1413=(r11*sj5);
IkReal x1414=((9.9e-7)*cj0);
IkReal x1415=((0.4)*cj4);
IkReal x1416=(cj3*cj4);
IkReal x1417=(cj5*r00);
IkReal x1418=(r01*sj5);
IkReal x1419=(r20*sj0);
IkReal x1420=(r00*sj4);
IkReal x1421=((9.9e-7)*cj5);
IkReal x1422=(cj0*sj0);
IkReal x1423=((9.9e-7)*sj0);
IkReal x1424=(r10*sj4);
IkReal x1425=((0.4)*x1406);
IkReal x1426=(r20*x1416);
IkReal x1427=((1.93e-6)*x1404);
IkReal x1428=(r10*x1421);
IkReal x1429=((1.93e-6)*x1406);
IkReal x1430=((0.4)*sj3*sj5);
IkReal x1431=((0.4)*x1404);
IkReal x1432=(x1422*x1427);
IkReal x1433=(x1422*x1425);
evalcond[0]=((((-1.0)*x1431))+((r22*x1415))+(((-1.0)*r20*sj4*x1408))+(((-9.9e-7)*x1411))+(((-1.0)*pz))+((x1410*x1411))+(((-1.0)*x1429))+((r20*x1421)));
evalcond[1]=((((-1.0)*r12*sj0*x1415))+((x1405*x1427))+(((-1.0)*sj0*x1428))+((sj0*x1408*x1424))+(((-1.0)*x1405*x1425))+((py*sj0))+(((-1.0)*sj0*x1410*x1413))+((x1413*x1423)));
evalcond[2]=((((-1.0)*cj0*x1410*x1418))+(((-1.0)*x1407*x1425))+(((-1.0)*x1414*x1417))+((x1407*x1427))+((cj0*px))+((cj0*x1408*x1420))+(((-1.0)*cj0*r02*x1415))+((x1414*x1418)));
evalcond[3]=((((9.9e-7)*sj5*x1409))+(((-1.0)*cj3*r12*x1410))+((cj3*x1413*x1415))+(((-1.0)*r10*x1408*x1416))+((sj0*x1431))+(((-1.0)*x1419*x1421))+((r11*sj3*x1408))+((pz*sj0))+((sj0*x1429))+((r10*x1430)));
evalcond[4]=(((cj3*x1415*x1418))+(((-1.0)*cj5*r20*x1414))+((cj0*x1431))+((x1411*x1414))+((r00*x1430))+(((-1.0)*r00*x1408*x1416))+((cj0*pz))+((r01*sj3*x1408))+(((-1.0)*cj3*r02*x1410))+((cj0*x1429)));
evalcond[5]=((((-1.0)*x1419*x1430))+(((-1.0)*cj3*sj5*x1409*x1415))+((x1408*x1416*x1419))+((sj0*x1410*x1412))+py+(((-1.0)*sj0*x1425))+(((-1.0)*sj3*x1408*x1409))+(((9.9e-7)*x1413))+((sj0*x1427))+(((-1.0)*x1428)));
evalcond[6]=((((-1.0)*cj0*r21*sj3*x1408))+(((-1.0)*cj0*x1425))+(((-1.0)*cj0*r20*x1430))+(((-9.9e-7)*x1417))+px+(((-1.0)*cj0*cj3*x1411*x1415))+((cj0*x1410*x1412))+((cj0*x1408*x1426))+(((9.9e-7)*x1418))+((cj0*x1427)));
evalcond[7]=((((-1.0)*cj0*x1410*x1413))+(((-1.0)*x1417*x1423))+(((-1.0)*x1433))+x1432+((x1418*x1423))+((px*sj0))+((cj0*x1408*x1424))+(((-1.0)*cj0*r12*x1415)));
evalcond[8]=(((x1413*x1414))+(((-1.0)*r02*sj0*x1415))+(((-1.0)*cj5*r10*x1414))+(((-1.0)*x1433))+x1432+((sj0*x1408*x1420))+((cj0*py))+(((-1.0)*sj0*x1410*x1418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1434=(cj4*sj1);
IkReal x1435=(cj1*sj4);
IkReal x1436=((1.0)*cj5);
IkReal x1437=(r21*sj5);
IkReal x1438=(cj1*cj4);
IkReal x1439=(sj1*sj4);
IkReal x1440=(r01*sj4*sj5);
if( IKabs((((r01*sj5*x1435))+(((-1.0)*r00*x1435*x1436))+((r02*x1438))+(((-1.0)*r22*x1434))+(((-1.0)*x1437*x1439))+((cj5*r20*x1439)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj5*x1439))+((r02*x1434))+((x1435*x1437))+(((-1.0)*r00*x1436*x1439))+((r22*x1438))+(((-1.0)*r20*x1435*x1436)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj5*x1435))+(((-1.0)*r00*x1435*x1436))+((r02*x1438))+(((-1.0)*r22*x1434))+(((-1.0)*x1437*x1439))+((cj5*r20*x1439))))+IKsqr((((r01*sj5*x1439))+((r02*x1434))+((x1435*x1437))+(((-1.0)*r00*x1436*x1439))+((r22*x1438))+(((-1.0)*r20*x1435*x1436))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r01*sj5*x1435))+(((-1.0)*r00*x1435*x1436))+((r02*x1438))+(((-1.0)*r22*x1434))+(((-1.0)*x1437*x1439))+((cj5*r20*x1439))), (((r01*sj5*x1439))+((r02*x1434))+((x1435*x1437))+(((-1.0)*r00*x1436*x1439))+((r22*x1438))+(((-1.0)*r20*x1435*x1436))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1441=IKcos(j2);
IkReal x1442=IKsin(j2);
IkReal x1443=((1.0)*cj3);
IkReal x1444=(cj5*r00);
IkReal x1445=((1.0)*cj4);
IkReal x1446=(r01*sj5);
IkReal x1447=((1.0)*sj4);
IkReal x1448=(cj5*sj3);
IkReal x1449=(cj5*r20);
IkReal x1450=(sj3*sj5);
IkReal x1451=(r21*sj5);
IkReal x1452=(cj1*x1441);
IkReal x1453=(cj3*cj4*sj5);
IkReal x1454=(cj1*x1442);
IkReal x1455=(sj1*x1442);
IkReal x1456=(sj1*x1441);
IkReal x1457=((1.0)*x1455);
evalcond[0]=((((-1.0)*x1446*x1447))+((sj4*x1444))+x1454+x1456+(((-1.0)*r02*x1445)));
evalcond[1]=((((-1.0)*r22*x1445))+(((-1.0)*x1447*x1451))+((sj4*x1449))+(((-1.0)*x1457))+x1452);
evalcond[2]=((((-1.93e-6)*cj1))+(((-1.0)*pz))+(((-9.9e-7)*x1451))+(((9.9e-7)*x1449))+(((-0.4)*x1455))+(((0.4)*x1452))+(((-0.4)*sj1)));
evalcond[3]=((((-9.9e-7)*x1446))+(((0.4)*cj1))+(((-1.0)*px))+(((-1.93e-6)*sj1))+(((9.9e-7)*x1444))+(((0.4)*x1454))+(((0.4)*x1456)));
evalcond[4]=((((-1.0)*x1457))+((cj3*cj4*x1446))+(((-1.0)*r02*sj4*x1443))+x1452+((r00*x1450))+(((-1.0)*cj4*x1443*x1444))+((r01*x1448)));
evalcond[5]=((((-1.0)*x1456))+(((-1.0)*x1454))+((r20*x1450))+((r21*x1448))+(((-1.0)*r22*sj4*x1443))+((cj3*cj4*x1451))+(((-1.0)*cj4*x1443*x1449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1458=((1.0)*r01);
IkReal x1459=(sj1*sj4);
IkReal x1460=(cj5*r00);
IkReal x1461=(cj1*cj4);
IkReal x1462=(cj5*r20);
IkReal x1463=(cj1*sj4);
IkReal x1464=(sj5*x1463);
IkReal x1465=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*x1458*x1464))+((x1459*x1462))+(((-1.0)*r22*x1465))+((x1460*x1463))+(((-1.0)*r21*sj5*x1459))+(((-1.0)*r02*x1461)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x1465))+((x1459*x1460))+(((-1.0)*x1462*x1463))+(((-1.0)*sj5*x1458*x1459))+((r22*x1461))+((r21*x1464)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1458*x1464))+((x1459*x1462))+(((-1.0)*r22*x1465))+((x1460*x1463))+(((-1.0)*r21*sj5*x1459))+(((-1.0)*r02*x1461))))+IKsqr(((((-1.0)*r02*x1465))+((x1459*x1460))+(((-1.0)*x1462*x1463))+(((-1.0)*sj5*x1458*x1459))+((r22*x1461))+((r21*x1464))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1458*x1464))+((x1459*x1462))+(((-1.0)*r22*x1465))+((x1460*x1463))+(((-1.0)*r21*sj5*x1459))+(((-1.0)*r02*x1461))), ((((-1.0)*r02*x1465))+((x1459*x1460))+(((-1.0)*x1462*x1463))+(((-1.0)*sj5*x1458*x1459))+((r22*x1461))+((r21*x1464))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1466=IKcos(j2);
IkReal x1467=IKsin(j2);
IkReal x1468=((1.0)*cj3);
IkReal x1469=(cj5*r00);
IkReal x1470=((1.0)*cj4);
IkReal x1471=(r01*sj5);
IkReal x1472=((1.0)*sj4);
IkReal x1473=(cj5*sj3);
IkReal x1474=(cj5*r20);
IkReal x1475=((1.0)*sj1);
IkReal x1476=(sj3*sj5);
IkReal x1477=((0.4)*sj1);
IkReal x1478=(r21*sj5);
IkReal x1479=(cj1*x1466);
IkReal x1480=(cj3*cj4*sj5);
IkReal x1481=((0.4)*x1467);
IkReal x1482=(x1466*x1475);
IkReal x1483=((1.0)*cj1*x1467);
IkReal x1484=(x1483+x1482);
evalcond[0]=((((-1.0)*r22*x1470))+((sj4*x1474))+(((-1.0)*x1467*x1475))+x1479+(((-1.0)*x1472*x1478)));
evalcond[1]=((((-1.0)*x1471*x1472))+(((-1.0)*x1484))+((sj4*x1469))+(((-1.0)*r02*x1470)));
evalcond[2]=((((-9.9e-7)*x1478))+(((-1.93e-6)*cj1))+(((-1.0)*pz))+(((-1.0)*x1467*x1477))+(((-1.0)*x1477))+(((0.4)*x1479))+(((9.9e-7)*x1474)));
evalcond[3]=((((-9.9e-7)*x1471))+(((9.9e-7)*x1469))+(((-1.0)*cj1*x1481))+(((1.93e-6)*sj1))+(((-1.0)*px))+(((-1.0)*x1466*x1477))+(((-0.4)*cj1)));
evalcond[4]=(((cj3*cj4*x1471))+(((-1.0)*x1479))+((sj1*x1467))+((r01*x1473))+(((-1.0)*r02*sj4*x1468))+((r00*x1476))+(((-1.0)*cj4*x1468*x1469)));
evalcond[5]=((((-1.0)*r22*sj4*x1468))+(((-1.0)*x1484))+((r21*x1473))+((cj3*cj4*x1478))+(((-1.0)*cj4*x1468*x1474))+((r20*x1476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1485=(cj4*r12);
IkReal x1486=(cj4*r22);
IkReal x1487=(cj1*sj4);
IkReal x1488=(r11*sj5);
IkReal x1489=(r21*sj5);
IkReal x1490=((1.0)*sj1);
IkReal x1491=(sj1*sj4);
IkReal x1492=(cj5*r20);
IkReal x1493=((1.0)*cj5*r10);
if( IKabs(((((-1.0)*x1487*x1493))+((cj1*x1485))+(((-1.0)*x1486*x1490))+((x1487*x1488))+((x1491*x1492))+(((-1.0)*sj4*x1489*x1490)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x1485))+((cj1*x1486))+(((-1.0)*x1487*x1492))+((x1487*x1489))+(((-1.0)*cj5*r10*sj4*x1490))+((x1488*x1491)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1487*x1493))+((cj1*x1485))+(((-1.0)*x1486*x1490))+((x1487*x1488))+((x1491*x1492))+(((-1.0)*sj4*x1489*x1490))))+IKsqr((((sj1*x1485))+((cj1*x1486))+(((-1.0)*x1487*x1492))+((x1487*x1489))+(((-1.0)*cj5*r10*sj4*x1490))+((x1488*x1491))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1487*x1493))+((cj1*x1485))+(((-1.0)*x1486*x1490))+((x1487*x1488))+((x1491*x1492))+(((-1.0)*sj4*x1489*x1490))), (((sj1*x1485))+((cj1*x1486))+(((-1.0)*x1487*x1492))+((x1487*x1489))+(((-1.0)*cj5*r10*sj4*x1490))+((x1488*x1491))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1494=IKcos(j2);
IkReal x1495=IKsin(j2);
IkReal x1496=(cj3*cj4);
IkReal x1497=(r21*sj5);
IkReal x1498=((1.0)*r22);
IkReal x1499=(cj5*r10);
IkReal x1500=(cj5*r20);
IkReal x1501=(cj5*sj3);
IkReal x1502=(cj3*sj4);
IkReal x1503=(r11*sj5);
IkReal x1504=((1.0)*sj4);
IkReal x1505=((1.0)*r12);
IkReal x1506=(sj3*sj5);
IkReal x1507=(cj1*x1494);
IkReal x1508=(cj1*x1495);
IkReal x1509=(sj1*x1495);
IkReal x1510=(sj1*x1494);
IkReal x1511=((1.0)*x1509);
evalcond[0]=((((-1.0)*cj4*x1505))+x1508+x1510+((sj4*x1499))+(((-1.0)*x1503*x1504)));
evalcond[1]=((((-1.0)*x1511))+x1507+((sj4*x1500))+(((-1.0)*x1497*x1504))+(((-1.0)*cj4*x1498)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-1.0)*pz))+(((-0.4)*x1509))+(((9.9e-7)*x1500))+(((-9.9e-7)*x1497))+(((-0.4)*sj1))+(((0.4)*x1507)));
evalcond[3]=((((0.4)*cj1))+(((-9.9e-7)*x1503))+(((-1.0)*py))+(((-1.93e-6)*sj1))+(((9.9e-7)*x1499))+(((0.4)*x1508))+(((0.4)*x1510)));
evalcond[4]=((((-1.0)*x1511))+((r11*x1501))+((r10*x1506))+(((-1.0)*x1496*x1499))+((x1496*x1503))+x1507+(((-1.0)*x1502*x1505)));
evalcond[5]=((((-1.0)*x1498*x1502))+(((-1.0)*x1508))+(((-1.0)*x1510))+(((-1.0)*x1496*x1500))+((r20*x1506))+((x1496*x1497))+((r21*x1501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1512=((1.0)*cj1);
IkReal x1513=(sj4*sj5);
IkReal x1514=(cj5*sj4);
IkReal x1515=((1.0)*sj1);
IkReal x1516=(sj1*x1514);
IkReal x1517=(cj4*x1515);
if( IKabs(((((-1.0)*r22*x1517))+(((-1.0)*cj4*r12*x1512))+((r20*x1516))+(((-1.0)*r11*x1512*x1513))+(((-1.0)*r21*x1513*x1515))+((cj1*r10*x1514)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+(((-1.0)*r20*x1512*x1514))+((r10*x1516))+((cj1*r21*x1513))+(((-1.0)*r11*x1513*x1515))+(((-1.0)*r12*x1517)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x1517))+(((-1.0)*cj4*r12*x1512))+((r20*x1516))+(((-1.0)*r11*x1512*x1513))+(((-1.0)*r21*x1513*x1515))+((cj1*r10*x1514))))+IKsqr((((cj1*cj4*r22))+(((-1.0)*r20*x1512*x1514))+((r10*x1516))+((cj1*r21*x1513))+(((-1.0)*r11*x1513*x1515))+(((-1.0)*r12*x1517))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x1517))+(((-1.0)*cj4*r12*x1512))+((r20*x1516))+(((-1.0)*r11*x1512*x1513))+(((-1.0)*r21*x1513*x1515))+((cj1*r10*x1514))), (((cj1*cj4*r22))+(((-1.0)*r20*x1512*x1514))+((r10*x1516))+((cj1*r21*x1513))+(((-1.0)*r11*x1513*x1515))+(((-1.0)*r12*x1517))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1518=IKcos(j2);
IkReal x1519=IKsin(j2);
IkReal x1520=(cj3*cj4);
IkReal x1521=(r21*sj5);
IkReal x1522=((1.0)*r22);
IkReal x1523=(cj5*r10);
IkReal x1524=(cj5*r20);
IkReal x1525=(cj5*sj3);
IkReal x1526=((1.0)*sj1);
IkReal x1527=(cj3*sj4);
IkReal x1528=(sj3*sj5);
IkReal x1529=(r11*sj5);
IkReal x1530=((1.0)*sj4);
IkReal x1531=((1.0)*r12);
IkReal x1532=((0.4)*sj1);
IkReal x1533=(cj1*x1518);
IkReal x1534=((0.4)*x1519);
IkReal x1535=(x1518*x1526);
IkReal x1536=((1.0)*cj1*x1519);
IkReal x1537=(x1536+x1535);
evalcond[0]=((((-1.0)*x1521*x1530))+(((-1.0)*x1519*x1526))+(((-1.0)*cj4*x1522))+x1533+((sj4*x1524)));
evalcond[1]=((((-1.0)*x1529*x1530))+(((-1.0)*x1537))+(((-1.0)*cj4*x1531))+((sj4*x1523)));
evalcond[2]=((((-1.93e-6)*cj1))+(((0.4)*x1533))+(((-1.0)*x1532))+(((-1.0)*x1519*x1532))+(((-1.0)*pz))+(((-9.9e-7)*x1521))+(((9.9e-7)*x1524)));
evalcond[3]=((((-1.0)*x1518*x1532))+(((1.93e-6)*sj1))+(((-1.0)*py))+(((-9.9e-7)*x1529))+(((9.9e-7)*x1523))+(((-1.0)*cj1*x1534))+(((-0.4)*cj1)));
evalcond[4]=((((-1.0)*x1533))+((r10*x1528))+((r11*x1525))+(((-1.0)*x1520*x1523))+((x1520*x1529))+((sj1*x1519))+(((-1.0)*x1527*x1531)));
evalcond[5]=((((-1.0)*x1537))+(((-1.0)*x1520*x1524))+((r20*x1528))+((x1520*x1521))+((r21*x1525))+(((-1.0)*x1522*x1527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1538=((1.0)*sj1);
IkReal x1539=(cj5*sj4);
IkReal x1540=(r20*sj0);
IkReal x1541=((1.0)*cj1);
IkReal x1542=(cj4*r12);
IkReal x1543=(cj4*r22*sj0);
IkReal x1544=(r11*sj4*sj5);
IkReal x1545=(r21*sj0*sj4*sj5);
CheckValue<IkReal> x1546=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1546.valid){
continue;
}
CheckValue<IkReal> x1547 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1539*x1541))+((cj1*x1544))+((cj1*x1542))+(((-1.0)*x1538*x1545))+(((-1.0)*x1538*x1543))+((sj1*x1539*x1540)))),IkReal(((((-1.0)*x1539*x1540*x1541))+((cj1*x1545))+((cj1*x1543))+((sj1*x1542))+((sj1*x1544))+(((-1.0)*r10*x1538*x1539)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1547.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1546.value)))+(x1547.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1548=IKsin(j2);
IkReal x1549=IKcos(j2);
IkReal x1550=((1.0)*cj3);
IkReal x1551=(cj5*r00);
IkReal x1552=(cj0*cj1);
IkReal x1553=(cj5*r10);
IkReal x1554=(r01*sj5);
IkReal x1555=((1.0)*sj4);
IkReal x1556=(cj5*sj3);
IkReal x1557=(cj1*sj0);
IkReal x1558=(sj3*sj5);
IkReal x1559=(cj5*r20);
IkReal x1560=((1.0)*cj4);
IkReal x1561=((1.93e-6)*sj1);
IkReal x1562=(r11*sj5);
IkReal x1563=(r21*sj5);
IkReal x1564=(cj1*x1549);
IkReal x1565=(cj3*cj4*sj5);
IkReal x1566=((0.4)*x1548);
IkReal x1567=(sj1*x1549);
IkReal x1568=((1.0)*sj1*x1548);
evalcond[0]=(((sj4*x1559))+(((-1.0)*x1555*x1563))+(((-1.0)*r22*x1560))+x1564+(((-1.0)*x1568)));
evalcond[1]=((((-1.0)*r02*x1560))+((sj4*x1551))+((cj0*x1567))+((x1548*x1552))+(((-1.0)*x1554*x1555)));
evalcond[2]=(((sj4*x1553))+(((-1.0)*x1555*x1562))+((sj0*x1567))+(((-1.0)*r12*x1560))+((x1548*x1557)));
evalcond[3]=((((-1.93e-6)*cj1))+(((-1.0)*sj1*x1566))+(((-9.9e-7)*x1563))+(((-1.0)*pz))+(((0.4)*x1564))+(((9.9e-7)*x1559))+(((-0.4)*sj1)));
evalcond[4]=((((-1.0)*cj0*x1561))+(((-9.9e-7)*x1554))+((x1552*x1566))+(((0.4)*cj0*x1567))+(((0.4)*x1552))+(((-1.0)*px))+(((9.9e-7)*x1551)));
evalcond[5]=((((-9.9e-7)*x1562))+(((0.4)*x1557))+(((-1.0)*py))+((x1557*x1566))+(((-1.0)*sj0*x1561))+(((9.9e-7)*x1553))+(((0.4)*sj0*x1567)));
evalcond[6]=((((-1.0)*cj4*x1550*x1559))+((cj3*cj4*x1563))+(((-1.0)*r22*sj4*x1550))+(((-1.0)*cj1*x1548))+((r21*x1556))+(((-1.0)*x1567))+((r20*x1558)));
evalcond[7]=((((-1.0)*cj0*x1568))+(((-1.0)*cj4*x1550*x1551))+((r00*x1558))+((r01*x1556))+((cj3*cj4*x1554))+((x1549*x1552))+(((-1.0)*r02*sj4*x1550)));
evalcond[8]=((((-1.0)*cj4*x1550*x1553))+((cj3*cj4*x1562))+((r11*x1556))+((x1549*x1557))+(((-1.0)*sj0*x1568))+(((-1.0)*r12*sj4*x1550))+((r10*x1558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1569=((1.0)*cj0);
IkReal x1570=(cj4*r02);
IkReal x1571=(cj1*sj4);
IkReal x1572=(cj4*r22);
IkReal x1573=(cj5*r20);
IkReal x1574=(sj1*sj4);
IkReal x1575=(sj5*x1574);
IkReal x1576=((1.0)*cj5*r00);
CheckValue<IkReal> x1577 = IKatan2WithCheck(IkReal(((((-1.0)*x1571*x1576))+(((-1.0)*sj1*x1569*x1572))+((cj1*x1570))+(((-1.0)*r21*x1569*x1575))+((r01*sj5*x1571))+((cj0*x1573*x1574)))),IkReal((((cj0*r21*sj5*x1571))+((cj0*cj1*x1572))+(((-1.0)*x1569*x1571*x1573))+((sj1*x1570))+(((-1.0)*x1574*x1576))+((r01*x1575)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1577.valid){
continue;
}
CheckValue<IkReal> x1578=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1578.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1577.value)+(((1.5707963267949)*(x1578.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1579=IKsin(j2);
IkReal x1580=IKcos(j2);
IkReal x1581=((1.0)*cj3);
IkReal x1582=(cj5*r00);
IkReal x1583=(cj0*cj1);
IkReal x1584=(cj5*r10);
IkReal x1585=(r01*sj5);
IkReal x1586=((1.0)*sj4);
IkReal x1587=(cj5*sj3);
IkReal x1588=(cj1*sj0);
IkReal x1589=(sj3*sj5);
IkReal x1590=(cj5*r20);
IkReal x1591=((1.0)*cj4);
IkReal x1592=((1.93e-6)*sj1);
IkReal x1593=(r11*sj5);
IkReal x1594=(r21*sj5);
IkReal x1595=(cj1*x1580);
IkReal x1596=(cj3*cj4*sj5);
IkReal x1597=((0.4)*x1579);
IkReal x1598=(sj1*x1580);
IkReal x1599=((1.0)*sj1*x1579);
evalcond[0]=((((-1.0)*x1599))+((sj4*x1590))+x1595+(((-1.0)*r22*x1591))+(((-1.0)*x1586*x1594)));
evalcond[1]=((((-1.0)*x1585*x1586))+(((-1.0)*r02*x1591))+((sj4*x1582))+((cj0*x1598))+((x1579*x1583)));
evalcond[2]=(((sj4*x1584))+((sj0*x1598))+((x1579*x1588))+(((-1.0)*x1586*x1593))+(((-1.0)*r12*x1591)));
evalcond[3]=((((9.9e-7)*x1590))+(((-1.93e-6)*cj1))+(((-9.9e-7)*x1594))+(((0.4)*x1595))+(((-1.0)*pz))+(((-1.0)*sj1*x1597))+(((-0.4)*sj1)));
evalcond[4]=((((9.9e-7)*x1582))+(((-1.0)*cj0*x1592))+(((-9.9e-7)*x1585))+(((0.4)*x1583))+((x1583*x1597))+(((-1.0)*px))+(((0.4)*cj0*x1598)));
evalcond[5]=((((9.9e-7)*x1584))+((x1588*x1597))+(((-9.9e-7)*x1593))+(((-1.0)*sj0*x1592))+(((0.4)*x1588))+(((-1.0)*py))+(((0.4)*sj0*x1598)));
evalcond[6]=(((cj3*cj4*x1594))+((r20*x1589))+((r21*x1587))+(((-1.0)*cj1*x1579))+(((-1.0)*r22*sj4*x1581))+(((-1.0)*x1598))+(((-1.0)*cj4*x1581*x1590)));
evalcond[7]=(((cj3*cj4*x1585))+((r01*x1587))+(((-1.0)*cj0*x1599))+((x1580*x1583))+(((-1.0)*r02*sj4*x1581))+(((-1.0)*cj4*x1581*x1582))+((r00*x1589)));
evalcond[8]=(((cj3*cj4*x1593))+(((-1.0)*r12*sj4*x1581))+((r11*x1587))+(((-1.0)*sj0*x1599))+((x1580*x1588))+((r10*x1589))+(((-1.0)*cj4*x1581*x1584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1600=cj0*cj0;
IkReal x1601=(cj0*px);
IkReal x1602=(cj5*r20);
IkReal x1603=(r21*sj5);
IkReal x1604=((0.4)*sj4);
IkReal x1605=((77.2)*sj4);
IkReal x1606=(cj0*cj4*r02);
IkReal x1607=(cj0*r01*sj5);
IkReal x1608=(cj0*cj5*r00);
IkReal x1609=((((-9.9e-7)*x1603))+(((9.9e-7)*x1602))+(((-1.0)*pz))+((x1603*x1604))+(((-1.0)*x1602*x1604))+(((0.4)*cj4*r22)));
IkReal x1610=(x1600*x1609);
CheckValue<IkReal> x1611 = IKatan2WithCheck(IkReal(((((-0.00019107)*x1608))+(((-77.2)*x1606))+(((-1.0)*x1605*x1607))+(((0.00019107)*x1607))+((x1605*x1608))+(((-40000000.0)*x1610))+(((193.0)*x1601)))),IkReal(((((-40000000.0)*x1601))+(((39.6)*x1608))+(((-193.0)*x1610))+(((-39.6)*x1607))+(((16000000.0)*x1606))+(((16000000.0)*sj4*x1607))+(((-16000000.0)*sj4*x1608)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1611.valid){
continue;
}
CheckValue<IkReal> x1612=IKPowWithIntegerCheck(IKsign(x1600),-1);
if(!x1612.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1611.value)+(((-1.5707963267949)*(x1612.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1613=IKsin(j1);
IkReal x1614=sj0*sj0;
IkReal x1615=IKcos(j1);
IkReal x1616=cj0*cj0;
IkReal x1617=((0.4)*cj5);
IkReal x1618=(r21*sj0);
IkReal x1619=((0.4)*sj4);
IkReal x1620=(r21*sj5);
IkReal x1621=(cj3*r22);
IkReal x1622=(r11*sj5);
IkReal x1623=((9.9e-7)*cj0);
IkReal x1624=((0.4)*cj4);
IkReal x1625=(cj3*cj4);
IkReal x1626=(cj5*r00);
IkReal x1627=(r01*sj5);
IkReal x1628=(r20*sj0);
IkReal x1629=(r00*sj4);
IkReal x1630=((9.9e-7)*cj5);
IkReal x1631=(cj0*sj0);
IkReal x1632=((9.9e-7)*sj0);
IkReal x1633=(r10*sj4);
IkReal x1634=((0.4)*x1615);
IkReal x1635=(r20*x1625);
IkReal x1636=((1.93e-6)*x1613);
IkReal x1637=(r10*x1630);
IkReal x1638=((1.93e-6)*x1615);
IkReal x1639=((0.4)*sj3*sj5);
IkReal x1640=((0.4)*x1613);
IkReal x1641=(x1631*x1636);
IkReal x1642=(x1631*x1634);
evalcond[0]=(((r20*x1630))+(((-1.0)*r20*sj4*x1617))+(((-1.0)*x1638))+(((-1.0)*x1640))+(((-1.0)*pz))+(((-9.9e-7)*x1620))+((r22*x1624))+((x1619*x1620)));
evalcond[1]=((((-1.0)*r12*sj0*x1624))+(((-1.0)*x1614*x1634))+(((-1.0)*sj0*x1619*x1622))+((sj0*x1617*x1633))+((x1614*x1636))+((x1622*x1632))+((py*sj0))+(((-1.0)*sj0*x1637)));
evalcond[2]=(((x1616*x1636))+((x1623*x1627))+(((-1.0)*cj0*r02*x1624))+(((-1.0)*x1623*x1626))+(((-1.0)*x1616*x1634))+((cj0*px))+((cj0*x1617*x1629))+(((-1.0)*cj0*x1619*x1627)));
evalcond[3]=(((sj0*x1638))+(((-1.0)*r10*x1617*x1625))+((sj0*x1640))+(((9.9e-7)*sj5*x1618))+((r10*x1639))+(((-1.0)*cj3*r12*x1619))+(((-1.0)*x1628*x1630))+((pz*sj0))+((cj3*x1622*x1624))+((r11*sj3*x1617)));
evalcond[4]=(((x1620*x1623))+(((-1.0)*cj3*r02*x1619))+(((-1.0)*r00*x1617*x1625))+((r00*x1639))+((cj0*x1638))+((cj3*x1624*x1627))+((cj0*x1640))+(((-1.0)*cj5*r20*x1623))+((cj0*pz))+((r01*sj3*x1617)));
evalcond[5]=(((x1617*x1625*x1628))+((sj0*x1636))+((sj0*x1619*x1621))+(((-1.0)*x1637))+(((9.9e-7)*x1622))+(((-1.0)*sj3*x1617*x1618))+py+(((-1.0)*x1628*x1639))+(((-1.0)*cj3*sj5*x1618*x1624))+(((-1.0)*sj0*x1634)));
evalcond[6]=((((-1.0)*cj0*cj3*x1620*x1624))+((cj0*x1619*x1621))+(((-1.0)*cj0*r21*sj3*x1617))+(((-1.0)*cj0*r20*x1639))+(((-9.9e-7)*x1626))+(((9.9e-7)*x1627))+((cj0*x1617*x1635))+px+((cj0*x1636))+(((-1.0)*cj0*x1634)));
evalcond[7]=(((x1627*x1632))+x1641+(((-1.0)*cj0*r12*x1624))+(((-1.0)*x1642))+((cj0*x1617*x1633))+((px*sj0))+(((-1.0)*x1626*x1632))+(((-1.0)*cj0*x1619*x1622)));
evalcond[8]=(((sj0*x1617*x1629))+x1641+((x1622*x1623))+(((-1.0)*sj0*x1619*x1627))+(((-1.0)*r02*sj0*x1624))+(((-1.0)*cj5*r10*x1623))+(((-1.0)*x1642))+((cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1643=(cj4*sj1);
IkReal x1644=(cj1*sj4);
IkReal x1645=((1.0)*cj5);
IkReal x1646=(r21*sj5);
IkReal x1647=(cj1*cj4);
IkReal x1648=(sj1*sj4);
IkReal x1649=(r01*sj4*sj5);
if( IKabs((((r02*x1647))+(((-1.0)*x1646*x1648))+(((-1.0)*r00*x1644*x1645))+((r01*sj5*x1644))+((cj5*r20*x1648))+(((-1.0)*r22*x1643)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1645*x1648))+((r02*x1643))+((x1644*x1646))+((r01*sj5*x1648))+((r22*x1647))+(((-1.0)*r20*x1644*x1645)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x1647))+(((-1.0)*x1646*x1648))+(((-1.0)*r00*x1644*x1645))+((r01*sj5*x1644))+((cj5*r20*x1648))+(((-1.0)*r22*x1643))))+IKsqr(((((-1.0)*r00*x1645*x1648))+((r02*x1643))+((x1644*x1646))+((r01*sj5*x1648))+((r22*x1647))+(((-1.0)*r20*x1644*x1645))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r02*x1647))+(((-1.0)*x1646*x1648))+(((-1.0)*r00*x1644*x1645))+((r01*sj5*x1644))+((cj5*r20*x1648))+(((-1.0)*r22*x1643))), ((((-1.0)*r00*x1645*x1648))+((r02*x1643))+((x1644*x1646))+((r01*sj5*x1648))+((r22*x1647))+(((-1.0)*r20*x1644*x1645))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1650=IKcos(j2);
IkReal x1651=IKsin(j2);
IkReal x1652=((1.0)*cj3);
IkReal x1653=(cj5*r00);
IkReal x1654=((1.0)*cj4);
IkReal x1655=(r01*sj5);
IkReal x1656=((1.0)*sj4);
IkReal x1657=(cj5*sj3);
IkReal x1658=(cj5*r20);
IkReal x1659=(sj3*sj5);
IkReal x1660=(r21*sj5);
IkReal x1661=(cj1*x1650);
IkReal x1662=(cj3*cj4*sj5);
IkReal x1663=(cj1*x1651);
IkReal x1664=(sj1*x1651);
IkReal x1665=(sj1*x1650);
IkReal x1666=((1.0)*x1664);
evalcond[0]=(x1665+x1663+(((-1.0)*x1655*x1656))+(((-1.0)*r02*x1654))+((sj4*x1653)));
evalcond[1]=((((-1.0)*x1656*x1660))+(((-1.0)*r22*x1654))+x1661+(((-1.0)*x1666))+((sj4*x1658)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-0.4)*x1664))+(((9.9e-7)*x1658))+(((-1.0)*pz))+(((-9.9e-7)*x1660))+(((-0.4)*sj1))+(((0.4)*x1661)));
evalcond[3]=((((9.9e-7)*x1653))+(((0.4)*cj1))+(((-1.0)*px))+(((-1.93e-6)*sj1))+(((-9.9e-7)*x1655))+(((0.4)*x1663))+(((0.4)*x1665)));
evalcond[4]=(x1661+(((-1.0)*r02*sj4*x1652))+((r01*x1657))+((r00*x1659))+(((-1.0)*x1666))+(((-1.0)*cj4*x1652*x1653))+((cj3*cj4*x1655)));
evalcond[5]=(((r20*x1659))+(((-1.0)*x1665))+(((-1.0)*x1663))+(((-1.0)*r22*sj4*x1652))+(((-1.0)*cj4*x1652*x1658))+((r21*x1657))+((cj3*cj4*x1660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1667=((1.0)*r01);
IkReal x1668=(sj1*sj4);
IkReal x1669=(cj5*r00);
IkReal x1670=(cj1*cj4);
IkReal x1671=(cj5*r20);
IkReal x1672=(cj1*sj4);
IkReal x1673=(sj5*x1672);
IkReal x1674=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*r21*sj5*x1668))+(((-1.0)*r02*x1670))+(((-1.0)*x1667*x1673))+((x1668*x1671))+((x1669*x1672))+(((-1.0)*r22*x1674)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x1673))+(((-1.0)*r02*x1674))+(((-1.0)*x1671*x1672))+(((-1.0)*sj5*x1667*x1668))+((x1668*x1669))+((r22*x1670)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*sj5*x1668))+(((-1.0)*r02*x1670))+(((-1.0)*x1667*x1673))+((x1668*x1671))+((x1669*x1672))+(((-1.0)*r22*x1674))))+IKsqr((((r21*x1673))+(((-1.0)*r02*x1674))+(((-1.0)*x1671*x1672))+(((-1.0)*sj5*x1667*x1668))+((x1668*x1669))+((r22*x1670))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*sj5*x1668))+(((-1.0)*r02*x1670))+(((-1.0)*x1667*x1673))+((x1668*x1671))+((x1669*x1672))+(((-1.0)*r22*x1674))), (((r21*x1673))+(((-1.0)*r02*x1674))+(((-1.0)*x1671*x1672))+(((-1.0)*sj5*x1667*x1668))+((x1668*x1669))+((r22*x1670))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1675=IKcos(j2);
IkReal x1676=IKsin(j2);
IkReal x1677=((1.0)*cj3);
IkReal x1678=(cj5*r00);
IkReal x1679=((1.0)*cj4);
IkReal x1680=(r01*sj5);
IkReal x1681=((1.0)*sj4);
IkReal x1682=(cj5*sj3);
IkReal x1683=(cj5*r20);
IkReal x1684=((1.0)*sj1);
IkReal x1685=(sj3*sj5);
IkReal x1686=((0.4)*sj1);
IkReal x1687=(r21*sj5);
IkReal x1688=(cj1*x1675);
IkReal x1689=(cj3*cj4*sj5);
IkReal x1690=((0.4)*x1676);
IkReal x1691=(x1675*x1684);
IkReal x1692=((1.0)*cj1*x1676);
IkReal x1693=(x1692+x1691);
evalcond[0]=((((-1.0)*x1681*x1687))+x1688+(((-1.0)*x1676*x1684))+((sj4*x1683))+(((-1.0)*r22*x1679)));
evalcond[1]=((((-1.0)*x1693))+((sj4*x1678))+(((-1.0)*r02*x1679))+(((-1.0)*x1680*x1681)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-1.0)*x1686))+(((-9.9e-7)*x1687))+(((9.9e-7)*x1683))+(((-1.0)*x1676*x1686))+(((-1.0)*pz))+(((0.4)*x1688)));
evalcond[3]=((((9.9e-7)*x1678))+(((-1.0)*cj1*x1690))+(((-9.9e-7)*x1680))+(((-1.0)*x1675*x1686))+(((1.93e-6)*sj1))+(((-1.0)*px))+(((-0.4)*cj1)));
evalcond[4]=(((cj3*cj4*x1680))+((sj1*x1676))+((r00*x1685))+((r01*x1682))+(((-1.0)*x1688))+(((-1.0)*cj4*x1677*x1678))+(((-1.0)*r02*sj4*x1677)));
evalcond[5]=(((cj3*cj4*x1687))+(((-1.0)*x1693))+(((-1.0)*r22*sj4*x1677))+((r21*x1682))+(((-1.0)*cj4*x1677*x1683))+((r20*x1685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1694=(cj4*r12);
IkReal x1695=(cj4*r22);
IkReal x1696=(cj1*sj4);
IkReal x1697=(r11*sj5);
IkReal x1698=(r21*sj5);
IkReal x1699=((1.0)*sj1);
IkReal x1700=(sj1*sj4);
IkReal x1701=(cj5*r20);
IkReal x1702=((1.0)*cj5*r10);
if( IKabs(((((-1.0)*sj4*x1698*x1699))+((x1700*x1701))+(((-1.0)*x1696*x1702))+((x1696*x1697))+(((-1.0)*x1695*x1699))+((cj1*x1694)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1697*x1700))+(((-1.0)*cj5*r10*sj4*x1699))+((sj1*x1694))+(((-1.0)*x1696*x1701))+((x1696*x1698))+((cj1*x1695)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x1698*x1699))+((x1700*x1701))+(((-1.0)*x1696*x1702))+((x1696*x1697))+(((-1.0)*x1695*x1699))+((cj1*x1694))))+IKsqr((((x1697*x1700))+(((-1.0)*cj5*r10*sj4*x1699))+((sj1*x1694))+(((-1.0)*x1696*x1701))+((x1696*x1698))+((cj1*x1695))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj4*x1698*x1699))+((x1700*x1701))+(((-1.0)*x1696*x1702))+((x1696*x1697))+(((-1.0)*x1695*x1699))+((cj1*x1694))), (((x1697*x1700))+(((-1.0)*cj5*r10*sj4*x1699))+((sj1*x1694))+(((-1.0)*x1696*x1701))+((x1696*x1698))+((cj1*x1695))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1703=IKcos(j2);
IkReal x1704=IKsin(j2);
IkReal x1705=(cj3*cj4);
IkReal x1706=(r21*sj5);
IkReal x1707=((1.0)*r22);
IkReal x1708=(cj5*r10);
IkReal x1709=(cj5*r20);
IkReal x1710=(cj5*sj3);
IkReal x1711=(cj3*sj4);
IkReal x1712=(r11*sj5);
IkReal x1713=((1.0)*sj4);
IkReal x1714=((1.0)*r12);
IkReal x1715=(sj3*sj5);
IkReal x1716=(cj1*x1703);
IkReal x1717=(cj1*x1704);
IkReal x1718=(sj1*x1704);
IkReal x1719=(sj1*x1703);
IkReal x1720=((1.0)*x1718);
evalcond[0]=(((sj4*x1708))+(((-1.0)*x1712*x1713))+x1717+x1719+(((-1.0)*cj4*x1714)));
evalcond[1]=(((sj4*x1709))+x1716+(((-1.0)*cj4*x1707))+(((-1.0)*x1706*x1713))+(((-1.0)*x1720)));
evalcond[2]=((((-1.93e-6)*cj1))+(((9.9e-7)*x1709))+(((-0.4)*x1718))+(((-1.0)*pz))+(((-9.9e-7)*x1706))+(((-0.4)*sj1))+(((0.4)*x1716)));
evalcond[3]=((((0.4)*cj1))+(((9.9e-7)*x1708))+(((-1.0)*py))+(((-1.93e-6)*sj1))+(((-9.9e-7)*x1712))+(((0.4)*x1717))+(((0.4)*x1719)));
evalcond[4]=(((r11*x1710))+x1716+(((-1.0)*x1711*x1714))+((r10*x1715))+(((-1.0)*x1705*x1708))+((x1705*x1712))+(((-1.0)*x1720)));
evalcond[5]=((((-1.0)*x1707*x1711))+((r20*x1715))+(((-1.0)*x1717))+(((-1.0)*x1719))+((x1705*x1706))+(((-1.0)*x1705*x1709))+((r21*x1710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1721=((1.0)*cj1);
IkReal x1722=(sj4*sj5);
IkReal x1723=(cj5*sj4);
IkReal x1724=((1.0)*sj1);
IkReal x1725=(sj1*x1723);
IkReal x1726=(cj4*x1724);
if( IKabs(((((-1.0)*r22*x1726))+(((-1.0)*cj4*r12*x1721))+((cj1*r10*x1723))+(((-1.0)*r21*x1722*x1724))+(((-1.0)*r11*x1721*x1722))+((r20*x1725)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+(((-1.0)*r11*x1722*x1724))+((r10*x1725))+(((-1.0)*r12*x1726))+((cj1*r21*x1722))+(((-1.0)*r20*x1721*x1723)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x1726))+(((-1.0)*cj4*r12*x1721))+((cj1*r10*x1723))+(((-1.0)*r21*x1722*x1724))+(((-1.0)*r11*x1721*x1722))+((r20*x1725))))+IKsqr((((cj1*cj4*r22))+(((-1.0)*r11*x1722*x1724))+((r10*x1725))+(((-1.0)*r12*x1726))+((cj1*r21*x1722))+(((-1.0)*r20*x1721*x1723))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x1726))+(((-1.0)*cj4*r12*x1721))+((cj1*r10*x1723))+(((-1.0)*r21*x1722*x1724))+(((-1.0)*r11*x1721*x1722))+((r20*x1725))), (((cj1*cj4*r22))+(((-1.0)*r11*x1722*x1724))+((r10*x1725))+(((-1.0)*r12*x1726))+((cj1*r21*x1722))+(((-1.0)*r20*x1721*x1723))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1727=IKcos(j2);
IkReal x1728=IKsin(j2);
IkReal x1729=(cj3*cj4);
IkReal x1730=(r21*sj5);
IkReal x1731=((1.0)*r22);
IkReal x1732=(cj5*r10);
IkReal x1733=(cj5*r20);
IkReal x1734=(cj5*sj3);
IkReal x1735=((1.0)*sj1);
IkReal x1736=(cj3*sj4);
IkReal x1737=(sj3*sj5);
IkReal x1738=(r11*sj5);
IkReal x1739=((1.0)*sj4);
IkReal x1740=((1.0)*r12);
IkReal x1741=((0.4)*sj1);
IkReal x1742=(cj1*x1727);
IkReal x1743=((0.4)*x1728);
IkReal x1744=(x1727*x1735);
IkReal x1745=((1.0)*cj1*x1728);
IkReal x1746=(x1744+x1745);
evalcond[0]=((((-1.0)*x1728*x1735))+x1742+(((-1.0)*x1730*x1739))+((sj4*x1733))+(((-1.0)*cj4*x1731)));
evalcond[1]=((((-1.0)*cj4*x1740))+(((-1.0)*x1738*x1739))+((sj4*x1732))+(((-1.0)*x1746)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x1730))+(((-1.0)*x1728*x1741))+(((-1.0)*pz))+(((-1.0)*x1741))+(((9.9e-7)*x1733))+(((0.4)*x1742)));
evalcond[3]=((((-9.9e-7)*x1738))+(((1.93e-6)*sj1))+(((-1.0)*py))+(((-1.0)*cj1*x1743))+(((9.9e-7)*x1732))+(((-1.0)*x1727*x1741))+(((-0.4)*cj1)));
evalcond[4]=(((r10*x1737))+(((-1.0)*x1736*x1740))+((x1729*x1738))+((sj1*x1728))+(((-1.0)*x1729*x1732))+(((-1.0)*x1742))+((r11*x1734)));
evalcond[5]=((((-1.0)*x1731*x1736))+((r21*x1734))+((x1729*x1730))+(((-1.0)*x1729*x1733))+(((-1.0)*x1746))+((r20*x1737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1747=((1.0)*sj1);
IkReal x1748=(cj5*sj4);
IkReal x1749=(r20*sj0);
IkReal x1750=((1.0)*cj1);
IkReal x1751=(cj4*r12);
IkReal x1752=(cj4*r22*sj0);
IkReal x1753=(r11*sj4*sj5);
IkReal x1754=(r21*sj0*sj4*sj5);
CheckValue<IkReal> x1755=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1755.valid){
continue;
}
CheckValue<IkReal> x1756 = IKatan2WithCheck(IkReal((((cj1*x1753))+((cj1*x1751))+(((-1.0)*x1747*x1754))+(((-1.0)*x1747*x1752))+((sj1*x1748*x1749))+(((-1.0)*r10*x1748*x1750)))),IkReal(((((-1.0)*r10*x1747*x1748))+((cj1*x1754))+((cj1*x1752))+(((-1.0)*x1748*x1749*x1750))+((sj1*x1751))+((sj1*x1753)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1756.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1755.value)))+(x1756.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1757=IKsin(j2);
IkReal x1758=IKcos(j2);
IkReal x1759=((1.0)*cj3);
IkReal x1760=(cj5*r00);
IkReal x1761=(cj0*cj1);
IkReal x1762=(cj5*r10);
IkReal x1763=(r01*sj5);
IkReal x1764=((1.0)*sj4);
IkReal x1765=(cj5*sj3);
IkReal x1766=(cj1*sj0);
IkReal x1767=(sj3*sj5);
IkReal x1768=(cj5*r20);
IkReal x1769=((1.0)*cj4);
IkReal x1770=((1.93e-6)*sj1);
IkReal x1771=(r11*sj5);
IkReal x1772=(r21*sj5);
IkReal x1773=(cj1*x1758);
IkReal x1774=(cj3*cj4*sj5);
IkReal x1775=((0.4)*x1757);
IkReal x1776=(sj1*x1758);
IkReal x1777=((1.0)*sj1*x1757);
evalcond[0]=(x1773+(((-1.0)*x1777))+(((-1.0)*x1764*x1772))+(((-1.0)*r22*x1769))+((sj4*x1768)));
evalcond[1]=((((-1.0)*r02*x1769))+((cj0*x1776))+(((-1.0)*x1763*x1764))+((x1757*x1761))+((sj4*x1760)));
evalcond[2]=(((x1757*x1766))+(((-1.0)*r12*x1769))+(((-1.0)*x1764*x1771))+((sj4*x1762))+((sj0*x1776)));
evalcond[3]=((((-1.93e-6)*cj1))+(((0.4)*x1773))+(((-1.0)*sj1*x1775))+(((9.9e-7)*x1768))+(((-1.0)*pz))+(((-9.9e-7)*x1772))+(((-0.4)*sj1)));
evalcond[4]=((((0.4)*x1761))+((x1761*x1775))+(((0.4)*cj0*x1776))+(((9.9e-7)*x1760))+(((-9.9e-7)*x1763))+(((-1.0)*px))+(((-1.0)*cj0*x1770)));
evalcond[5]=((((0.4)*x1766))+(((0.4)*sj0*x1776))+(((9.9e-7)*x1762))+((x1766*x1775))+(((-1.0)*py))+(((-1.0)*sj0*x1770))+(((-9.9e-7)*x1771)));
evalcond[6]=(((r21*x1765))+((r20*x1767))+(((-1.0)*cj1*x1757))+(((-1.0)*x1776))+(((-1.0)*r22*sj4*x1759))+(((-1.0)*cj4*x1759*x1768))+((cj3*cj4*x1772)));
evalcond[7]=(((cj3*cj4*x1763))+(((-1.0)*r02*sj4*x1759))+((r01*x1765))+((r00*x1767))+((x1758*x1761))+(((-1.0)*cj4*x1759*x1760))+(((-1.0)*cj0*x1777)));
evalcond[8]=(((r11*x1765))+(((-1.0)*r12*sj4*x1759))+((r10*x1767))+((x1758*x1766))+(((-1.0)*sj0*x1777))+(((-1.0)*cj4*x1759*x1762))+((cj3*cj4*x1771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1778=((1.0)*cj0);
IkReal x1779=(cj4*r02);
IkReal x1780=(cj1*sj4);
IkReal x1781=(cj4*r22);
IkReal x1782=(cj5*r20);
IkReal x1783=(sj1*sj4);
IkReal x1784=(sj5*x1783);
IkReal x1785=((1.0)*cj5*r00);
CheckValue<IkReal> x1786=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1786.valid){
continue;
}
CheckValue<IkReal> x1787 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x1778*x1784))+((cj0*x1782*x1783))+(((-1.0)*sj1*x1778*x1781))+((r01*sj5*x1780))+(((-1.0)*x1780*x1785))+((cj1*x1779)))),IkReal((((cj0*r21*sj5*x1780))+(((-1.0)*x1783*x1785))+(((-1.0)*x1778*x1780*x1782))+((cj0*cj1*x1781))+((sj1*x1779))+((r01*x1784)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1787.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1786.value)))+(x1787.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1788=IKsin(j2);
IkReal x1789=IKcos(j2);
IkReal x1790=((1.0)*cj3);
IkReal x1791=(cj5*r00);
IkReal x1792=(cj0*cj1);
IkReal x1793=(cj5*r10);
IkReal x1794=(r01*sj5);
IkReal x1795=((1.0)*sj4);
IkReal x1796=(cj5*sj3);
IkReal x1797=(cj1*sj0);
IkReal x1798=(sj3*sj5);
IkReal x1799=(cj5*r20);
IkReal x1800=((1.0)*cj4);
IkReal x1801=((1.93e-6)*sj1);
IkReal x1802=(r11*sj5);
IkReal x1803=(r21*sj5);
IkReal x1804=(cj1*x1789);
IkReal x1805=(cj3*cj4*sj5);
IkReal x1806=((0.4)*x1788);
IkReal x1807=(sj1*x1789);
IkReal x1808=((1.0)*sj1*x1788);
evalcond[0]=((((-1.0)*x1795*x1803))+(((-1.0)*x1808))+x1804+((sj4*x1799))+(((-1.0)*r22*x1800)));
evalcond[1]=(((cj0*x1807))+(((-1.0)*r02*x1800))+((sj4*x1791))+((x1788*x1792))+(((-1.0)*x1794*x1795)));
evalcond[2]=(((sj0*x1807))+(((-1.0)*x1795*x1802))+((sj4*x1793))+((x1788*x1797))+(((-1.0)*r12*x1800)));
evalcond[3]=((((-1.93e-6)*cj1))+(((-1.0)*pz))+(((0.4)*x1804))+(((-1.0)*sj1*x1806))+(((9.9e-7)*x1799))+(((-0.4)*sj1))+(((-9.9e-7)*x1803)));
evalcond[4]=((((-1.0)*cj0*x1801))+(((-9.9e-7)*x1794))+((x1792*x1806))+(((-1.0)*px))+(((0.4)*x1792))+(((9.9e-7)*x1791))+(((0.4)*cj0*x1807)));
evalcond[5]=((((-1.0)*sj0*x1801))+((x1797*x1806))+(((-1.0)*py))+(((0.4)*x1797))+(((9.9e-7)*x1793))+(((0.4)*sj0*x1807))+(((-9.9e-7)*x1802)));
evalcond[6]=(((r21*x1796))+(((-1.0)*cj1*x1788))+((cj3*cj4*x1803))+(((-1.0)*r22*sj4*x1790))+(((-1.0)*cj4*x1790*x1799))+((r20*x1798))+(((-1.0)*x1807)));
evalcond[7]=(((r00*x1798))+(((-1.0)*cj0*x1808))+((cj3*cj4*x1794))+((x1789*x1792))+(((-1.0)*r02*sj4*x1790))+(((-1.0)*cj4*x1790*x1791))+((r01*x1796)));
evalcond[8]=(((r10*x1798))+(((-1.0)*sj0*x1808))+(((-1.0)*r12*sj4*x1790))+((x1789*x1797))+((cj3*cj4*x1802))+((r11*x1796))+(((-1.0)*cj4*x1790*x1793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1809=sj0*sj0;
IkReal x1810=(py*sj0);
IkReal x1811=((77.2)*sj0);
IkReal x1812=(sj4*sj5);
IkReal x1813=(cj4*r12);
IkReal x1814=((16000000.0)*sj0);
IkReal x1815=(cj5*r20);
IkReal x1816=(cj5*r10*sj0);
IkReal x1817=(r11*sj0*sj5);
IkReal x1818=((((-9.9e-7)*r21*sj5))+(((9.9e-7)*x1815))+(((-1.0)*pz))+(((0.4)*r21*x1812))+(((-0.4)*sj4*x1815))+(((0.4)*cj4*r22)));
IkReal x1819=(x1809*x1818);
CheckValue<IkReal> x1820 = IKatan2WithCheck(IkReal(((((-0.00019107)*x1816))+(((-1.0)*r11*x1811*x1812))+(((193.0)*x1810))+(((-40000000.0)*x1819))+(((-1.0)*x1811*x1813))+((cj5*r10*sj4*x1811))+(((0.00019107)*x1817)))),IkReal(((((-40000000.0)*x1810))+((x1813*x1814))+(((-193.0)*x1819))+((r11*x1812*x1814))+(((39.6)*x1816))+(((-16000000.0)*sj4*x1816))+(((-39.6)*x1817)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1820.valid){
continue;
}
CheckValue<IkReal> x1821=IKPowWithIntegerCheck(IKsign(x1809),-1);
if(!x1821.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1820.value)+(((-1.5707963267949)*(x1821.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1822=IKsin(j1);
IkReal x1823=sj0*sj0;
IkReal x1824=IKcos(j1);
IkReal x1825=cj0*cj0;
IkReal x1826=((0.4)*cj5);
IkReal x1827=(r21*sj0);
IkReal x1828=((0.4)*sj4);
IkReal x1829=(r21*sj5);
IkReal x1830=(cj3*r22);
IkReal x1831=(r11*sj5);
IkReal x1832=((9.9e-7)*cj0);
IkReal x1833=((0.4)*cj4);
IkReal x1834=(cj3*cj4);
IkReal x1835=(cj5*r00);
IkReal x1836=(r01*sj5);
IkReal x1837=(r20*sj0);
IkReal x1838=(r00*sj4);
IkReal x1839=((9.9e-7)*cj5);
IkReal x1840=(cj0*sj0);
IkReal x1841=((9.9e-7)*sj0);
IkReal x1842=(r10*sj4);
IkReal x1843=((0.4)*x1824);
IkReal x1844=(r20*x1834);
IkReal x1845=((1.93e-6)*x1822);
IkReal x1846=(r10*x1839);
IkReal x1847=((1.93e-6)*x1824);
IkReal x1848=((0.4)*sj3*sj5);
IkReal x1849=((0.4)*x1822);
IkReal x1850=(x1840*x1845);
IkReal x1851=(x1840*x1843);
evalcond[0]=((((-1.0)*x1849))+(((-1.0)*x1847))+((r22*x1833))+(((-9.9e-7)*x1829))+(((-1.0)*r20*sj4*x1826))+(((-1.0)*pz))+((x1828*x1829))+((r20*x1839)));
evalcond[1]=((((-1.0)*sj0*x1828*x1831))+(((-1.0)*x1823*x1843))+((sj0*x1826*x1842))+((x1831*x1841))+(((-1.0)*sj0*x1846))+((py*sj0))+(((-1.0)*r12*sj0*x1833))+((x1823*x1845)));
evalcond[2]=((((-1.0)*x1832*x1835))+((x1825*x1845))+(((-1.0)*cj0*r02*x1833))+(((-1.0)*cj0*x1828*x1836))+(((-1.0)*x1825*x1843))+((x1832*x1836))+((cj0*x1826*x1838))+((cj0*px)));
evalcond[3]=((((-1.0)*r10*x1826*x1834))+(((-1.0)*x1837*x1839))+(((-1.0)*cj3*r12*x1828))+((r11*sj3*x1826))+((sj0*x1849))+((sj0*x1847))+((r10*x1848))+((pz*sj0))+(((9.9e-7)*sj5*x1827))+((cj3*x1831*x1833)));
evalcond[4]=(((cj0*x1849))+((cj0*x1847))+((cj3*x1833*x1836))+((r01*sj3*x1826))+((x1829*x1832))+(((-1.0)*cj5*r20*x1832))+((r00*x1848))+(((-1.0)*r00*x1826*x1834))+((cj0*pz))+(((-1.0)*cj3*r02*x1828)));
evalcond[5]=((((-1.0)*x1846))+(((-1.0)*cj3*sj5*x1827*x1833))+((sj0*x1845))+(((-1.0)*sj3*x1826*x1827))+(((-1.0)*sj0*x1843))+py+((x1826*x1834*x1837))+(((-1.0)*x1837*x1848))+((sj0*x1828*x1830))+(((9.9e-7)*x1831)));
evalcond[6]=((((-1.0)*cj0*r21*sj3*x1826))+((cj0*x1845))+(((-1.0)*cj0*r20*x1848))+(((-1.0)*cj0*cj3*x1829*x1833))+((cj0*x1828*x1830))+px+(((-9.9e-7)*x1835))+((cj0*x1826*x1844))+(((9.9e-7)*x1836))+(((-1.0)*cj0*x1843)));
evalcond[7]=(((x1836*x1841))+(((-1.0)*cj0*r12*x1833))+(((-1.0)*cj0*x1828*x1831))+x1850+(((-1.0)*x1835*x1841))+((px*sj0))+((cj0*x1826*x1842))+(((-1.0)*x1851)));
evalcond[8]=(((sj0*x1826*x1838))+(((-1.0)*sj0*x1828*x1836))+(((-1.0)*cj5*r10*x1832))+((x1831*x1832))+x1850+(((-1.0)*r02*sj0*x1833))+((cj0*py))+(((-1.0)*x1851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1852=(cj4*sj1);
IkReal x1853=(cj1*sj4);
IkReal x1854=((1.0)*cj5);
IkReal x1855=(r21*sj5);
IkReal x1856=(cj1*cj4);
IkReal x1857=(sj1*sj4);
IkReal x1858=(r01*sj4*sj5);
if( IKabs((((r01*sj5*x1853))+(((-1.0)*x1855*x1857))+((r02*x1856))+((cj5*r20*x1857))+(((-1.0)*r00*x1853*x1854))+(((-1.0)*r22*x1852)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj5*x1857))+(((-1.0)*r20*x1853*x1854))+((r22*x1856))+((r02*x1852))+((x1853*x1855))+(((-1.0)*r00*x1854*x1857)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj5*x1853))+(((-1.0)*x1855*x1857))+((r02*x1856))+((cj5*r20*x1857))+(((-1.0)*r00*x1853*x1854))+(((-1.0)*r22*x1852))))+IKsqr((((r01*sj5*x1857))+(((-1.0)*r20*x1853*x1854))+((r22*x1856))+((r02*x1852))+((x1853*x1855))+(((-1.0)*r00*x1854*x1857))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r01*sj5*x1853))+(((-1.0)*x1855*x1857))+((r02*x1856))+((cj5*r20*x1857))+(((-1.0)*r00*x1853*x1854))+(((-1.0)*r22*x1852))), (((r01*sj5*x1857))+(((-1.0)*r20*x1853*x1854))+((r22*x1856))+((r02*x1852))+((x1853*x1855))+(((-1.0)*r00*x1854*x1857))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1859=IKcos(j2);
IkReal x1860=IKsin(j2);
IkReal x1861=((1.0)*cj3);
IkReal x1862=(cj5*r00);
IkReal x1863=((1.0)*cj4);
IkReal x1864=(r01*sj5);
IkReal x1865=((1.0)*sj4);
IkReal x1866=(cj5*sj3);
IkReal x1867=(cj5*r20);
IkReal x1868=(sj3*sj5);
IkReal x1869=(r21*sj5);
IkReal x1870=(cj1*x1859);
IkReal x1871=(cj3*cj4*sj5);
IkReal x1872=(cj1*x1860);
IkReal x1873=(sj1*x1860);
IkReal x1874=(sj1*x1859);
IkReal x1875=((1.0)*x1873);
evalcond[0]=(((sj4*x1862))+(((-1.0)*x1864*x1865))+(((-1.0)*r02*x1863))+x1874+x1872);
evalcond[1]=(((sj4*x1867))+(((-1.0)*x1875))+(((-1.0)*x1865*x1869))+x1870+(((-1.0)*r22*x1863)));
evalcond[2]=((((-9.9e-7)*x1869))+(((-1.93e-6)*cj1))+(((9.9e-7)*x1867))+(((-1.0)*pz))+(((-0.4)*x1873))+(((0.4)*x1870))+(((-0.4)*sj1)));
evalcond[3]=((((-9.9e-7)*x1864))+(((0.4)*cj1))+(((9.9e-7)*x1862))+(((-1.0)*px))+(((-1.93e-6)*sj1))+(((0.4)*x1872))+(((0.4)*x1874)));
evalcond[4]=((((-1.0)*x1875))+(((-1.0)*r02*sj4*x1861))+(((-1.0)*cj4*x1861*x1862))+x1870+((r01*x1866))+((cj3*cj4*x1864))+((r00*x1868)));
evalcond[5]=((((-1.0)*r22*sj4*x1861))+(((-1.0)*cj4*x1861*x1867))+((r20*x1868))+(((-1.0)*x1872))+(((-1.0)*x1874))+((cj3*cj4*x1869))+((r21*x1866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1876=((1.0)*r01);
IkReal x1877=(sj1*sj4);
IkReal x1878=(cj5*r00);
IkReal x1879=(cj1*cj4);
IkReal x1880=(cj5*r20);
IkReal x1881=(cj1*sj4);
IkReal x1882=(sj5*x1881);
IkReal x1883=((1.0)*cj4*sj1);
if( IKabs((((x1877*x1880))+(((-1.0)*x1876*x1882))+((x1878*x1881))+(((-1.0)*r22*x1883))+(((-1.0)*r21*sj5*x1877))+(((-1.0)*r02*x1879)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x1882))+((r22*x1879))+((x1877*x1878))+(((-1.0)*r02*x1883))+(((-1.0)*x1880*x1881))+(((-1.0)*sj5*x1876*x1877)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1877*x1880))+(((-1.0)*x1876*x1882))+((x1878*x1881))+(((-1.0)*r22*x1883))+(((-1.0)*r21*sj5*x1877))+(((-1.0)*r02*x1879))))+IKsqr((((r21*x1882))+((r22*x1879))+((x1877*x1878))+(((-1.0)*r02*x1883))+(((-1.0)*x1880*x1881))+(((-1.0)*sj5*x1876*x1877))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1877*x1880))+(((-1.0)*x1876*x1882))+((x1878*x1881))+(((-1.0)*r22*x1883))+(((-1.0)*r21*sj5*x1877))+(((-1.0)*r02*x1879))), (((r21*x1882))+((r22*x1879))+((x1877*x1878))+(((-1.0)*r02*x1883))+(((-1.0)*x1880*x1881))+(((-1.0)*sj5*x1876*x1877))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1884=IKcos(j2);
IkReal x1885=IKsin(j2);
IkReal x1886=((1.0)*cj3);
IkReal x1887=(cj5*r00);
IkReal x1888=((1.0)*cj4);
IkReal x1889=(r01*sj5);
IkReal x1890=((1.0)*sj4);
IkReal x1891=(cj5*sj3);
IkReal x1892=(cj5*r20);
IkReal x1893=((1.0)*sj1);
IkReal x1894=(sj3*sj5);
IkReal x1895=((0.4)*sj1);
IkReal x1896=(r21*sj5);
IkReal x1897=(cj1*x1884);
IkReal x1898=(cj3*cj4*sj5);
IkReal x1899=((0.4)*x1885);
IkReal x1900=(x1884*x1893);
IkReal x1901=((1.0)*cj1*x1885);
IkReal x1902=(x1900+x1901);
evalcond[0]=((((-1.0)*r22*x1888))+(((-1.0)*x1890*x1896))+(((-1.0)*x1885*x1893))+((sj4*x1892))+x1897);
evalcond[1]=((((-1.0)*r02*x1888))+((sj4*x1887))+(((-1.0)*x1889*x1890))+(((-1.0)*x1902)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x1896))+(((-1.0)*pz))+(((-1.0)*x1885*x1895))+(((9.9e-7)*x1892))+(((-1.0)*x1895))+(((0.4)*x1897)));
evalcond[3]=((((-9.9e-7)*x1889))+(((-1.0)*cj1*x1899))+(((1.93e-6)*sj1))+(((9.9e-7)*x1887))+(((-1.0)*px))+(((-1.0)*x1884*x1895))+(((-0.4)*cj1)));
evalcond[4]=(((cj3*cj4*x1889))+((r01*x1891))+((r00*x1894))+(((-1.0)*cj4*x1886*x1887))+(((-1.0)*x1897))+(((-1.0)*r02*sj4*x1886))+((sj1*x1885)));
evalcond[5]=(((r20*x1894))+(((-1.0)*cj4*x1886*x1892))+(((-1.0)*r22*sj4*x1886))+((r21*x1891))+((cj3*cj4*x1896))+(((-1.0)*x1902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1903=(cj4*r12);
IkReal x1904=(cj4*r22);
IkReal x1905=(cj1*sj4);
IkReal x1906=(r11*sj5);
IkReal x1907=(r21*sj5);
IkReal x1908=((1.0)*sj1);
IkReal x1909=(sj1*sj4);
IkReal x1910=(cj5*r20);
IkReal x1911=((1.0)*cj5*r10);
if( IKabs((((x1905*x1906))+((cj1*x1903))+(((-1.0)*x1905*x1911))+(((-1.0)*sj4*x1907*x1908))+(((-1.0)*x1904*x1908))+((x1909*x1910)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1905*x1910))+((x1905*x1907))+((cj1*x1904))+(((-1.0)*cj5*r10*sj4*x1908))+((x1906*x1909))+((sj1*x1903)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1905*x1906))+((cj1*x1903))+(((-1.0)*x1905*x1911))+(((-1.0)*sj4*x1907*x1908))+(((-1.0)*x1904*x1908))+((x1909*x1910))))+IKsqr(((((-1.0)*x1905*x1910))+((x1905*x1907))+((cj1*x1904))+(((-1.0)*cj5*r10*sj4*x1908))+((x1906*x1909))+((sj1*x1903))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1905*x1906))+((cj1*x1903))+(((-1.0)*x1905*x1911))+(((-1.0)*sj4*x1907*x1908))+(((-1.0)*x1904*x1908))+((x1909*x1910))), ((((-1.0)*x1905*x1910))+((x1905*x1907))+((cj1*x1904))+(((-1.0)*cj5*r10*sj4*x1908))+((x1906*x1909))+((sj1*x1903))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1912=IKcos(j2);
IkReal x1913=IKsin(j2);
IkReal x1914=(cj3*cj4);
IkReal x1915=(r21*sj5);
IkReal x1916=((1.0)*r22);
IkReal x1917=(cj5*r10);
IkReal x1918=(cj5*r20);
IkReal x1919=(cj5*sj3);
IkReal x1920=(cj3*sj4);
IkReal x1921=(r11*sj5);
IkReal x1922=((1.0)*sj4);
IkReal x1923=((1.0)*r12);
IkReal x1924=(sj3*sj5);
IkReal x1925=(cj1*x1912);
IkReal x1926=(cj1*x1913);
IkReal x1927=(sj1*x1913);
IkReal x1928=(sj1*x1912);
IkReal x1929=((1.0)*x1927);
evalcond[0]=(((sj4*x1917))+(((-1.0)*cj4*x1923))+x1926+x1928+(((-1.0)*x1921*x1922)));
evalcond[1]=((((-1.0)*cj4*x1916))+((sj4*x1918))+(((-1.0)*x1915*x1922))+(((-1.0)*x1929))+x1925);
evalcond[2]=((((-0.4)*x1927))+(((9.9e-7)*x1918))+(((-1.93e-6)*cj1))+(((0.4)*x1925))+(((-1.0)*pz))+(((-9.9e-7)*x1915))+(((-0.4)*sj1)));
evalcond[3]=((((9.9e-7)*x1917))+(((-9.9e-7)*x1921))+(((0.4)*cj1))+(((0.4)*x1928))+(((0.4)*x1926))+(((-1.0)*py))+(((-1.93e-6)*sj1)));
evalcond[4]=(((r11*x1919))+(((-1.0)*x1929))+x1925+((x1914*x1921))+(((-1.0)*x1914*x1917))+((r10*x1924))+(((-1.0)*x1920*x1923)));
evalcond[5]=((((-1.0)*x1916*x1920))+(((-1.0)*x1928))+(((-1.0)*x1926))+((x1914*x1915))+((r20*x1924))+((r21*x1919))+(((-1.0)*x1914*x1918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1930=((1.0)*cj1);
IkReal x1931=(sj4*sj5);
IkReal x1932=(cj5*sj4);
IkReal x1933=((1.0)*sj1);
IkReal x1934=(sj1*x1932);
IkReal x1935=(cj4*x1933);
if( IKabs(((((-1.0)*r21*x1931*x1933))+(((-1.0)*r22*x1935))+((cj1*r10*x1932))+(((-1.0)*r11*x1930*x1931))+((r20*x1934))+(((-1.0)*cj4*r12*x1930)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+((cj1*r21*x1931))+(((-1.0)*r12*x1935))+(((-1.0)*r20*x1930*x1932))+(((-1.0)*r11*x1931*x1933))+((r10*x1934)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x1931*x1933))+(((-1.0)*r22*x1935))+((cj1*r10*x1932))+(((-1.0)*r11*x1930*x1931))+((r20*x1934))+(((-1.0)*cj4*r12*x1930))))+IKsqr((((cj1*cj4*r22))+((cj1*r21*x1931))+(((-1.0)*r12*x1935))+(((-1.0)*r20*x1930*x1932))+(((-1.0)*r11*x1931*x1933))+((r10*x1934))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x1931*x1933))+(((-1.0)*r22*x1935))+((cj1*r10*x1932))+(((-1.0)*r11*x1930*x1931))+((r20*x1934))+(((-1.0)*cj4*r12*x1930))), (((cj1*cj4*r22))+((cj1*r21*x1931))+(((-1.0)*r12*x1935))+(((-1.0)*r20*x1930*x1932))+(((-1.0)*r11*x1931*x1933))+((r10*x1934))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1936=IKcos(j2);
IkReal x1937=IKsin(j2);
IkReal x1938=(cj3*cj4);
IkReal x1939=(r21*sj5);
IkReal x1940=((1.0)*r22);
IkReal x1941=(cj5*r10);
IkReal x1942=(cj5*r20);
IkReal x1943=(cj5*sj3);
IkReal x1944=((1.0)*sj1);
IkReal x1945=(cj3*sj4);
IkReal x1946=(sj3*sj5);
IkReal x1947=(r11*sj5);
IkReal x1948=((1.0)*sj4);
IkReal x1949=((1.0)*r12);
IkReal x1950=((0.4)*sj1);
IkReal x1951=(cj1*x1936);
IkReal x1952=((0.4)*x1937);
IkReal x1953=(x1936*x1944);
IkReal x1954=((1.0)*cj1*x1937);
IkReal x1955=(x1954+x1953);
evalcond[0]=((((-1.0)*x1937*x1944))+(((-1.0)*cj4*x1940))+x1951+((sj4*x1942))+(((-1.0)*x1939*x1948)));
evalcond[1]=((((-1.0)*x1955))+(((-1.0)*cj4*x1949))+(((-1.0)*x1947*x1948))+((sj4*x1941)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-1.0)*x1937*x1950))+(((-1.0)*x1950))+(((-1.0)*pz))+(((-9.9e-7)*x1939))+(((0.4)*x1951))+(((9.9e-7)*x1942)));
evalcond[3]=((((1.93e-6)*sj1))+(((-1.0)*py))+(((-1.0)*x1936*x1950))+(((-9.9e-7)*x1947))+(((9.9e-7)*x1941))+(((-0.4)*cj1))+(((-1.0)*cj1*x1952)));
evalcond[4]=(((x1938*x1947))+((r11*x1943))+(((-1.0)*x1945*x1949))+((r10*x1946))+((sj1*x1937))+(((-1.0)*x1951))+(((-1.0)*x1938*x1941)));
evalcond[5]=((((-1.0)*x1955))+((r20*x1946))+(((-1.0)*x1940*x1945))+((r21*x1943))+(((-1.0)*x1938*x1942))+((x1938*x1939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1956=((1.0)*sj1);
IkReal x1957=(cj5*sj4);
IkReal x1958=(r20*sj0);
IkReal x1959=((1.0)*cj1);
IkReal x1960=(cj4*r12);
IkReal x1961=(cj4*r22*sj0);
IkReal x1962=(r11*sj4*sj5);
IkReal x1963=(r21*sj0*sj4*sj5);
CheckValue<IkReal> x1964=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1964.valid){
continue;
}
CheckValue<IkReal> x1965 = IKatan2WithCheck(IkReal(((((-1.0)*x1956*x1961))+(((-1.0)*x1956*x1963))+((cj1*x1960))+((cj1*x1962))+((sj1*x1957*x1958))+(((-1.0)*r10*x1957*x1959)))),IkReal(((((-1.0)*x1957*x1958*x1959))+((cj1*x1961))+((cj1*x1963))+((sj1*x1962))+((sj1*x1960))+(((-1.0)*r10*x1956*x1957)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1965.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1964.value)))+(x1965.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1966=IKsin(j2);
IkReal x1967=IKcos(j2);
IkReal x1968=((1.0)*cj3);
IkReal x1969=(cj5*r00);
IkReal x1970=(cj0*cj1);
IkReal x1971=(cj5*r10);
IkReal x1972=(r01*sj5);
IkReal x1973=((1.0)*sj4);
IkReal x1974=(cj5*sj3);
IkReal x1975=(cj1*sj0);
IkReal x1976=(sj3*sj5);
IkReal x1977=(cj5*r20);
IkReal x1978=((1.0)*cj4);
IkReal x1979=((1.93e-6)*sj1);
IkReal x1980=(r11*sj5);
IkReal x1981=(r21*sj5);
IkReal x1982=(cj1*x1967);
IkReal x1983=(cj3*cj4*sj5);
IkReal x1984=((0.4)*x1966);
IkReal x1985=(sj1*x1967);
IkReal x1986=((1.0)*sj1*x1966);
evalcond[0]=((((-1.0)*x1986))+(((-1.0)*r22*x1978))+(((-1.0)*x1973*x1981))+x1982+((sj4*x1977)));
evalcond[1]=((((-1.0)*r02*x1978))+(((-1.0)*x1972*x1973))+((x1966*x1970))+((sj4*x1969))+((cj0*x1985)));
evalcond[2]=((((-1.0)*x1973*x1980))+((sj0*x1985))+((x1966*x1975))+((sj4*x1971))+(((-1.0)*r12*x1978)));
evalcond[3]=((((9.9e-7)*x1977))+(((-1.93e-6)*cj1))+(((-1.0)*sj1*x1984))+(((-1.0)*pz))+(((-9.9e-7)*x1981))+(((0.4)*x1982))+(((-0.4)*sj1)));
evalcond[4]=((((9.9e-7)*x1969))+(((-1.0)*cj0*x1979))+((x1970*x1984))+(((-1.0)*px))+(((-9.9e-7)*x1972))+(((0.4)*cj0*x1985))+(((0.4)*x1970)));
evalcond[5]=((((9.9e-7)*x1971))+((x1975*x1984))+(((-1.0)*py))+(((-1.0)*sj0*x1979))+(((-9.9e-7)*x1980))+(((0.4)*sj0*x1985))+(((0.4)*x1975)));
evalcond[6]=((((-1.0)*r22*sj4*x1968))+((cj3*cj4*x1981))+((r20*x1976))+((r21*x1974))+(((-1.0)*cj1*x1966))+(((-1.0)*x1985))+(((-1.0)*cj4*x1968*x1977)));
evalcond[7]=(((x1967*x1970))+(((-1.0)*cj0*x1986))+((r00*x1976))+((r01*x1974))+(((-1.0)*r02*sj4*x1968))+(((-1.0)*cj4*x1968*x1969))+((cj3*cj4*x1972)));
evalcond[8]=(((x1967*x1975))+((cj3*cj4*x1980))+((r10*x1976))+((r11*x1974))+(((-1.0)*r12*sj4*x1968))+(((-1.0)*sj0*x1986))+(((-1.0)*cj4*x1968*x1971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1987=((1.0)*cj0);
IkReal x1988=(cj4*r02);
IkReal x1989=(cj1*sj4);
IkReal x1990=(cj4*r22);
IkReal x1991=(cj5*r20);
IkReal x1992=(sj1*sj4);
IkReal x1993=(sj5*x1992);
IkReal x1994=((1.0)*cj5*r00);
CheckValue<IkReal> x1995=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1995.valid){
continue;
}
CheckValue<IkReal> x1996 = IKatan2WithCheck(IkReal((((cj0*x1991*x1992))+((r01*sj5*x1989))+(((-1.0)*r21*x1987*x1993))+(((-1.0)*sj1*x1987*x1990))+(((-1.0)*x1989*x1994))+((cj1*x1988)))),IkReal((((cj0*r21*sj5*x1989))+(((-1.0)*x1987*x1989*x1991))+((sj1*x1988))+(((-1.0)*x1992*x1994))+((cj0*cj1*x1990))+((r01*x1993)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1996.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1995.value)))+(x1996.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1997=IKsin(j2);
IkReal x1998=IKcos(j2);
IkReal x1999=((1.0)*cj3);
IkReal x2000=(cj5*r00);
IkReal x2001=(cj0*cj1);
IkReal x2002=(cj5*r10);
IkReal x2003=(r01*sj5);
IkReal x2004=((1.0)*sj4);
IkReal x2005=(cj5*sj3);
IkReal x2006=(cj1*sj0);
IkReal x2007=(sj3*sj5);
IkReal x2008=(cj5*r20);
IkReal x2009=((1.0)*cj4);
IkReal x2010=((1.93e-6)*sj1);
IkReal x2011=(r11*sj5);
IkReal x2012=(r21*sj5);
IkReal x2013=(cj1*x1998);
IkReal x2014=(cj3*cj4*sj5);
IkReal x2015=((0.4)*x1997);
IkReal x2016=(sj1*x1998);
IkReal x2017=((1.0)*sj1*x1997);
evalcond[0]=((((-1.0)*r22*x2009))+(((-1.0)*x2017))+x2013+(((-1.0)*x2004*x2012))+((sj4*x2008)));
evalcond[1]=(((x1997*x2001))+(((-1.0)*x2003*x2004))+(((-1.0)*r02*x2009))+((cj0*x2016))+((sj4*x2000)));
evalcond[2]=(((x1997*x2006))+((sj0*x2016))+(((-1.0)*r12*x2009))+(((-1.0)*x2004*x2011))+((sj4*x2002)));
evalcond[3]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x2012))+(((9.9e-7)*x2008))+(((0.4)*x2013))+(((-1.0)*pz))+(((-1.0)*sj1*x2015))+(((-0.4)*sj1)));
evalcond[4]=((((0.4)*cj0*x2016))+(((9.9e-7)*x2000))+(((-1.0)*px))+(((0.4)*x2001))+((x2001*x2015))+(((-9.9e-7)*x2003))+(((-1.0)*cj0*x2010)));
evalcond[5]=((((-9.9e-7)*x2011))+(((9.9e-7)*x2002))+(((-1.0)*sj0*x2010))+(((0.4)*sj0*x2016))+(((-1.0)*py))+(((0.4)*x2006))+((x2006*x2015)));
evalcond[6]=(((r21*x2005))+(((-1.0)*r22*sj4*x1999))+(((-1.0)*cj4*x1999*x2008))+((r20*x2007))+(((-1.0)*cj1*x1997))+(((-1.0)*x2016))+((cj3*cj4*x2012)));
evalcond[7]=(((cj3*cj4*x2003))+((r01*x2005))+((r00*x2007))+(((-1.0)*r02*sj4*x1999))+(((-1.0)*cj4*x1999*x2000))+(((-1.0)*cj0*x2017))+((x1998*x2001)));
evalcond[8]=(((r11*x2005))+((r10*x2007))+(((-1.0)*cj4*x1999*x2002))+(((-1.0)*r12*sj4*x1999))+(((-1.0)*sj0*x2017))+((cj3*cj4*x2011))+((x1998*x2006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2018=((1.0)*sj0);
CheckValue<IkReal> x2019 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21*x2018))+(((-1.0)*r20*sj5*x2018)))),IkReal((((cj4*cj5*r20*sj0))+(((-1.0)*cj4*r21*sj5*x2018))+((r22*sj0*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2019.valid){
continue;
}
CheckValue<IkReal> x2020=IKPowWithIntegerCheck(IKsign((((cj5*r10*sj4))+(((-1.0)*r11*sj4*sj5))+(((-1.0)*cj4*r12)))),-1);
if(!x2020.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x2019.value)+(((1.5707963267949)*(x2020.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x2021=IKsin(j3);
IkReal x2022=IKcos(j3);
IkReal x2023=((1.0)*cj5);
IkReal x2024=(cj4*x2021);
IkReal x2025=((1.0)*sj5*x2022);
IkReal x2026=((1.0)*sj4*x2021);
evalcond[0]=((((-1.0)*r22*x2026))+((r21*sj5*x2024))+(((-1.0)*r20*x2023*x2024))+(((-1.0)*r21*x2022*x2023))+(((-1.0)*r20*x2025)));
evalcond[1]=((((-1.0)*r10*x2025))+cj0+(((-1.0)*r12*x2026))+(((-1.0)*r10*x2023*x2024))+((r11*sj5*x2024))+(((-1.0)*r11*x2022*x2023)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x2025))+(((-1.0)*r02*x2026))+(((-1.0)*r01*x2022*x2023))+(((-1.0)*r00*x2023*x2024))+((r01*sj5*x2024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[2];
IkReal x2027=sj0*sj0;
j1eval[0]=x2027;
j1eval[1]=IKsign(x2027);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x2028=cj0*cj0;
j1eval[0]=x2028;
j1eval[1]=IKsign(x2028);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j1eval[0]=sj0;
j1eval[1]=IKsign(sj0);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2029=((4.82499999988767e-6)*sj4);
IkReal x2030=(r01*sj5);
IkReal x2031=((0.999999999976719)*cj4);
IkReal x2032=(cj5*r00);
IkReal x2033=(r21*sj5);
IkReal x2034=(cj5*r20);
IkReal x2035=((0.999999999976719)*sj4);
IkReal x2036=((4.82499999988767e-6)*cj4);
if( IKabs((((r22*x2031))+(((1.1941874999722e-11)*x2032))+((x2033*x2035))+(((-2.47499999994238e-6)*x2033))+((r02*x2036))+(((-1.0)*x2029*x2032))+(((2.47499999994238e-6)*x2034))+(((-1.20624999997192e-5)*px))+((x2029*x2030))+(((-2.4999999999418)*pz))+(((-1.1941874999722e-11)*x2030))+(((-1.0)*x2034*x2035)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x2036))+(((1.1941874999722e-11)*x2034))+(((2.4999999999418)*px))+(((-2.47499999994238e-6)*x2032))+((x2032*x2035))+(((-1.0)*x2029*x2034))+(((2.47499999994238e-6)*x2030))+(((-1.20624999997192e-5)*pz))+(((-1.0)*r02*x2031))+(((-1.0)*x2030*x2035))+((x2029*x2033))+(((-1.1941874999722e-11)*x2033)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x2031))+(((1.1941874999722e-11)*x2032))+((x2033*x2035))+(((-2.47499999994238e-6)*x2033))+((r02*x2036))+(((-1.0)*x2029*x2032))+(((2.47499999994238e-6)*x2034))+(((-1.20624999997192e-5)*px))+((x2029*x2030))+(((-2.4999999999418)*pz))+(((-1.1941874999722e-11)*x2030))+(((-1.0)*x2034*x2035))))+IKsqr((((r22*x2036))+(((1.1941874999722e-11)*x2034))+(((2.4999999999418)*px))+(((-2.47499999994238e-6)*x2032))+((x2032*x2035))+(((-1.0)*x2029*x2034))+(((2.47499999994238e-6)*x2030))+(((-1.20624999997192e-5)*pz))+(((-1.0)*r02*x2031))+(((-1.0)*x2030*x2035))+((x2029*x2033))+(((-1.1941874999722e-11)*x2033))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r22*x2031))+(((1.1941874999722e-11)*x2032))+((x2033*x2035))+(((-2.47499999994238e-6)*x2033))+((r02*x2036))+(((-1.0)*x2029*x2032))+(((2.47499999994238e-6)*x2034))+(((-1.20624999997192e-5)*px))+((x2029*x2030))+(((-2.4999999999418)*pz))+(((-1.1941874999722e-11)*x2030))+(((-1.0)*x2034*x2035))), (((r22*x2036))+(((1.1941874999722e-11)*x2034))+(((2.4999999999418)*px))+(((-2.47499999994238e-6)*x2032))+((x2032*x2035))+(((-1.0)*x2029*x2034))+(((2.47499999994238e-6)*x2030))+(((-1.20624999997192e-5)*pz))+(((-1.0)*r02*x2031))+(((-1.0)*x2030*x2035))+((x2029*x2033))+(((-1.1941874999722e-11)*x2033))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2037=IKcos(j1);
IkReal x2038=IKsin(j1);
IkReal x2039=((0.4)*sj4);
IkReal x2040=(r21*sj5);
IkReal x2041=((0.4)*cj4);
IkReal x2042=(cj5*r20);
IkReal x2043=(r01*sj5);
IkReal x2044=(cj5*r00);
IkReal x2045=((9.9e-7)*x2043);
IkReal x2046=((1.93e-6)*x2038);
IkReal x2047=((0.4)*x2037);
IkReal x2048=((9.9e-7)*x2044);
IkReal x2049=((1.93e-6)*x2037);
IkReal x2050=((0.4)*x2038);
IkReal x2051=((9.9e-7)*x2040);
IkReal x2052=((9.9e-7)*x2042);
IkReal x2053=((0.4)*sj3*sj5);
IkReal x2054=((0.4)*cj5*sj3);
IkReal x2055=(x2047+x2048);
IkReal x2056=(x2046+x2045+px);
IkReal x2057=(x2049+x2051+x2050);
evalcond[0]=((((-1.0)*r02*x2041))+x2056+(((-1.0)*x2039*x2043))+((x2039*x2044))+(((-1.0)*x2055)));
evalcond[1]=(((r22*x2041))+x2052+(((-1.0)*x2039*x2042))+((x2039*x2040))+(((-1.0)*pz))+(((-1.0)*x2057)));
evalcond[2]=((((-1.0)*cj3*x2040*x2041))+x2056+((cj3*x2041*x2042))+(((-1.0)*r20*x2053))+((cj3*r22*x2039))+(((-1.0)*r21*x2054))+(((-1.0)*x2055)));
evalcond[3]=(((r01*x2054))+(((-1.0)*cj3*r02*x2039))+x2057+(((-1.0)*cj3*x2041*x2044))+pz+((cj3*x2041*x2043))+(((-1.0)*x2052))+((r00*x2053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2058=(cj4*sj1);
IkReal x2059=(cj1*sj4);
IkReal x2060=((1.0)*cj5);
IkReal x2061=(r21*sj5);
IkReal x2062=(cj1*cj4);
IkReal x2063=(sj1*sj4);
IkReal x2064=(r01*sj4*sj5);
if( IKabs(((((-1.0)*r22*x2058))+((r02*x2062))+((cj5*r20*x2063))+(((-1.0)*x2061*x2063))+(((-1.0)*r00*x2059*x2060))+((r01*sj5*x2059)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x2062))+((r01*sj5*x2063))+((x2059*x2061))+((r02*x2058))+(((-1.0)*r20*x2059*x2060))+(((-1.0)*r00*x2060*x2063)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x2058))+((r02*x2062))+((cj5*r20*x2063))+(((-1.0)*x2061*x2063))+(((-1.0)*r00*x2059*x2060))+((r01*sj5*x2059))))+IKsqr((((r22*x2062))+((r01*sj5*x2063))+((x2059*x2061))+((r02*x2058))+(((-1.0)*r20*x2059*x2060))+(((-1.0)*r00*x2060*x2063))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x2058))+((r02*x2062))+((cj5*r20*x2063))+(((-1.0)*x2061*x2063))+(((-1.0)*r00*x2059*x2060))+((r01*sj5*x2059))), (((r22*x2062))+((r01*sj5*x2063))+((x2059*x2061))+((r02*x2058))+(((-1.0)*r20*x2059*x2060))+(((-1.0)*r00*x2060*x2063))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2065=IKcos(j2);
IkReal x2066=IKsin(j2);
IkReal x2067=((1.0)*cj3);
IkReal x2068=(cj5*r00);
IkReal x2069=((1.0)*cj4);
IkReal x2070=(r01*sj5);
IkReal x2071=((1.0)*sj4);
IkReal x2072=(cj5*sj3);
IkReal x2073=(cj5*r20);
IkReal x2074=(sj3*sj5);
IkReal x2075=(r21*sj5);
IkReal x2076=(cj1*x2065);
IkReal x2077=(cj3*cj4*sj5);
IkReal x2078=(cj1*x2066);
IkReal x2079=(sj1*x2066);
IkReal x2080=(sj1*x2065);
IkReal x2081=((1.0)*x2079);
evalcond[0]=((((-1.0)*x2070*x2071))+(((-1.0)*r02*x2069))+x2078+x2080+((sj4*x2068)));
evalcond[1]=((((-1.0)*x2071*x2075))+x2076+(((-1.0)*x2081))+(((-1.0)*r22*x2069))+((sj4*x2073)));
evalcond[2]=((((-1.93e-6)*cj1))+(((0.4)*x2076))+(((-0.4)*x2079))+(((-1.0)*pz))+(((9.9e-7)*x2073))+(((-9.9e-7)*x2075))+(((-0.4)*sj1)));
evalcond[3]=((((0.4)*x2078))+(((0.4)*cj1))+(((0.4)*x2080))+(((-1.0)*px))+(((-1.93e-6)*sj1))+(((9.9e-7)*x2068))+(((-9.9e-7)*x2070)));
evalcond[4]=(x2076+(((-1.0)*x2081))+((cj3*cj4*x2070))+((r01*x2072))+((r00*x2074))+(((-1.0)*r02*sj4*x2067))+(((-1.0)*cj4*x2067*x2068)));
evalcond[5]=((((-1.0)*r22*sj4*x2067))+(((-1.0)*x2080))+((cj3*cj4*x2075))+((r20*x2074))+(((-1.0)*x2078))+(((-1.0)*cj4*x2067*x2073))+((r21*x2072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2082=((4.82499999988767e-6)*sj4);
IkReal x2083=(r01*sj5);
IkReal x2084=((0.999999999976719)*cj4);
IkReal x2085=(cj5*r00);
IkReal x2086=(r21*sj5);
IkReal x2087=(cj5*r20);
IkReal x2088=((0.999999999976719)*sj4);
IkReal x2089=((4.82499999988767e-6)*cj4);
if( IKabs(((((-1.0)*r02*x2089))+(((1.1941874999722e-11)*x2083))+(((-2.47499999994238e-6)*x2086))+((x2086*x2088))+(((-1.0)*x2087*x2088))+(((1.20624999997192e-5)*px))+(((-1.1941874999722e-11)*x2085))+((x2082*x2085))+(((2.47499999994238e-6)*x2087))+(((-1.0)*x2082*x2083))+(((-2.4999999999418)*pz))+((r22*x2084)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.1941874999722e-11)*x2087))+(((-2.47499999994238e-6)*x2083))+((r02*x2084))+(((-1.0)*x2085*x2088))+(((-1.20624999997192e-5)*pz))+((x2083*x2088))+(((-1.1941874999722e-11)*x2086))+((x2082*x2086))+(((2.47499999994238e-6)*x2085))+(((-1.0)*x2082*x2087))+(((-2.4999999999418)*px))+((r22*x2089)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x2089))+(((1.1941874999722e-11)*x2083))+(((-2.47499999994238e-6)*x2086))+((x2086*x2088))+(((-1.0)*x2087*x2088))+(((1.20624999997192e-5)*px))+(((-1.1941874999722e-11)*x2085))+((x2082*x2085))+(((2.47499999994238e-6)*x2087))+(((-1.0)*x2082*x2083))+(((-2.4999999999418)*pz))+((r22*x2084))))+IKsqr(((((1.1941874999722e-11)*x2087))+(((-2.47499999994238e-6)*x2083))+((r02*x2084))+(((-1.0)*x2085*x2088))+(((-1.20624999997192e-5)*pz))+((x2083*x2088))+(((-1.1941874999722e-11)*x2086))+((x2082*x2086))+(((2.47499999994238e-6)*x2085))+(((-1.0)*x2082*x2087))+(((-2.4999999999418)*px))+((r22*x2089))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r02*x2089))+(((1.1941874999722e-11)*x2083))+(((-2.47499999994238e-6)*x2086))+((x2086*x2088))+(((-1.0)*x2087*x2088))+(((1.20624999997192e-5)*px))+(((-1.1941874999722e-11)*x2085))+((x2082*x2085))+(((2.47499999994238e-6)*x2087))+(((-1.0)*x2082*x2083))+(((-2.4999999999418)*pz))+((r22*x2084))), ((((1.1941874999722e-11)*x2087))+(((-2.47499999994238e-6)*x2083))+((r02*x2084))+(((-1.0)*x2085*x2088))+(((-1.20624999997192e-5)*pz))+((x2083*x2088))+(((-1.1941874999722e-11)*x2086))+((x2082*x2086))+(((2.47499999994238e-6)*x2085))+(((-1.0)*x2082*x2087))+(((-2.4999999999418)*px))+((r22*x2089))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2090=IKcos(j1);
IkReal x2091=IKsin(j1);
IkReal x2092=((1.0)*pz);
IkReal x2093=((0.4)*sj4);
IkReal x2094=(r21*sj5);
IkReal x2095=((0.4)*cj4);
IkReal x2096=(cj5*r20);
IkReal x2097=(r01*sj5);
IkReal x2098=(cj5*r00);
IkReal x2099=((0.4)*x2090);
IkReal x2100=((9.9e-7)*x2097);
IkReal x2101=((9.9e-7)*x2098);
IkReal x2102=((1.93e-6)*x2091);
IkReal x2103=((9.9e-7)*x2096);
IkReal x2104=((1.93e-6)*x2090);
IkReal x2105=((0.4)*x2091);
IkReal x2106=((9.9e-7)*x2094);
IkReal x2107=((0.4)*sj3*sj5);
IkReal x2108=((0.4)*cj5*sj3);
IkReal x2109=(x2099+x2100);
IkReal x2110=(x2102+x2101);
IkReal x2111=(x2092+x2106+x2105+x2104);
evalcond[0]=((((-1.0)*x2109))+x2110+(((-1.0)*x2093*x2098))+(((-1.0)*px))+((r02*x2095))+((x2093*x2097)));
evalcond[1]=(x2103+((r22*x2095))+(((-1.0)*x2093*x2096))+(((-1.0)*x2111))+((x2093*x2094)));
evalcond[2]=(((r20*x2107))+((r21*x2108))+(((-1.0)*cj3*r22*x2093))+((cj3*x2094*x2095))+x2109+px+(((-1.0)*x2110))+(((-1.0)*cj3*x2095*x2096)));
evalcond[3]=(((cj3*x2095*x2097))+x2103+((r00*x2107))+((r01*x2108))+(((-1.0)*x2111))+(((-1.0)*cj3*r02*x2093))+(((-1.0)*cj3*x2095*x2098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2112=((1.0)*r01);
IkReal x2113=(sj1*sj4);
IkReal x2114=(cj5*r00);
IkReal x2115=(cj1*cj4);
IkReal x2116=(cj5*r20);
IkReal x2117=(cj1*sj4);
IkReal x2118=(sj5*x2117);
IkReal x2119=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*x2112*x2118))+(((-1.0)*r02*x2115))+(((-1.0)*r21*sj5*x2113))+(((-1.0)*r22*x2119))+((x2113*x2116))+((x2114*x2117)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x2118))+(((-1.0)*x2116*x2117))+(((-1.0)*sj5*x2112*x2113))+(((-1.0)*r02*x2119))+((x2113*x2114))+((r22*x2115)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2112*x2118))+(((-1.0)*r02*x2115))+(((-1.0)*r21*sj5*x2113))+(((-1.0)*r22*x2119))+((x2113*x2116))+((x2114*x2117))))+IKsqr((((r21*x2118))+(((-1.0)*x2116*x2117))+(((-1.0)*sj5*x2112*x2113))+(((-1.0)*r02*x2119))+((x2113*x2114))+((r22*x2115))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2112*x2118))+(((-1.0)*r02*x2115))+(((-1.0)*r21*sj5*x2113))+(((-1.0)*r22*x2119))+((x2113*x2116))+((x2114*x2117))), (((r21*x2118))+(((-1.0)*x2116*x2117))+(((-1.0)*sj5*x2112*x2113))+(((-1.0)*r02*x2119))+((x2113*x2114))+((r22*x2115))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2120=IKcos(j2);
IkReal x2121=IKsin(j2);
IkReal x2122=((1.0)*cj3);
IkReal x2123=(cj5*r00);
IkReal x2124=((1.0)*cj4);
IkReal x2125=(r01*sj5);
IkReal x2126=((1.0)*sj4);
IkReal x2127=(cj5*sj3);
IkReal x2128=(cj5*r20);
IkReal x2129=((1.0)*sj1);
IkReal x2130=(sj3*sj5);
IkReal x2131=((0.4)*sj1);
IkReal x2132=(r21*sj5);
IkReal x2133=(cj1*x2120);
IkReal x2134=(cj3*cj4*sj5);
IkReal x2135=((0.4)*x2121);
IkReal x2136=(x2120*x2129);
IkReal x2137=((1.0)*cj1*x2121);
IkReal x2138=(x2136+x2137);
evalcond[0]=((((-1.0)*r22*x2124))+x2133+(((-1.0)*x2121*x2129))+((sj4*x2128))+(((-1.0)*x2126*x2132)));
evalcond[1]=((((-1.0)*x2138))+(((-1.0)*x2125*x2126))+(((-1.0)*r02*x2124))+((sj4*x2123)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-1.0)*x2121*x2131))+(((-1.0)*x2131))+(((-1.0)*pz))+(((-9.9e-7)*x2132))+(((9.9e-7)*x2128))+(((0.4)*x2133)));
evalcond[3]=((((1.93e-6)*sj1))+(((-1.0)*cj1*x2135))+(((-1.0)*px))+(((9.9e-7)*x2123))+(((-9.9e-7)*x2125))+(((-0.4)*cj1))+(((-1.0)*x2120*x2131)));
evalcond[4]=((((-1.0)*cj4*x2122*x2123))+((sj1*x2121))+((r00*x2130))+((cj3*cj4*x2125))+(((-1.0)*x2133))+((r01*x2127))+(((-1.0)*r02*sj4*x2122)));
evalcond[5]=((((-1.0)*cj4*x2122*x2128))+(((-1.0)*x2138))+(((-1.0)*r22*sj4*x2122))+((r21*x2127))+((r20*x2130))+((cj3*cj4*x2132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2139=((4.82499999988767e-6)*sj4);
IkReal x2140=(cj5*r20);
IkReal x2141=(r11*sj5);
IkReal x2142=(r21*sj5);
IkReal x2143=(cj5*r10);
IkReal x2144=((0.999999999976719)*sj4);
IkReal x2145=((4.82499999988767e-6)*cj4);
IkReal x2146=((0.999999999976719)*cj4);
if( IKabs((((x2142*x2144))+(((-1.20624999997192e-5)*py))+(((-1.0)*x2140*x2144))+(((1.1941874999722e-11)*x2143))+(((2.47499999994238e-6)*x2140))+(((-1.1941874999722e-11)*x2141))+((r12*x2145))+(((-2.47499999994238e-6)*x2142))+((r22*x2146))+(((-2.4999999999418)*pz))+(((-1.0)*x2139*x2143))+((x2139*x2141)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.4999999999418)*py))+((x2143*x2144))+(((-1.20624999997192e-5)*pz))+(((-1.0)*r12*x2146))+(((1.1941874999722e-11)*x2140))+(((2.47499999994238e-6)*x2141))+(((-1.1941874999722e-11)*x2142))+(((-2.47499999994238e-6)*x2143))+((r22*x2145))+(((-1.0)*x2139*x2140))+(((-1.0)*x2141*x2144))+((x2139*x2142)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2142*x2144))+(((-1.20624999997192e-5)*py))+(((-1.0)*x2140*x2144))+(((1.1941874999722e-11)*x2143))+(((2.47499999994238e-6)*x2140))+(((-1.1941874999722e-11)*x2141))+((r12*x2145))+(((-2.47499999994238e-6)*x2142))+((r22*x2146))+(((-2.4999999999418)*pz))+(((-1.0)*x2139*x2143))+((x2139*x2141))))+IKsqr(((((2.4999999999418)*py))+((x2143*x2144))+(((-1.20624999997192e-5)*pz))+(((-1.0)*r12*x2146))+(((1.1941874999722e-11)*x2140))+(((2.47499999994238e-6)*x2141))+(((-1.1941874999722e-11)*x2142))+(((-2.47499999994238e-6)*x2143))+((r22*x2145))+(((-1.0)*x2139*x2140))+(((-1.0)*x2141*x2144))+((x2139*x2142))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((x2142*x2144))+(((-1.20624999997192e-5)*py))+(((-1.0)*x2140*x2144))+(((1.1941874999722e-11)*x2143))+(((2.47499999994238e-6)*x2140))+(((-1.1941874999722e-11)*x2141))+((r12*x2145))+(((-2.47499999994238e-6)*x2142))+((r22*x2146))+(((-2.4999999999418)*pz))+(((-1.0)*x2139*x2143))+((x2139*x2141))), ((((2.4999999999418)*py))+((x2143*x2144))+(((-1.20624999997192e-5)*pz))+(((-1.0)*r12*x2146))+(((1.1941874999722e-11)*x2140))+(((2.47499999994238e-6)*x2141))+(((-1.1941874999722e-11)*x2142))+(((-2.47499999994238e-6)*x2143))+((r22*x2145))+(((-1.0)*x2139*x2140))+(((-1.0)*x2141*x2144))+((x2139*x2142))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2147=IKcos(j1);
IkReal x2148=IKsin(j1);
IkReal x2149=((0.4)*sj4);
IkReal x2150=(r21*sj5);
IkReal x2151=(cj5*r10);
IkReal x2152=((0.4)*cj4);
IkReal x2153=(cj5*r20);
IkReal x2154=((0.4)*sj3);
IkReal x2155=(r11*sj5);
IkReal x2156=((1.93e-6)*x2148);
IkReal x2157=((9.9e-7)*x2155);
IkReal x2158=((0.4)*x2147);
IkReal x2159=((9.9e-7)*x2151);
IkReal x2160=((1.93e-6)*x2147);
IkReal x2161=((0.4)*x2148);
IkReal x2162=((9.9e-7)*x2150);
IkReal x2163=((9.9e-7)*x2153);
IkReal x2164=(x2158+x2159);
IkReal x2165=(x2156+x2157+py);
IkReal x2166=(x2161+x2160+x2162);
evalcond[0]=((((-1.0)*x2149*x2155))+((x2149*x2151))+x2165+(((-1.0)*r12*x2152))+(((-1.0)*x2164)));
evalcond[1]=((((-1.0)*x2149*x2153))+((x2149*x2150))+x2163+(((-1.0)*pz))+(((-1.0)*x2166))+((r22*x2152)));
evalcond[2]=(x2165+(((-1.0)*r20*sj5*x2154))+((cj3*x2152*x2153))+((cj3*r22*x2149))+(((-1.0)*cj3*x2150*x2152))+(((-1.0)*cj5*r21*x2154))+(((-1.0)*x2164)));
evalcond[3]=(x2166+(((-1.0)*cj3*x2151*x2152))+((cj3*x2152*x2155))+((r10*sj5*x2154))+pz+(((-1.0)*x2163))+((cj5*r11*x2154))+(((-1.0)*cj3*r12*x2149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2167=(cj4*r12);
IkReal x2168=(cj4*r22);
IkReal x2169=(cj1*sj4);
IkReal x2170=(r11*sj5);
IkReal x2171=(r21*sj5);
IkReal x2172=((1.0)*sj1);
IkReal x2173=(sj1*sj4);
IkReal x2174=(cj5*r20);
IkReal x2175=((1.0)*cj5*r10);
if( IKabs(((((-1.0)*x2168*x2172))+(((-1.0)*x2169*x2175))+((x2173*x2174))+(((-1.0)*sj4*x2171*x2172))+((cj1*x2167))+((x2169*x2170)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x2167))+((x2170*x2173))+(((-1.0)*x2169*x2174))+(((-1.0)*cj5*r10*sj4*x2172))+((cj1*x2168))+((x2169*x2171)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2168*x2172))+(((-1.0)*x2169*x2175))+((x2173*x2174))+(((-1.0)*sj4*x2171*x2172))+((cj1*x2167))+((x2169*x2170))))+IKsqr((((sj1*x2167))+((x2170*x2173))+(((-1.0)*x2169*x2174))+(((-1.0)*cj5*r10*sj4*x2172))+((cj1*x2168))+((x2169*x2171))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2168*x2172))+(((-1.0)*x2169*x2175))+((x2173*x2174))+(((-1.0)*sj4*x2171*x2172))+((cj1*x2167))+((x2169*x2170))), (((sj1*x2167))+((x2170*x2173))+(((-1.0)*x2169*x2174))+(((-1.0)*cj5*r10*sj4*x2172))+((cj1*x2168))+((x2169*x2171))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2176=IKcos(j2);
IkReal x2177=IKsin(j2);
IkReal x2178=(cj3*cj4);
IkReal x2179=(r21*sj5);
IkReal x2180=((1.0)*r22);
IkReal x2181=(cj5*r10);
IkReal x2182=(cj5*r20);
IkReal x2183=(cj5*sj3);
IkReal x2184=(cj3*sj4);
IkReal x2185=(r11*sj5);
IkReal x2186=((1.0)*sj4);
IkReal x2187=((1.0)*r12);
IkReal x2188=(sj3*sj5);
IkReal x2189=(cj1*x2176);
IkReal x2190=(cj1*x2177);
IkReal x2191=(sj1*x2177);
IkReal x2192=(sj1*x2176);
IkReal x2193=((1.0)*x2191);
evalcond[0]=((((-1.0)*cj4*x2187))+x2190+x2192+(((-1.0)*x2185*x2186))+((sj4*x2181)));
evalcond[1]=((((-1.0)*cj4*x2180))+x2189+(((-1.0)*x2193))+(((-1.0)*x2179*x2186))+((sj4*x2182)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-1.0)*pz))+(((0.4)*x2189))+(((9.9e-7)*x2182))+(((-0.4)*x2191))+(((-0.4)*sj1))+(((-9.9e-7)*x2179)));
evalcond[3]=((((0.4)*cj1))+(((-1.0)*py))+(((0.4)*x2190))+(((0.4)*x2192))+(((-1.93e-6)*sj1))+(((9.9e-7)*x2181))+(((-9.9e-7)*x2185)));
evalcond[4]=(x2189+((x2178*x2185))+(((-1.0)*x2178*x2181))+((r11*x2183))+(((-1.0)*x2193))+(((-1.0)*x2184*x2187))+((r10*x2188)));
evalcond[5]=((((-1.0)*x2180*x2184))+(((-1.0)*x2192))+(((-1.0)*x2190))+((r20*x2188))+(((-1.0)*x2178*x2182))+((r21*x2183))+((x2178*x2179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2194=((4.82499999988767e-6)*sj4);
IkReal x2195=(cj5*r20);
IkReal x2196=(r11*sj5);
IkReal x2197=(r21*sj5);
IkReal x2198=(cj5*r10);
IkReal x2199=((0.999999999976719)*sj4);
IkReal x2200=((4.82499999988767e-6)*cj4);
IkReal x2201=((0.999999999976719)*cj4);
if( IKabs(((((-1.0)*x2195*x2199))+((x2194*x2198))+(((-1.0)*r12*x2200))+(((-1.0)*x2194*x2196))+(((2.47499999994238e-6)*x2195))+(((1.20624999997192e-5)*py))+(((1.1941874999722e-11)*x2196))+((r22*x2201))+((x2197*x2199))+(((-2.4999999999418)*pz))+(((-1.1941874999722e-11)*x2198))+(((-2.47499999994238e-6)*x2197)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2196*x2199))+((x2194*x2197))+((r12*x2201))+(((-1.0)*x2194*x2195))+(((2.47499999994238e-6)*x2198))+(((-1.20624999997192e-5)*pz))+(((1.1941874999722e-11)*x2195))+((r22*x2200))+(((-1.0)*x2198*x2199))+(((-2.4999999999418)*py))+(((-1.1941874999722e-11)*x2197))+(((-2.47499999994238e-6)*x2196)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2195*x2199))+((x2194*x2198))+(((-1.0)*r12*x2200))+(((-1.0)*x2194*x2196))+(((2.47499999994238e-6)*x2195))+(((1.20624999997192e-5)*py))+(((1.1941874999722e-11)*x2196))+((r22*x2201))+((x2197*x2199))+(((-2.4999999999418)*pz))+(((-1.1941874999722e-11)*x2198))+(((-2.47499999994238e-6)*x2197))))+IKsqr((((x2196*x2199))+((x2194*x2197))+((r12*x2201))+(((-1.0)*x2194*x2195))+(((2.47499999994238e-6)*x2198))+(((-1.20624999997192e-5)*pz))+(((1.1941874999722e-11)*x2195))+((r22*x2200))+(((-1.0)*x2198*x2199))+(((-2.4999999999418)*py))+(((-1.1941874999722e-11)*x2197))+(((-2.47499999994238e-6)*x2196))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*x2195*x2199))+((x2194*x2198))+(((-1.0)*r12*x2200))+(((-1.0)*x2194*x2196))+(((2.47499999994238e-6)*x2195))+(((1.20624999997192e-5)*py))+(((1.1941874999722e-11)*x2196))+((r22*x2201))+((x2197*x2199))+(((-2.4999999999418)*pz))+(((-1.1941874999722e-11)*x2198))+(((-2.47499999994238e-6)*x2197))), (((x2196*x2199))+((x2194*x2197))+((r12*x2201))+(((-1.0)*x2194*x2195))+(((2.47499999994238e-6)*x2198))+(((-1.20624999997192e-5)*pz))+(((1.1941874999722e-11)*x2195))+((r22*x2200))+(((-1.0)*x2198*x2199))+(((-2.4999999999418)*py))+(((-1.1941874999722e-11)*x2197))+(((-2.47499999994238e-6)*x2196))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2202=IKcos(j1);
IkReal x2203=IKsin(j1);
IkReal x2204=((1.0)*pz);
IkReal x2205=((0.4)*sj4);
IkReal x2206=(r21*sj5);
IkReal x2207=(cj5*r10);
IkReal x2208=((0.4)*cj4);
IkReal x2209=(cj5*r20);
IkReal x2210=((0.4)*sj3);
IkReal x2211=(r11*sj5);
IkReal x2212=((0.4)*x2202);
IkReal x2213=((9.9e-7)*x2211);
IkReal x2214=((9.9e-7)*x2207);
IkReal x2215=((1.93e-6)*x2203);
IkReal x2216=((9.9e-7)*x2209);
IkReal x2217=((1.93e-6)*x2202);
IkReal x2218=((0.4)*x2203);
IkReal x2219=((9.9e-7)*x2206);
IkReal x2220=(x2215+x2214);
IkReal x2221=(x2213+x2212);
IkReal x2222=(x2204+x2217+x2219+x2218);
evalcond[0]=(x2220+(((-1.0)*x2205*x2207))+((r12*x2208))+((x2205*x2211))+(((-1.0)*py))+(((-1.0)*x2221)));
evalcond[1]=(x2216+(((-1.0)*x2205*x2209))+((x2205*x2206))+(((-1.0)*x2222))+((r22*x2208)));
evalcond[2]=((((-1.0)*cj3*x2208*x2209))+((cj5*r21*x2210))+x2221+((cj3*x2206*x2208))+(((-1.0)*cj3*r22*x2205))+py+(((-1.0)*x2220))+((r20*sj5*x2210)));
evalcond[3]=((((-1.0)*cj3*r12*x2205))+(((-1.0)*cj3*x2207*x2208))+((r10*sj5*x2210))+x2216+((cj5*r11*x2210))+(((-1.0)*x2222))+((cj3*x2208*x2211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2223=((1.0)*cj1);
IkReal x2224=(sj4*sj5);
IkReal x2225=(cj5*sj4);
IkReal x2226=((1.0)*sj1);
IkReal x2227=(sj1*x2225);
IkReal x2228=(cj4*x2226);
if( IKabs((((cj1*r10*x2225))+(((-1.0)*r11*x2223*x2224))+(((-1.0)*r21*x2224*x2226))+((r20*x2227))+(((-1.0)*cj4*r12*x2223))+(((-1.0)*r22*x2228)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x2223*x2225))+((cj1*cj4*r22))+((cj1*r21*x2224))+((r10*x2227))+(((-1.0)*r12*x2228))+(((-1.0)*r11*x2224*x2226)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r10*x2225))+(((-1.0)*r11*x2223*x2224))+(((-1.0)*r21*x2224*x2226))+((r20*x2227))+(((-1.0)*cj4*r12*x2223))+(((-1.0)*r22*x2228))))+IKsqr(((((-1.0)*r20*x2223*x2225))+((cj1*cj4*r22))+((cj1*r21*x2224))+((r10*x2227))+(((-1.0)*r12*x2228))+(((-1.0)*r11*x2224*x2226))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r10*x2225))+(((-1.0)*r11*x2223*x2224))+(((-1.0)*r21*x2224*x2226))+((r20*x2227))+(((-1.0)*cj4*r12*x2223))+(((-1.0)*r22*x2228))), ((((-1.0)*r20*x2223*x2225))+((cj1*cj4*r22))+((cj1*r21*x2224))+((r10*x2227))+(((-1.0)*r12*x2228))+(((-1.0)*r11*x2224*x2226))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2229=IKcos(j2);
IkReal x2230=IKsin(j2);
IkReal x2231=(cj3*cj4);
IkReal x2232=(r21*sj5);
IkReal x2233=((1.0)*r22);
IkReal x2234=(cj5*r10);
IkReal x2235=(cj5*r20);
IkReal x2236=(cj5*sj3);
IkReal x2237=((1.0)*sj1);
IkReal x2238=(cj3*sj4);
IkReal x2239=(sj3*sj5);
IkReal x2240=(r11*sj5);
IkReal x2241=((1.0)*sj4);
IkReal x2242=((1.0)*r12);
IkReal x2243=((0.4)*sj1);
IkReal x2244=(cj1*x2229);
IkReal x2245=((0.4)*x2230);
IkReal x2246=(x2229*x2237);
IkReal x2247=((1.0)*cj1*x2230);
IkReal x2248=(x2246+x2247);
evalcond[0]=(((sj4*x2235))+x2244+(((-1.0)*cj4*x2233))+(((-1.0)*x2232*x2241))+(((-1.0)*x2230*x2237)));
evalcond[1]=(((sj4*x2234))+(((-1.0)*cj4*x2242))+(((-1.0)*x2240*x2241))+(((-1.0)*x2248)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x2232))+(((-1.0)*x2230*x2243))+(((-1.0)*pz))+(((0.4)*x2244))+(((-1.0)*x2243))+(((9.9e-7)*x2235)));
evalcond[3]=((((-1.0)*x2229*x2243))+(((1.93e-6)*sj1))+(((-1.0)*py))+(((-1.0)*cj1*x2245))+(((-9.9e-7)*x2240))+(((9.9e-7)*x2234))+(((-0.4)*cj1)));
evalcond[4]=(((x2231*x2240))+(((-1.0)*x2244))+(((-1.0)*x2231*x2234))+((sj1*x2230))+((r10*x2239))+(((-1.0)*x2238*x2242))+((r11*x2236)));
evalcond[5]=((((-1.0)*x2231*x2235))+((r21*x2236))+((r20*x2239))+(((-1.0)*x2248))+((x2231*x2232))+(((-1.0)*x2233*x2238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2249=(cj5*r10);
IkReal x2250=((0.4)*sj4);
IkReal x2251=(r21*sj5);
IkReal x2252=(cj5*r21);
IkReal x2253=(r11*sj5);
IkReal x2254=(r20*sj5);
IkReal x2255=(cj5*r20);
IkReal x2256=((7720000000.0)*sj0);
IkReal x2257=(cj3*cj4);
IkReal x2258=((1.6e+15)*sj0);
IkReal x2259=(cj3*r22*sj4);
IkReal x2260=((-1.6e+15)*sj0*sj3);
IkReal x2261=((((9.9e-7)*x2255))+(((-1.0)*pz))+(((-9.9e-7)*x2251))+((x2250*x2251))+(((0.4)*cj4*r22))+(((-1.0)*x2250*x2255)));
IkReal x2262=(sj0*x2261);
CheckValue<IkReal> x2263=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2263.valid){
continue;
}
CheckValue<IkReal> x2264 = IKatan2WithCheck(IkReal((((sj3*x2254*x2256))+(((4.0e+15)*x2262))+(((-1.0)*x2256*x2259))+(((19107.0)*x2249))+(((-19107.0)*x2253))+((sj3*x2252*x2256))+(((-19300000000.0)*py))+(((-1.0)*x2255*x2256*x2257))+((x2251*x2256*x2257)))),IkReal((((x2252*x2260))+(((3960000000.0)*x2253))+(((19300000000.0)*x2262))+((x2255*x2257*x2258))+(((-1.6e+15)*sj0*x2251*x2257))+((x2258*x2259))+(((-3960000000.0)*x2249))+((x2254*x2260))+(((4.0e+15)*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2264.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2263.value)))+(x2264.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2265=IKsin(j1);
IkReal x2266=sj0*sj0;
IkReal x2267=IKcos(j1);
IkReal x2268=cj0*cj0;
IkReal x2269=((0.4)*cj5);
IkReal x2270=(r21*sj0);
IkReal x2271=((0.4)*sj4);
IkReal x2272=(r21*sj5);
IkReal x2273=(cj3*r22);
IkReal x2274=(r11*sj5);
IkReal x2275=((9.9e-7)*cj0);
IkReal x2276=((0.4)*cj4);
IkReal x2277=(cj3*cj4);
IkReal x2278=(cj5*r00);
IkReal x2279=(r01*sj5);
IkReal x2280=(r20*sj0);
IkReal x2281=(r00*sj4);
IkReal x2282=((9.9e-7)*cj5);
IkReal x2283=(cj0*sj0);
IkReal x2284=((9.9e-7)*sj0);
IkReal x2285=(r10*sj4);
IkReal x2286=((0.4)*x2267);
IkReal x2287=(r20*x2277);
IkReal x2288=((1.93e-6)*x2265);
IkReal x2289=(r10*x2282);
IkReal x2290=((1.93e-6)*x2267);
IkReal x2291=((0.4)*sj3*sj5);
IkReal x2292=((0.4)*x2265);
IkReal x2293=(x2283*x2288);
IkReal x2294=(x2283*x2286);
evalcond[0]=(((r20*x2282))+(((-9.9e-7)*x2272))+(((-1.0)*r20*sj4*x2269))+((r22*x2276))+(((-1.0)*pz))+(((-1.0)*x2290))+(((-1.0)*x2292))+((x2271*x2272)));
evalcond[1]=(((sj0*x2269*x2285))+(((-1.0)*sj0*x2271*x2274))+(((-1.0)*r12*sj0*x2276))+((x2266*x2288))+((x2274*x2284))+(((-1.0)*sj0*x2289))+(((-1.0)*x2266*x2286))+((py*sj0)));
evalcond[2]=(((x2268*x2288))+(((-1.0)*x2275*x2278))+(((-1.0)*x2268*x2286))+(((-1.0)*cj0*x2271*x2279))+((cj0*x2269*x2281))+(((-1.0)*cj0*r02*x2276))+((cj0*px))+((x2275*x2279)));
evalcond[3]=((((-1.0)*x2280*x2282))+((sj0*x2292))+((sj0*x2290))+((r10*x2291))+(((-1.0)*r10*x2269*x2277))+((cj3*x2274*x2276))+((r11*sj3*x2269))+(((-1.0)*cj3*r12*x2271))+(((9.9e-7)*sj5*x2270))+((pz*sj0)));
evalcond[4]=((((-1.0)*cj5*r20*x2275))+((cj0*x2292))+((cj0*x2290))+(((-1.0)*r00*x2269*x2277))+((r01*sj3*x2269))+((x2272*x2275))+((r00*x2291))+((cj3*x2276*x2279))+((cj0*pz))+(((-1.0)*cj3*r02*x2271)));
evalcond[5]=((((-1.0)*x2289))+((sj0*x2271*x2273))+(((-1.0)*sj3*x2269*x2270))+(((-1.0)*cj3*sj5*x2270*x2276))+((sj0*x2288))+py+((x2269*x2277*x2280))+(((-1.0)*sj0*x2286))+(((-1.0)*x2280*x2291))+(((9.9e-7)*x2274)));
evalcond[6]=(((cj0*x2288))+(((-1.0)*cj0*x2286))+(((-1.0)*cj0*r20*x2291))+(((-9.9e-7)*x2278))+((cj0*x2269*x2287))+px+(((-1.0)*cj0*r21*sj3*x2269))+(((9.9e-7)*x2279))+((cj0*x2271*x2273))+(((-1.0)*cj0*cj3*x2272*x2276)));
evalcond[7]=(x2293+(((-1.0)*cj0*x2271*x2274))+((cj0*x2269*x2285))+(((-1.0)*x2278*x2284))+((x2279*x2284))+((px*sj0))+(((-1.0)*cj0*r12*x2276))+(((-1.0)*x2294)));
evalcond[8]=(((sj0*x2269*x2281))+x2293+(((-1.0)*sj0*x2271*x2279))+(((-1.0)*r02*sj0*x2276))+(((-1.0)*x2294))+((cj0*py))+((x2274*x2275))+(((-1.0)*cj5*r10*x2275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2295=(cj4*sj1);
IkReal x2296=(cj1*sj4);
IkReal x2297=((1.0)*cj5);
IkReal x2298=(r21*sj5);
IkReal x2299=(cj1*cj4);
IkReal x2300=(sj1*sj4);
IkReal x2301=(r01*sj4*sj5);
if( IKabs(((((-1.0)*r00*x2296*x2297))+((cj5*r20*x2300))+((r02*x2299))+(((-1.0)*x2298*x2300))+(((-1.0)*r22*x2295))+((r01*sj5*x2296)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2296*x2298))+((r22*x2299))+((r02*x2295))+((r01*sj5*x2300))+(((-1.0)*r00*x2297*x2300))+(((-1.0)*r20*x2296*x2297)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x2296*x2297))+((cj5*r20*x2300))+((r02*x2299))+(((-1.0)*x2298*x2300))+(((-1.0)*r22*x2295))+((r01*sj5*x2296))))+IKsqr((((x2296*x2298))+((r22*x2299))+((r02*x2295))+((r01*sj5*x2300))+(((-1.0)*r00*x2297*x2300))+(((-1.0)*r20*x2296*x2297))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r00*x2296*x2297))+((cj5*r20*x2300))+((r02*x2299))+(((-1.0)*x2298*x2300))+(((-1.0)*r22*x2295))+((r01*sj5*x2296))), (((x2296*x2298))+((r22*x2299))+((r02*x2295))+((r01*sj5*x2300))+(((-1.0)*r00*x2297*x2300))+(((-1.0)*r20*x2296*x2297))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2302=IKcos(j2);
IkReal x2303=IKsin(j2);
IkReal x2304=((1.0)*cj3);
IkReal x2305=(cj5*r00);
IkReal x2306=((1.0)*cj4);
IkReal x2307=(r01*sj5);
IkReal x2308=((1.0)*sj4);
IkReal x2309=(cj5*sj3);
IkReal x2310=(cj5*r20);
IkReal x2311=(sj3*sj5);
IkReal x2312=(r21*sj5);
IkReal x2313=(cj1*x2302);
IkReal x2314=(cj3*cj4*sj5);
IkReal x2315=(cj1*x2303);
IkReal x2316=(sj1*x2303);
IkReal x2317=(sj1*x2302);
IkReal x2318=((1.0)*x2316);
evalcond[0]=(x2317+x2315+(((-1.0)*r02*x2306))+((sj4*x2305))+(((-1.0)*x2307*x2308)));
evalcond[1]=((((-1.0)*r22*x2306))+x2313+(((-1.0)*x2308*x2312))+((sj4*x2310))+(((-1.0)*x2318)));
evalcond[2]=((((-1.93e-6)*cj1))+(((9.9e-7)*x2310))+(((-1.0)*pz))+(((-9.9e-7)*x2312))+(((-0.4)*sj1))+(((0.4)*x2313))+(((-0.4)*x2316)));
evalcond[3]=((((-9.9e-7)*x2307))+(((0.4)*cj1))+(((-1.0)*px))+(((-1.93e-6)*sj1))+(((0.4)*x2317))+(((0.4)*x2315))+(((9.9e-7)*x2305)));
evalcond[4]=(x2313+(((-1.0)*r02*sj4*x2304))+((cj3*cj4*x2307))+((r00*x2311))+((r01*x2309))+(((-1.0)*cj4*x2304*x2305))+(((-1.0)*x2318)));
evalcond[5]=((((-1.0)*x2315))+(((-1.0)*x2317))+(((-1.0)*cj4*x2304*x2310))+(((-1.0)*r22*sj4*x2304))+((r20*x2311))+((r21*x2309))+((cj3*cj4*x2312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2319=((1.0)*r01);
IkReal x2320=(sj1*sj4);
IkReal x2321=(cj5*r00);
IkReal x2322=(cj1*cj4);
IkReal x2323=(cj5*r20);
IkReal x2324=(cj1*sj4);
IkReal x2325=(sj5*x2324);
IkReal x2326=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*r22*x2326))+((x2321*x2324))+(((-1.0)*x2319*x2325))+(((-1.0)*r21*sj5*x2320))+((x2320*x2323))+(((-1.0)*r02*x2322)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x2322))+((r21*x2325))+(((-1.0)*sj5*x2319*x2320))+((x2320*x2321))+(((-1.0)*r02*x2326))+(((-1.0)*x2323*x2324)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x2326))+((x2321*x2324))+(((-1.0)*x2319*x2325))+(((-1.0)*r21*sj5*x2320))+((x2320*x2323))+(((-1.0)*r02*x2322))))+IKsqr((((r22*x2322))+((r21*x2325))+(((-1.0)*sj5*x2319*x2320))+((x2320*x2321))+(((-1.0)*r02*x2326))+(((-1.0)*x2323*x2324))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x2326))+((x2321*x2324))+(((-1.0)*x2319*x2325))+(((-1.0)*r21*sj5*x2320))+((x2320*x2323))+(((-1.0)*r02*x2322))), (((r22*x2322))+((r21*x2325))+(((-1.0)*sj5*x2319*x2320))+((x2320*x2321))+(((-1.0)*r02*x2326))+(((-1.0)*x2323*x2324))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2327=IKcos(j2);
IkReal x2328=IKsin(j2);
IkReal x2329=((1.0)*cj3);
IkReal x2330=(cj5*r00);
IkReal x2331=((1.0)*cj4);
IkReal x2332=(r01*sj5);
IkReal x2333=((1.0)*sj4);
IkReal x2334=(cj5*sj3);
IkReal x2335=(cj5*r20);
IkReal x2336=((1.0)*sj1);
IkReal x2337=(sj3*sj5);
IkReal x2338=((0.4)*sj1);
IkReal x2339=(r21*sj5);
IkReal x2340=(cj1*x2327);
IkReal x2341=(cj3*cj4*sj5);
IkReal x2342=((0.4)*x2328);
IkReal x2343=(x2327*x2336);
IkReal x2344=((1.0)*cj1*x2328);
IkReal x2345=(x2344+x2343);
evalcond[0]=((((-1.0)*x2328*x2336))+x2340+(((-1.0)*r22*x2331))+(((-1.0)*x2333*x2339))+((sj4*x2335)));
evalcond[1]=((((-1.0)*x2332*x2333))+(((-1.0)*r02*x2331))+((sj4*x2330))+(((-1.0)*x2345)));
evalcond[2]=((((0.4)*x2340))+(((-1.93e-6)*cj1))+(((-1.0)*x2338))+(((-1.0)*x2328*x2338))+(((9.9e-7)*x2335))+(((-1.0)*pz))+(((-9.9e-7)*x2339)));
evalcond[3]=((((9.9e-7)*x2330))+(((1.93e-6)*sj1))+(((-1.0)*cj1*x2342))+(((-1.0)*px))+(((-9.9e-7)*x2332))+(((-1.0)*x2327*x2338))+(((-0.4)*cj1)));
evalcond[4]=((((-1.0)*cj4*x2329*x2330))+(((-1.0)*x2340))+((sj1*x2328))+((r01*x2334))+((r00*x2337))+((cj3*cj4*x2332))+(((-1.0)*r02*sj4*x2329)));
evalcond[5]=(((r21*x2334))+(((-1.0)*cj4*x2329*x2335))+(((-1.0)*r22*sj4*x2329))+((cj3*cj4*x2339))+(((-1.0)*x2345))+((r20*x2337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2346=(cj4*r12);
IkReal x2347=(cj4*r22);
IkReal x2348=(cj1*sj4);
IkReal x2349=(r11*sj5);
IkReal x2350=(r21*sj5);
IkReal x2351=((1.0)*sj1);
IkReal x2352=(sj1*sj4);
IkReal x2353=(cj5*r20);
IkReal x2354=((1.0)*cj5*r10);
if( IKabs(((((-1.0)*x2347*x2351))+(((-1.0)*sj4*x2350*x2351))+((x2352*x2353))+(((-1.0)*x2348*x2354))+((x2348*x2349))+((cj1*x2346)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x2346))+((x2348*x2350))+(((-1.0)*x2348*x2353))+((cj1*x2347))+((x2349*x2352))+(((-1.0)*cj5*r10*sj4*x2351)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2347*x2351))+(((-1.0)*sj4*x2350*x2351))+((x2352*x2353))+(((-1.0)*x2348*x2354))+((x2348*x2349))+((cj1*x2346))))+IKsqr((((sj1*x2346))+((x2348*x2350))+(((-1.0)*x2348*x2353))+((cj1*x2347))+((x2349*x2352))+(((-1.0)*cj5*r10*sj4*x2351))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2347*x2351))+(((-1.0)*sj4*x2350*x2351))+((x2352*x2353))+(((-1.0)*x2348*x2354))+((x2348*x2349))+((cj1*x2346))), (((sj1*x2346))+((x2348*x2350))+(((-1.0)*x2348*x2353))+((cj1*x2347))+((x2349*x2352))+(((-1.0)*cj5*r10*sj4*x2351))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2355=IKcos(j2);
IkReal x2356=IKsin(j2);
IkReal x2357=(cj3*cj4);
IkReal x2358=(r21*sj5);
IkReal x2359=((1.0)*r22);
IkReal x2360=(cj5*r10);
IkReal x2361=(cj5*r20);
IkReal x2362=(cj5*sj3);
IkReal x2363=(cj3*sj4);
IkReal x2364=(r11*sj5);
IkReal x2365=((1.0)*sj4);
IkReal x2366=((1.0)*r12);
IkReal x2367=(sj3*sj5);
IkReal x2368=(cj1*x2355);
IkReal x2369=(cj1*x2356);
IkReal x2370=(sj1*x2356);
IkReal x2371=(sj1*x2355);
IkReal x2372=((1.0)*x2370);
evalcond[0]=(x2371+x2369+(((-1.0)*cj4*x2366))+(((-1.0)*x2364*x2365))+((sj4*x2360)));
evalcond[1]=(x2368+(((-1.0)*x2372))+(((-1.0)*x2358*x2365))+((sj4*x2361))+(((-1.0)*cj4*x2359)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-1.0)*pz))+(((-0.4)*x2370))+(((-9.9e-7)*x2358))+(((0.4)*x2368))+(((9.9e-7)*x2361))+(((-0.4)*sj1)));
evalcond[3]=((((0.4)*cj1))+(((-1.0)*py))+(((-1.93e-6)*sj1))+(((0.4)*x2369))+(((-9.9e-7)*x2364))+(((0.4)*x2371))+(((9.9e-7)*x2360)));
evalcond[4]=(((r11*x2362))+x2368+(((-1.0)*x2372))+((r10*x2367))+(((-1.0)*x2357*x2360))+((x2357*x2364))+(((-1.0)*x2363*x2366)));
evalcond[5]=(((r20*x2367))+((x2357*x2358))+(((-1.0)*x2371))+(((-1.0)*x2369))+(((-1.0)*x2359*x2363))+(((-1.0)*x2357*x2361))+((r21*x2362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2373=((1.0)*cj1);
IkReal x2374=(sj4*sj5);
IkReal x2375=(cj5*sj4);
IkReal x2376=((1.0)*sj1);
IkReal x2377=(sj1*x2375);
IkReal x2378=(cj4*x2376);
if( IKabs(((((-1.0)*r21*x2374*x2376))+((r20*x2377))+(((-1.0)*cj4*r12*x2373))+((cj1*r10*x2375))+(((-1.0)*r11*x2373*x2374))+(((-1.0)*r22*x2378)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+(((-1.0)*r11*x2374*x2376))+((r10*x2377))+((cj1*r21*x2374))+(((-1.0)*r12*x2378))+(((-1.0)*r20*x2373*x2375)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x2374*x2376))+((r20*x2377))+(((-1.0)*cj4*r12*x2373))+((cj1*r10*x2375))+(((-1.0)*r11*x2373*x2374))+(((-1.0)*r22*x2378))))+IKsqr((((cj1*cj4*r22))+(((-1.0)*r11*x2374*x2376))+((r10*x2377))+((cj1*r21*x2374))+(((-1.0)*r12*x2378))+(((-1.0)*r20*x2373*x2375))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x2374*x2376))+((r20*x2377))+(((-1.0)*cj4*r12*x2373))+((cj1*r10*x2375))+(((-1.0)*r11*x2373*x2374))+(((-1.0)*r22*x2378))), (((cj1*cj4*r22))+(((-1.0)*r11*x2374*x2376))+((r10*x2377))+((cj1*r21*x2374))+(((-1.0)*r12*x2378))+(((-1.0)*r20*x2373*x2375))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2379=IKcos(j2);
IkReal x2380=IKsin(j2);
IkReal x2381=(cj3*cj4);
IkReal x2382=(r21*sj5);
IkReal x2383=((1.0)*r22);
IkReal x2384=(cj5*r10);
IkReal x2385=(cj5*r20);
IkReal x2386=(cj5*sj3);
IkReal x2387=((1.0)*sj1);
IkReal x2388=(cj3*sj4);
IkReal x2389=(sj3*sj5);
IkReal x2390=(r11*sj5);
IkReal x2391=((1.0)*sj4);
IkReal x2392=((1.0)*r12);
IkReal x2393=((0.4)*sj1);
IkReal x2394=(cj1*x2379);
IkReal x2395=((0.4)*x2380);
IkReal x2396=(x2379*x2387);
IkReal x2397=((1.0)*cj1*x2380);
IkReal x2398=(x2396+x2397);
evalcond[0]=((((-1.0)*x2380*x2387))+((sj4*x2385))+x2394+(((-1.0)*cj4*x2383))+(((-1.0)*x2382*x2391)));
evalcond[1]=(((sj4*x2384))+(((-1.0)*x2390*x2391))+(((-1.0)*cj4*x2392))+(((-1.0)*x2398)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x2382))+(((-1.0)*x2380*x2393))+(((0.4)*x2394))+(((-1.0)*pz))+(((-1.0)*x2393))+(((9.9e-7)*x2385)));
evalcond[3]=((((-9.9e-7)*x2390))+(((-1.0)*cj1*x2395))+(((1.93e-6)*sj1))+(((-1.0)*py))+(((-1.0)*x2379*x2393))+(((9.9e-7)*x2384))+(((-0.4)*cj1)));
evalcond[4]=(((x2381*x2390))+(((-1.0)*x2394))+(((-1.0)*x2381*x2384))+((r10*x2389))+(((-1.0)*x2388*x2392))+((r11*x2386))+((sj1*x2380)));
evalcond[5]=(((x2381*x2382))+((r20*x2389))+(((-1.0)*x2383*x2388))+(((-1.0)*x2398))+(((-1.0)*x2381*x2385))+((r21*x2386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2399=((1.0)*sj1);
IkReal x2400=(cj5*sj4);
IkReal x2401=(r20*sj0);
IkReal x2402=((1.0)*cj1);
IkReal x2403=(cj4*r12);
IkReal x2404=(cj4*r22*sj0);
IkReal x2405=(r11*sj4*sj5);
IkReal x2406=(r21*sj0*sj4*sj5);
CheckValue<IkReal> x2407 = IKatan2WithCheck(IkReal(((((-1.0)*x2399*x2404))+(((-1.0)*x2399*x2406))+((sj1*x2400*x2401))+(((-1.0)*r10*x2400*x2402))+((cj1*x2403))+((cj1*x2405)))),IkReal(((((-1.0)*x2400*x2401*x2402))+((cj1*x2406))+((cj1*x2404))+((sj1*x2403))+((sj1*x2405))+(((-1.0)*r10*x2399*x2400)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2407.valid){
continue;
}
CheckValue<IkReal> x2408=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2408.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2407.value)+(((1.5707963267949)*(x2408.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2409=IKsin(j2);
IkReal x2410=IKcos(j2);
IkReal x2411=((1.0)*cj3);
IkReal x2412=(cj5*r00);
IkReal x2413=(cj0*cj1);
IkReal x2414=(cj5*r10);
IkReal x2415=(r01*sj5);
IkReal x2416=((1.0)*sj4);
IkReal x2417=(cj5*sj3);
IkReal x2418=(cj1*sj0);
IkReal x2419=(sj3*sj5);
IkReal x2420=(cj5*r20);
IkReal x2421=((1.0)*cj4);
IkReal x2422=((1.93e-6)*sj1);
IkReal x2423=(r11*sj5);
IkReal x2424=(r21*sj5);
IkReal x2425=(cj1*x2410);
IkReal x2426=(cj3*cj4*sj5);
IkReal x2427=((0.4)*x2409);
IkReal x2428=(sj1*x2410);
IkReal x2429=((1.0)*sj1*x2409);
evalcond[0]=(x2425+((sj4*x2420))+(((-1.0)*r22*x2421))+(((-1.0)*x2416*x2424))+(((-1.0)*x2429)));
evalcond[1]=((((-1.0)*r02*x2421))+((x2409*x2413))+(((-1.0)*x2415*x2416))+((sj4*x2412))+((cj0*x2428)));
evalcond[2]=(((x2409*x2418))+((sj4*x2414))+((sj0*x2428))+(((-1.0)*r12*x2421))+(((-1.0)*x2416*x2423)));
evalcond[3]=((((-1.93e-6)*cj1))+(((9.9e-7)*x2420))+(((-1.0)*pz))+(((-9.9e-7)*x2424))+(((-1.0)*sj1*x2427))+(((0.4)*x2425))+(((-0.4)*sj1)));
evalcond[4]=(((x2413*x2427))+(((0.4)*x2413))+(((0.4)*cj0*x2428))+(((-1.0)*px))+(((9.9e-7)*x2412))+(((-1.0)*cj0*x2422))+(((-9.9e-7)*x2415)));
evalcond[5]=((((0.4)*sj0*x2428))+((x2418*x2427))+(((0.4)*x2418))+(((-1.0)*sj0*x2422))+(((-1.0)*py))+(((9.9e-7)*x2414))+(((-9.9e-7)*x2423)));
evalcond[6]=((((-1.0)*cj1*x2409))+((r21*x2417))+(((-1.0)*x2428))+((r20*x2419))+((cj3*cj4*x2424))+(((-1.0)*r22*sj4*x2411))+(((-1.0)*cj4*x2411*x2420)));
evalcond[7]=(((x2410*x2413))+((r01*x2417))+((r00*x2419))+(((-1.0)*r02*sj4*x2411))+(((-1.0)*cj4*x2411*x2412))+(((-1.0)*cj0*x2429))+((cj3*cj4*x2415)));
evalcond[8]=(((r11*x2417))+((r10*x2419))+((x2410*x2418))+(((-1.0)*sj0*x2429))+(((-1.0)*r12*sj4*x2411))+(((-1.0)*cj4*x2411*x2414))+((cj3*cj4*x2423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2430=((1.0)*cj0);
IkReal x2431=(cj4*r02);
IkReal x2432=(cj1*sj4);
IkReal x2433=(cj4*r22);
IkReal x2434=(cj5*r20);
IkReal x2435=(sj1*sj4);
IkReal x2436=(sj5*x2435);
IkReal x2437=((1.0)*cj5*r00);
CheckValue<IkReal> x2438=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2438.valid){
continue;
}
CheckValue<IkReal> x2439 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x2430*x2436))+(((-1.0)*sj1*x2430*x2433))+((r01*sj5*x2432))+(((-1.0)*x2432*x2437))+((cj1*x2431))+((cj0*x2434*x2435)))),IkReal((((r01*x2436))+(((-1.0)*x2430*x2432*x2434))+((cj0*cj1*x2433))+(((-1.0)*x2435*x2437))+((cj0*r21*sj5*x2432))+((sj1*x2431)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2439.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2438.value)))+(x2439.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2440=IKsin(j2);
IkReal x2441=IKcos(j2);
IkReal x2442=((1.0)*cj3);
IkReal x2443=(cj5*r00);
IkReal x2444=(cj0*cj1);
IkReal x2445=(cj5*r10);
IkReal x2446=(r01*sj5);
IkReal x2447=((1.0)*sj4);
IkReal x2448=(cj5*sj3);
IkReal x2449=(cj1*sj0);
IkReal x2450=(sj3*sj5);
IkReal x2451=(cj5*r20);
IkReal x2452=((1.0)*cj4);
IkReal x2453=((1.93e-6)*sj1);
IkReal x2454=(r11*sj5);
IkReal x2455=(r21*sj5);
IkReal x2456=(cj1*x2441);
IkReal x2457=(cj3*cj4*sj5);
IkReal x2458=((0.4)*x2440);
IkReal x2459=(sj1*x2441);
IkReal x2460=((1.0)*sj1*x2440);
evalcond[0]=(x2456+((sj4*x2451))+(((-1.0)*r22*x2452))+(((-1.0)*x2460))+(((-1.0)*x2447*x2455)));
evalcond[1]=(((x2440*x2444))+((sj4*x2443))+((cj0*x2459))+(((-1.0)*x2446*x2447))+(((-1.0)*r02*x2452)));
evalcond[2]=(((sj0*x2459))+((x2440*x2449))+((sj4*x2445))+(((-1.0)*r12*x2452))+(((-1.0)*x2447*x2454)));
evalcond[3]=((((-1.93e-6)*cj1))+(((9.9e-7)*x2451))+(((-1.0)*pz))+(((-9.9e-7)*x2455))+(((-0.4)*sj1))+(((-1.0)*sj1*x2458))+(((0.4)*x2456)));
evalcond[4]=((((9.9e-7)*x2443))+(((-1.0)*cj0*x2453))+(((-1.0)*px))+((x2444*x2458))+(((0.4)*cj0*x2459))+(((-9.9e-7)*x2446))+(((0.4)*x2444)));
evalcond[5]=((((0.4)*sj0*x2459))+(((-1.0)*sj0*x2453))+(((9.9e-7)*x2445))+((x2449*x2458))+(((-1.0)*py))+(((-9.9e-7)*x2454))+(((0.4)*x2449)));
evalcond[6]=((((-1.0)*cj4*x2442*x2451))+((cj3*cj4*x2455))+(((-1.0)*x2459))+((r20*x2450))+(((-1.0)*r22*sj4*x2442))+((r21*x2448))+(((-1.0)*cj1*x2440)));
evalcond[7]=((((-1.0)*cj0*x2460))+(((-1.0)*cj4*x2442*x2443))+((cj3*cj4*x2446))+((r00*x2450))+((r01*x2448))+(((-1.0)*r02*sj4*x2442))+((x2441*x2444)));
evalcond[8]=(((r10*x2450))+(((-1.0)*cj4*x2442*x2445))+((cj3*cj4*x2454))+((r11*x2448))+(((-1.0)*r12*sj4*x2442))+((x2441*x2449))+(((-1.0)*sj0*x2460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2461=cj0*cj0;
IkReal x2462=(cj0*px);
IkReal x2463=(cj5*r20);
IkReal x2464=(r21*sj5);
IkReal x2465=((0.4)*sj4);
IkReal x2466=((77.2)*sj4);
IkReal x2467=(cj0*cj4*r02);
IkReal x2468=(cj0*r01*sj5);
IkReal x2469=(cj0*cj5*r00);
IkReal x2470=(((x2464*x2465))+(((-1.0)*x2463*x2465))+(((9.9e-7)*x2463))+(((-1.0)*pz))+(((-9.9e-7)*x2464))+(((0.4)*cj4*r22)));
IkReal x2471=(x2461*x2470);
CheckValue<IkReal> x2472=IKPowWithIntegerCheck(IKsign(x2461),-1);
if(!x2472.valid){
continue;
}
CheckValue<IkReal> x2473 = IKatan2WithCheck(IkReal(((((193.0)*x2462))+(((0.00019107)*x2468))+(((-0.00019107)*x2469))+(((-1.0)*x2466*x2468))+(((-40000000.0)*x2471))+((x2466*x2469))+(((-77.2)*x2467)))),IkReal(((((16000000.0)*sj4*x2468))+(((-40000000.0)*x2462))+(((-193.0)*x2471))+(((-39.6)*x2468))+(((-16000000.0)*sj4*x2469))+(((16000000.0)*x2467))+(((39.6)*x2469)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2473.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x2472.value)))+(x2473.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2474=IKsin(j1);
IkReal x2475=sj0*sj0;
IkReal x2476=IKcos(j1);
IkReal x2477=cj0*cj0;
IkReal x2478=((0.4)*cj5);
IkReal x2479=(r21*sj0);
IkReal x2480=((0.4)*sj4);
IkReal x2481=(r21*sj5);
IkReal x2482=(cj3*r22);
IkReal x2483=(r11*sj5);
IkReal x2484=((9.9e-7)*cj0);
IkReal x2485=((0.4)*cj4);
IkReal x2486=(cj3*cj4);
IkReal x2487=(cj5*r00);
IkReal x2488=(r01*sj5);
IkReal x2489=(r20*sj0);
IkReal x2490=(r00*sj4);
IkReal x2491=((9.9e-7)*cj5);
IkReal x2492=(cj0*sj0);
IkReal x2493=((9.9e-7)*sj0);
IkReal x2494=(r10*sj4);
IkReal x2495=((0.4)*x2476);
IkReal x2496=(r20*x2486);
IkReal x2497=((1.93e-6)*x2474);
IkReal x2498=(r10*x2491);
IkReal x2499=((1.93e-6)*x2476);
IkReal x2500=((0.4)*sj3*sj5);
IkReal x2501=((0.4)*x2474);
IkReal x2502=(x2492*x2497);
IkReal x2503=(x2492*x2495);
evalcond[0]=((((-1.0)*x2501))+((r22*x2485))+(((-1.0)*x2499))+((x2480*x2481))+(((-9.9e-7)*x2481))+(((-1.0)*pz))+(((-1.0)*r20*sj4*x2478))+((r20*x2491)));
evalcond[1]=((((-1.0)*sj0*x2480*x2483))+(((-1.0)*sj0*x2498))+((x2483*x2493))+((x2475*x2497))+(((-1.0)*x2475*x2495))+((py*sj0))+(((-1.0)*r12*sj0*x2485))+((sj0*x2478*x2494)));
evalcond[2]=((((-1.0)*cj0*r02*x2485))+(((-1.0)*x2477*x2495))+((x2477*x2497))+(((-1.0)*cj0*x2480*x2488))+((x2484*x2488))+((cj0*x2478*x2490))+(((-1.0)*x2484*x2487))+((cj0*px)));
evalcond[3]=((((9.9e-7)*sj5*x2479))+((r10*x2500))+(((-1.0)*cj3*r12*x2480))+(((-1.0)*r10*x2478*x2486))+((sj0*x2501))+(((-1.0)*x2489*x2491))+((pz*sj0))+((cj3*x2483*x2485))+((r11*sj3*x2478))+((sj0*x2499)));
evalcond[4]=(((r01*sj3*x2478))+((cj0*x2501))+((x2481*x2484))+((cj3*x2485*x2488))+(((-1.0)*cj3*r02*x2480))+(((-1.0)*r00*x2478*x2486))+(((-1.0)*cj5*r20*x2484))+((cj0*x2499))+((cj0*pz))+((r00*x2500)));
evalcond[5]=(((x2478*x2486*x2489))+(((-1.0)*cj3*sj5*x2479*x2485))+((sj0*x2480*x2482))+(((-1.0)*x2498))+(((-1.0)*sj0*x2495))+(((9.9e-7)*x2483))+py+(((-1.0)*x2489*x2500))+(((-1.0)*sj3*x2478*x2479))+((sj0*x2497)));
evalcond[6]=((((-1.0)*cj0*x2495))+(((-1.0)*cj0*cj3*x2481*x2485))+((cj0*x2480*x2482))+(((-1.0)*cj0*r20*x2500))+(((-9.9e-7)*x2487))+(((9.9e-7)*x2488))+px+(((-1.0)*cj0*r21*sj3*x2478))+((cj0*x2497))+((cj0*x2478*x2496)));
evalcond[7]=((((-1.0)*x2503))+x2502+((x2488*x2493))+(((-1.0)*cj0*x2480*x2483))+(((-1.0)*cj0*r12*x2485))+((px*sj0))+((cj0*x2478*x2494))+(((-1.0)*x2487*x2493)));
evalcond[8]=((((-1.0)*x2503))+x2502+(((-1.0)*sj0*x2480*x2488))+((x2483*x2484))+(((-1.0)*r02*sj0*x2485))+(((-1.0)*cj5*r10*x2484))+((cj0*py))+((sj0*x2478*x2490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2504=(cj4*sj1);
IkReal x2505=(cj1*sj4);
IkReal x2506=((1.0)*cj5);
IkReal x2507=(r21*sj5);
IkReal x2508=(cj1*cj4);
IkReal x2509=(sj1*sj4);
IkReal x2510=(r01*sj4*sj5);
if( IKabs((((r01*sj5*x2505))+(((-1.0)*r00*x2505*x2506))+((r02*x2508))+((cj5*r20*x2509))+(((-1.0)*r22*x2504))+(((-1.0)*x2507*x2509)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj5*x2509))+((r02*x2504))+((r22*x2508))+(((-1.0)*r00*x2506*x2509))+(((-1.0)*r20*x2505*x2506))+((x2505*x2507)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj5*x2505))+(((-1.0)*r00*x2505*x2506))+((r02*x2508))+((cj5*r20*x2509))+(((-1.0)*r22*x2504))+(((-1.0)*x2507*x2509))))+IKsqr((((r01*sj5*x2509))+((r02*x2504))+((r22*x2508))+(((-1.0)*r00*x2506*x2509))+(((-1.0)*r20*x2505*x2506))+((x2505*x2507))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r01*sj5*x2505))+(((-1.0)*r00*x2505*x2506))+((r02*x2508))+((cj5*r20*x2509))+(((-1.0)*r22*x2504))+(((-1.0)*x2507*x2509))), (((r01*sj5*x2509))+((r02*x2504))+((r22*x2508))+(((-1.0)*r00*x2506*x2509))+(((-1.0)*r20*x2505*x2506))+((x2505*x2507))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2511=IKcos(j2);
IkReal x2512=IKsin(j2);
IkReal x2513=((1.0)*cj3);
IkReal x2514=(cj5*r00);
IkReal x2515=((1.0)*cj4);
IkReal x2516=(r01*sj5);
IkReal x2517=((1.0)*sj4);
IkReal x2518=(cj5*sj3);
IkReal x2519=(cj5*r20);
IkReal x2520=(sj3*sj5);
IkReal x2521=(r21*sj5);
IkReal x2522=(cj1*x2511);
IkReal x2523=(cj3*cj4*sj5);
IkReal x2524=(cj1*x2512);
IkReal x2525=(sj1*x2512);
IkReal x2526=(sj1*x2511);
IkReal x2527=((1.0)*x2525);
evalcond[0]=(x2524+x2526+((sj4*x2514))+(((-1.0)*x2516*x2517))+(((-1.0)*r02*x2515)));
evalcond[1]=(x2522+((sj4*x2519))+(((-1.0)*x2517*x2521))+(((-1.0)*r22*x2515))+(((-1.0)*x2527)));
evalcond[2]=((((-1.93e-6)*cj1))+(((9.9e-7)*x2519))+(((-1.0)*pz))+(((-0.4)*x2525))+(((-9.9e-7)*x2521))+(((-0.4)*sj1))+(((0.4)*x2522)));
evalcond[3]=((((-9.9e-7)*x2516))+(((0.4)*cj1))+(((9.9e-7)*x2514))+(((-1.0)*px))+(((-1.93e-6)*sj1))+(((0.4)*x2526))+(((0.4)*x2524)));
evalcond[4]=(x2522+(((-1.0)*cj4*x2513*x2514))+(((-1.0)*r02*sj4*x2513))+((cj3*cj4*x2516))+((r00*x2520))+((r01*x2518))+(((-1.0)*x2527)));
evalcond[5]=((((-1.0)*x2526))+(((-1.0)*x2524))+(((-1.0)*cj4*x2513*x2519))+((r21*x2518))+((r20*x2520))+(((-1.0)*r22*sj4*x2513))+((cj3*cj4*x2521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2528=((1.0)*r01);
IkReal x2529=(sj1*sj4);
IkReal x2530=(cj5*r00);
IkReal x2531=(cj1*cj4);
IkReal x2532=(cj5*r20);
IkReal x2533=(cj1*sj4);
IkReal x2534=(sj5*x2533);
IkReal x2535=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*x2528*x2534))+((x2530*x2533))+(((-1.0)*r21*sj5*x2529))+(((-1.0)*r22*x2535))+((x2529*x2532))+(((-1.0)*r02*x2531)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2532*x2533))+(((-1.0)*r02*x2535))+(((-1.0)*sj5*x2528*x2529))+((r21*x2534))+((r22*x2531))+((x2529*x2530)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2528*x2534))+((x2530*x2533))+(((-1.0)*r21*sj5*x2529))+(((-1.0)*r22*x2535))+((x2529*x2532))+(((-1.0)*r02*x2531))))+IKsqr(((((-1.0)*x2532*x2533))+(((-1.0)*r02*x2535))+(((-1.0)*sj5*x2528*x2529))+((r21*x2534))+((r22*x2531))+((x2529*x2530))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2528*x2534))+((x2530*x2533))+(((-1.0)*r21*sj5*x2529))+(((-1.0)*r22*x2535))+((x2529*x2532))+(((-1.0)*r02*x2531))), ((((-1.0)*x2532*x2533))+(((-1.0)*r02*x2535))+(((-1.0)*sj5*x2528*x2529))+((r21*x2534))+((r22*x2531))+((x2529*x2530))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2536=IKcos(j2);
IkReal x2537=IKsin(j2);
IkReal x2538=((1.0)*cj3);
IkReal x2539=(cj5*r00);
IkReal x2540=((1.0)*cj4);
IkReal x2541=(r01*sj5);
IkReal x2542=((1.0)*sj4);
IkReal x2543=(cj5*sj3);
IkReal x2544=(cj5*r20);
IkReal x2545=((1.0)*sj1);
IkReal x2546=(sj3*sj5);
IkReal x2547=((0.4)*sj1);
IkReal x2548=(r21*sj5);
IkReal x2549=(cj1*x2536);
IkReal x2550=(cj3*cj4*sj5);
IkReal x2551=((0.4)*x2537);
IkReal x2552=(x2536*x2545);
IkReal x2553=((1.0)*cj1*x2537);
IkReal x2554=(x2552+x2553);
evalcond[0]=((((-1.0)*x2542*x2548))+x2549+(((-1.0)*r22*x2540))+((sj4*x2544))+(((-1.0)*x2537*x2545)));
evalcond[1]=((((-1.0)*x2541*x2542))+((sj4*x2539))+(((-1.0)*r02*x2540))+(((-1.0)*x2554)));
evalcond[2]=((((-1.93e-6)*cj1))+(((9.9e-7)*x2544))+(((-1.0)*pz))+(((-9.9e-7)*x2548))+(((-1.0)*x2547))+(((0.4)*x2549))+(((-1.0)*x2537*x2547)));
evalcond[3]=((((-1.0)*x2536*x2547))+(((9.9e-7)*x2539))+(((1.93e-6)*sj1))+(((-1.0)*px))+(((-1.0)*cj1*x2551))+(((-9.9e-7)*x2541))+(((-0.4)*cj1)));
evalcond[4]=(((cj3*cj4*x2541))+((sj1*x2537))+(((-1.0)*cj4*x2538*x2539))+(((-1.0)*x2549))+((r00*x2546))+((r01*x2543))+(((-1.0)*r02*sj4*x2538)));
evalcond[5]=(((cj3*cj4*x2548))+((r21*x2543))+((r20*x2546))+(((-1.0)*r22*sj4*x2538))+(((-1.0)*x2554))+(((-1.0)*cj4*x2538*x2544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2555=(cj4*r12);
IkReal x2556=(cj4*r22);
IkReal x2557=(cj1*sj4);
IkReal x2558=(r11*sj5);
IkReal x2559=(r21*sj5);
IkReal x2560=((1.0)*sj1);
IkReal x2561=(sj1*sj4);
IkReal x2562=(cj5*r20);
IkReal x2563=((1.0)*cj5*r10);
if( IKabs((((cj1*x2555))+(((-1.0)*x2556*x2560))+(((-1.0)*x2557*x2563))+(((-1.0)*sj4*x2559*x2560))+((x2557*x2558))+((x2561*x2562)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2557*x2562))+((cj1*x2556))+((x2558*x2561))+(((-1.0)*cj5*r10*sj4*x2560))+((x2557*x2559))+((sj1*x2555)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x2555))+(((-1.0)*x2556*x2560))+(((-1.0)*x2557*x2563))+(((-1.0)*sj4*x2559*x2560))+((x2557*x2558))+((x2561*x2562))))+IKsqr(((((-1.0)*x2557*x2562))+((cj1*x2556))+((x2558*x2561))+(((-1.0)*cj5*r10*sj4*x2560))+((x2557*x2559))+((sj1*x2555))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x2555))+(((-1.0)*x2556*x2560))+(((-1.0)*x2557*x2563))+(((-1.0)*sj4*x2559*x2560))+((x2557*x2558))+((x2561*x2562))), ((((-1.0)*x2557*x2562))+((cj1*x2556))+((x2558*x2561))+(((-1.0)*cj5*r10*sj4*x2560))+((x2557*x2559))+((sj1*x2555))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2564=IKcos(j2);
IkReal x2565=IKsin(j2);
IkReal x2566=(cj3*cj4);
IkReal x2567=(r21*sj5);
IkReal x2568=((1.0)*r22);
IkReal x2569=(cj5*r10);
IkReal x2570=(cj5*r20);
IkReal x2571=(cj5*sj3);
IkReal x2572=(cj3*sj4);
IkReal x2573=(r11*sj5);
IkReal x2574=((1.0)*sj4);
IkReal x2575=((1.0)*r12);
IkReal x2576=(sj3*sj5);
IkReal x2577=(cj1*x2564);
IkReal x2578=(cj1*x2565);
IkReal x2579=(sj1*x2565);
IkReal x2580=(sj1*x2564);
IkReal x2581=((1.0)*x2579);
evalcond[0]=(x2580+x2578+((sj4*x2569))+(((-1.0)*x2573*x2574))+(((-1.0)*cj4*x2575)));
evalcond[1]=((((-1.0)*cj4*x2568))+x2577+(((-1.0)*x2581))+(((-1.0)*x2567*x2574))+((sj4*x2570)));
evalcond[2]=((((-1.93e-6)*cj1))+(((9.9e-7)*x2570))+(((-1.0)*pz))+(((-0.4)*x2579))+(((-9.9e-7)*x2567))+(((0.4)*x2577))+(((-0.4)*sj1)));
evalcond[3]=((((0.4)*x2580))+(((0.4)*cj1))+(((-1.0)*py))+(((-1.93e-6)*sj1))+(((-9.9e-7)*x2573))+(((0.4)*x2578))+(((9.9e-7)*x2569)));
evalcond[4]=(((r10*x2576))+x2577+((r11*x2571))+(((-1.0)*x2581))+((x2566*x2573))+(((-1.0)*x2566*x2569))+(((-1.0)*x2572*x2575)));
evalcond[5]=(((r21*x2571))+(((-1.0)*x2580))+(((-1.0)*x2568*x2572))+(((-1.0)*x2566*x2570))+(((-1.0)*x2578))+((r20*x2576))+((x2566*x2567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2582=((1.0)*cj1);
IkReal x2583=(sj4*sj5);
IkReal x2584=(cj5*sj4);
IkReal x2585=((1.0)*sj1);
IkReal x2586=(sj1*x2584);
IkReal x2587=(cj4*x2585);
if( IKabs(((((-1.0)*cj4*r12*x2582))+(((-1.0)*r21*x2583*x2585))+(((-1.0)*r11*x2582*x2583))+((r20*x2586))+((cj1*r10*x2584))+(((-1.0)*r22*x2587)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+(((-1.0)*r20*x2582*x2584))+(((-1.0)*r11*x2583*x2585))+((cj1*r21*x2583))+((r10*x2586))+(((-1.0)*r12*x2587)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r12*x2582))+(((-1.0)*r21*x2583*x2585))+(((-1.0)*r11*x2582*x2583))+((r20*x2586))+((cj1*r10*x2584))+(((-1.0)*r22*x2587))))+IKsqr((((cj1*cj4*r22))+(((-1.0)*r20*x2582*x2584))+(((-1.0)*r11*x2583*x2585))+((cj1*r21*x2583))+((r10*x2586))+(((-1.0)*r12*x2587))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj4*r12*x2582))+(((-1.0)*r21*x2583*x2585))+(((-1.0)*r11*x2582*x2583))+((r20*x2586))+((cj1*r10*x2584))+(((-1.0)*r22*x2587))), (((cj1*cj4*r22))+(((-1.0)*r20*x2582*x2584))+(((-1.0)*r11*x2583*x2585))+((cj1*r21*x2583))+((r10*x2586))+(((-1.0)*r12*x2587))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2588=IKcos(j2);
IkReal x2589=IKsin(j2);
IkReal x2590=(cj3*cj4);
IkReal x2591=(r21*sj5);
IkReal x2592=((1.0)*r22);
IkReal x2593=(cj5*r10);
IkReal x2594=(cj5*r20);
IkReal x2595=(cj5*sj3);
IkReal x2596=((1.0)*sj1);
IkReal x2597=(cj3*sj4);
IkReal x2598=(sj3*sj5);
IkReal x2599=(r11*sj5);
IkReal x2600=((1.0)*sj4);
IkReal x2601=((1.0)*r12);
IkReal x2602=((0.4)*sj1);
IkReal x2603=(cj1*x2588);
IkReal x2604=((0.4)*x2589);
IkReal x2605=(x2588*x2596);
IkReal x2606=((1.0)*cj1*x2589);
IkReal x2607=(x2605+x2606);
evalcond[0]=((((-1.0)*x2591*x2600))+(((-1.0)*x2589*x2596))+((sj4*x2594))+x2603+(((-1.0)*cj4*x2592)));
evalcond[1]=((((-1.0)*cj4*x2601))+((sj4*x2593))+(((-1.0)*x2607))+(((-1.0)*x2599*x2600)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-1.0)*pz))+(((-9.9e-7)*x2591))+(((9.9e-7)*x2594))+(((-1.0)*x2589*x2602))+(((-1.0)*x2602))+(((0.4)*x2603)));
evalcond[3]=((((1.93e-6)*sj1))+(((-1.0)*py))+(((-1.0)*cj1*x2604))+(((-9.9e-7)*x2599))+(((-1.0)*x2588*x2602))+(((9.9e-7)*x2593))+(((-0.4)*cj1)));
evalcond[4]=((((-1.0)*x2597*x2601))+(((-1.0)*x2603))+((r10*x2598))+(((-1.0)*x2590*x2593))+((r11*x2595))+((sj1*x2589))+((x2590*x2599)));
evalcond[5]=(((r20*x2598))+(((-1.0)*x2590*x2594))+(((-1.0)*x2592*x2597))+(((-1.0)*x2607))+((x2590*x2591))+((r21*x2595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2608=((1.0)*sj1);
IkReal x2609=(cj5*sj4);
IkReal x2610=(r20*sj0);
IkReal x2611=((1.0)*cj1);
IkReal x2612=(cj4*r12);
IkReal x2613=(cj4*r22*sj0);
IkReal x2614=(r11*sj4*sj5);
IkReal x2615=(r21*sj0*sj4*sj5);
CheckValue<IkReal> x2616 = IKatan2WithCheck(IkReal((((sj1*x2609*x2610))+(((-1.0)*x2608*x2615))+(((-1.0)*x2608*x2613))+(((-1.0)*r10*x2609*x2611))+((cj1*x2612))+((cj1*x2614)))),IkReal(((((-1.0)*x2609*x2610*x2611))+((cj1*x2613))+((cj1*x2615))+((sj1*x2612))+((sj1*x2614))+(((-1.0)*r10*x2608*x2609)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2616.valid){
continue;
}
CheckValue<IkReal> x2617=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2617.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2616.value)+(((1.5707963267949)*(x2617.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2618=IKsin(j2);
IkReal x2619=IKcos(j2);
IkReal x2620=((1.0)*cj3);
IkReal x2621=(cj5*r00);
IkReal x2622=(cj0*cj1);
IkReal x2623=(cj5*r10);
IkReal x2624=(r01*sj5);
IkReal x2625=((1.0)*sj4);
IkReal x2626=(cj5*sj3);
IkReal x2627=(cj1*sj0);
IkReal x2628=(sj3*sj5);
IkReal x2629=(cj5*r20);
IkReal x2630=((1.0)*cj4);
IkReal x2631=((1.93e-6)*sj1);
IkReal x2632=(r11*sj5);
IkReal x2633=(r21*sj5);
IkReal x2634=(cj1*x2619);
IkReal x2635=(cj3*cj4*sj5);
IkReal x2636=((0.4)*x2618);
IkReal x2637=(sj1*x2619);
IkReal x2638=((1.0)*sj1*x2618);
evalcond[0]=((((-1.0)*x2638))+((sj4*x2629))+(((-1.0)*x2625*x2633))+(((-1.0)*r22*x2630))+x2634);
evalcond[1]=((((-1.0)*r02*x2630))+(((-1.0)*x2624*x2625))+((cj0*x2637))+((sj4*x2621))+((x2618*x2622)));
evalcond[2]=(((sj0*x2637))+((sj4*x2623))+((x2618*x2627))+(((-1.0)*r12*x2630))+(((-1.0)*x2625*x2632)));
evalcond[3]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x2633))+(((0.4)*x2634))+(((-1.0)*pz))+(((-1.0)*sj1*x2636))+(((9.9e-7)*x2629))+(((-0.4)*sj1)));
evalcond[4]=(((x2622*x2636))+(((-1.0)*px))+(((-9.9e-7)*x2624))+(((-1.0)*cj0*x2631))+(((9.9e-7)*x2621))+(((0.4)*x2622))+(((0.4)*cj0*x2637)));
evalcond[5]=((((0.4)*sj0*x2637))+(((-9.9e-7)*x2632))+(((-1.0)*sj0*x2631))+(((-1.0)*py))+(((9.9e-7)*x2623))+(((0.4)*x2627))+((x2627*x2636)));
evalcond[6]=(((r20*x2628))+((cj3*cj4*x2633))+(((-1.0)*cj4*x2620*x2629))+(((-1.0)*cj1*x2618))+(((-1.0)*x2637))+(((-1.0)*r22*sj4*x2620))+((r21*x2626)));
evalcond[7]=(((r01*x2626))+((r00*x2628))+((x2619*x2622))+(((-1.0)*cj4*x2620*x2621))+(((-1.0)*r02*sj4*x2620))+((cj3*cj4*x2624))+(((-1.0)*cj0*x2638)));
evalcond[8]=(((x2619*x2627))+((cj3*cj4*x2632))+(((-1.0)*cj4*x2620*x2623))+(((-1.0)*r12*sj4*x2620))+(((-1.0)*sj0*x2638))+((r11*x2626))+((r10*x2628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2639=((1.0)*cj0);
IkReal x2640=(cj4*r02);
IkReal x2641=(cj1*sj4);
IkReal x2642=(cj4*r22);
IkReal x2643=(cj5*r20);
IkReal x2644=(sj1*sj4);
IkReal x2645=(sj5*x2644);
IkReal x2646=((1.0)*cj5*r00);
CheckValue<IkReal> x2647 = IKatan2WithCheck(IkReal((((cj0*x2643*x2644))+((cj1*x2640))+((r01*sj5*x2641))+(((-1.0)*r21*x2639*x2645))+(((-1.0)*x2641*x2646))+(((-1.0)*sj1*x2639*x2642)))),IkReal(((((-1.0)*x2644*x2646))+((cj0*r21*sj5*x2641))+((cj0*cj1*x2642))+(((-1.0)*x2639*x2641*x2643))+((r01*x2645))+((sj1*x2640)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2647.valid){
continue;
}
CheckValue<IkReal> x2648=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2648.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2647.value)+(((1.5707963267949)*(x2648.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2649=IKsin(j2);
IkReal x2650=IKcos(j2);
IkReal x2651=((1.0)*cj3);
IkReal x2652=(cj5*r00);
IkReal x2653=(cj0*cj1);
IkReal x2654=(cj5*r10);
IkReal x2655=(r01*sj5);
IkReal x2656=((1.0)*sj4);
IkReal x2657=(cj5*sj3);
IkReal x2658=(cj1*sj0);
IkReal x2659=(sj3*sj5);
IkReal x2660=(cj5*r20);
IkReal x2661=((1.0)*cj4);
IkReal x2662=((1.93e-6)*sj1);
IkReal x2663=(r11*sj5);
IkReal x2664=(r21*sj5);
IkReal x2665=(cj1*x2650);
IkReal x2666=(cj3*cj4*sj5);
IkReal x2667=((0.4)*x2649);
IkReal x2668=(sj1*x2650);
IkReal x2669=((1.0)*sj1*x2649);
evalcond[0]=(((sj4*x2660))+(((-1.0)*x2669))+(((-1.0)*r22*x2661))+(((-1.0)*x2656*x2664))+x2665);
evalcond[1]=(((x2649*x2653))+((sj4*x2652))+(((-1.0)*r02*x2661))+((cj0*x2668))+(((-1.0)*x2655*x2656)));
evalcond[2]=((((-1.0)*r12*x2661))+((x2649*x2658))+((sj0*x2668))+((sj4*x2654))+(((-1.0)*x2656*x2663)));
evalcond[3]=((((9.9e-7)*x2660))+(((-1.93e-6)*cj1))+(((0.4)*x2665))+(((-9.9e-7)*x2664))+(((-1.0)*pz))+(((-1.0)*sj1*x2667))+(((-0.4)*sj1)));
evalcond[4]=((((-1.0)*cj0*x2662))+(((9.9e-7)*x2652))+(((0.4)*x2653))+((x2653*x2667))+(((-9.9e-7)*x2655))+(((-1.0)*px))+(((0.4)*cj0*x2668)));
evalcond[5]=((((9.9e-7)*x2654))+((x2658*x2667))+(((-1.0)*sj0*x2662))+(((0.4)*x2658))+(((-9.9e-7)*x2663))+(((0.4)*sj0*x2668))+(((-1.0)*py)));
evalcond[6]=((((-1.0)*x2668))+((r21*x2657))+(((-1.0)*r22*sj4*x2651))+(((-1.0)*cj1*x2649))+(((-1.0)*cj4*x2651*x2660))+((r20*x2659))+((cj3*cj4*x2664)));
evalcond[7]=((((-1.0)*cj0*x2669))+(((-1.0)*r02*sj4*x2651))+((r00*x2659))+((r01*x2657))+(((-1.0)*cj4*x2651*x2652))+((x2650*x2653))+((cj3*cj4*x2655)));
evalcond[8]=(((r11*x2657))+(((-1.0)*sj0*x2669))+((r10*x2659))+(((-1.0)*cj4*x2651*x2654))+((x2650*x2658))+(((-1.0)*r12*sj4*x2651))+((cj3*cj4*x2663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2670=sj0*sj0;
IkReal x2671=(py*sj0);
IkReal x2672=((77.2)*sj0);
IkReal x2673=(sj4*sj5);
IkReal x2674=(cj4*r12);
IkReal x2675=((16000000.0)*sj0);
IkReal x2676=(cj5*r20);
IkReal x2677=(cj5*r10*sj0);
IkReal x2678=(r11*sj0*sj5);
IkReal x2679=((((0.4)*r21*x2673))+(((-9.9e-7)*r21*sj5))+(((-1.0)*pz))+(((-0.4)*sj4*x2676))+(((0.4)*cj4*r22))+(((9.9e-7)*x2676)));
IkReal x2680=(x2670*x2679);
CheckValue<IkReal> x2681=IKPowWithIntegerCheck(IKsign(x2670),-1);
if(!x2681.valid){
continue;
}
CheckValue<IkReal> x2682 = IKatan2WithCheck(IkReal((((cj5*r10*sj4*x2672))+(((0.00019107)*x2678))+(((193.0)*x2671))+(((-0.00019107)*x2677))+(((-1.0)*x2672*x2674))+(((-1.0)*r11*x2672*x2673))+(((-40000000.0)*x2680)))),IkReal(((((39.6)*x2677))+(((-193.0)*x2680))+(((-39.6)*x2678))+(((-40000000.0)*x2671))+((r11*x2673*x2675))+(((-16000000.0)*sj4*x2677))+((x2674*x2675)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2682.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x2681.value)))+(x2682.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2683=IKsin(j1);
IkReal x2684=sj0*sj0;
IkReal x2685=IKcos(j1);
IkReal x2686=cj0*cj0;
IkReal x2687=((0.4)*cj5);
IkReal x2688=(r21*sj0);
IkReal x2689=((0.4)*sj4);
IkReal x2690=(r21*sj5);
IkReal x2691=(cj3*r22);
IkReal x2692=(r11*sj5);
IkReal x2693=((9.9e-7)*cj0);
IkReal x2694=((0.4)*cj4);
IkReal x2695=(cj3*cj4);
IkReal x2696=(cj5*r00);
IkReal x2697=(r01*sj5);
IkReal x2698=(r20*sj0);
IkReal x2699=(r00*sj4);
IkReal x2700=((9.9e-7)*cj5);
IkReal x2701=(cj0*sj0);
IkReal x2702=((9.9e-7)*sj0);
IkReal x2703=(r10*sj4);
IkReal x2704=((0.4)*x2685);
IkReal x2705=(r20*x2695);
IkReal x2706=((1.93e-6)*x2683);
IkReal x2707=(r10*x2700);
IkReal x2708=((1.93e-6)*x2685);
IkReal x2709=((0.4)*sj3*sj5);
IkReal x2710=((0.4)*x2683);
IkReal x2711=(x2701*x2706);
IkReal x2712=(x2701*x2704);
evalcond[0]=((((-9.9e-7)*x2690))+(((-1.0)*x2710))+((r22*x2694))+(((-1.0)*r20*sj4*x2687))+((x2689*x2690))+(((-1.0)*pz))+((r20*x2700))+(((-1.0)*x2708)));
evalcond[1]=((((-1.0)*x2684*x2704))+(((-1.0)*sj0*x2707))+(((-1.0)*sj0*x2689*x2692))+((x2692*x2702))+((py*sj0))+((x2684*x2706))+((sj0*x2687*x2703))+(((-1.0)*r12*sj0*x2694)));
evalcond[2]=((((-1.0)*cj0*x2689*x2697))+((x2686*x2706))+((x2693*x2697))+(((-1.0)*x2686*x2704))+((cj0*px))+(((-1.0)*x2693*x2696))+((cj0*x2687*x2699))+(((-1.0)*cj0*r02*x2694)));
evalcond[3]=(((sj0*x2708))+(((-1.0)*r10*x2687*x2695))+((sj0*x2710))+((r10*x2709))+((r11*sj3*x2687))+(((9.9e-7)*sj5*x2688))+((cj3*x2692*x2694))+(((-1.0)*cj3*r12*x2689))+((pz*sj0))+(((-1.0)*x2698*x2700)));
evalcond[4]=(((cj3*x2694*x2697))+((r00*x2709))+((r01*sj3*x2687))+(((-1.0)*cj3*r02*x2689))+((cj0*x2708))+(((-1.0)*r00*x2687*x2695))+((cj0*x2710))+(((-1.0)*cj5*r20*x2693))+((x2690*x2693))+((cj0*pz)));
evalcond[5]=(((sj0*x2689*x2691))+((sj0*x2706))+(((-1.0)*sj0*x2704))+(((9.9e-7)*x2692))+(((-1.0)*sj3*x2687*x2688))+((x2687*x2695*x2698))+py+(((-1.0)*x2707))+(((-1.0)*cj3*sj5*x2688*x2694))+(((-1.0)*x2698*x2709)));
evalcond[6]=((((-1.0)*cj0*r20*x2709))+(((-1.0)*cj0*x2704))+(((-9.9e-7)*x2696))+(((-1.0)*cj0*cj3*x2690*x2694))+(((9.9e-7)*x2697))+(((-1.0)*cj0*r21*sj3*x2687))+((cj0*x2706))+px+((cj0*x2689*x2691))+((cj0*x2687*x2705)));
evalcond[7]=((((-1.0)*cj0*r12*x2694))+x2711+(((-1.0)*x2712))+(((-1.0)*cj0*x2689*x2692))+((x2697*x2702))+(((-1.0)*x2696*x2702))+((px*sj0))+((cj0*x2687*x2703)));
evalcond[8]=(x2711+(((-1.0)*cj5*r10*x2693))+(((-1.0)*x2712))+(((-1.0)*r02*sj0*x2694))+(((-1.0)*sj0*x2689*x2697))+((sj0*x2687*x2699))+((cj0*py))+((x2692*x2693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2713=(cj4*sj1);
IkReal x2714=(cj1*sj4);
IkReal x2715=((1.0)*cj5);
IkReal x2716=(r21*sj5);
IkReal x2717=(cj1*cj4);
IkReal x2718=(sj1*sj4);
IkReal x2719=(r01*sj4*sj5);
if( IKabs((((r01*sj5*x2714))+((r02*x2717))+(((-1.0)*x2716*x2718))+((cj5*r20*x2718))+(((-1.0)*r00*x2714*x2715))+(((-1.0)*r22*x2713)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj5*x2718))+((r02*x2713))+((r22*x2717))+(((-1.0)*r20*x2714*x2715))+(((-1.0)*r00*x2715*x2718))+((x2714*x2716)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj5*x2714))+((r02*x2717))+(((-1.0)*x2716*x2718))+((cj5*r20*x2718))+(((-1.0)*r00*x2714*x2715))+(((-1.0)*r22*x2713))))+IKsqr((((r01*sj5*x2718))+((r02*x2713))+((r22*x2717))+(((-1.0)*r20*x2714*x2715))+(((-1.0)*r00*x2715*x2718))+((x2714*x2716))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r01*sj5*x2714))+((r02*x2717))+(((-1.0)*x2716*x2718))+((cj5*r20*x2718))+(((-1.0)*r00*x2714*x2715))+(((-1.0)*r22*x2713))), (((r01*sj5*x2718))+((r02*x2713))+((r22*x2717))+(((-1.0)*r20*x2714*x2715))+(((-1.0)*r00*x2715*x2718))+((x2714*x2716))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2720=IKcos(j2);
IkReal x2721=IKsin(j2);
IkReal x2722=((1.0)*cj3);
IkReal x2723=(cj5*r00);
IkReal x2724=((1.0)*cj4);
IkReal x2725=(r01*sj5);
IkReal x2726=((1.0)*sj4);
IkReal x2727=(cj5*sj3);
IkReal x2728=(cj5*r20);
IkReal x2729=(sj3*sj5);
IkReal x2730=(r21*sj5);
IkReal x2731=(cj1*x2720);
IkReal x2732=(cj3*cj4*sj5);
IkReal x2733=(cj1*x2721);
IkReal x2734=(sj1*x2721);
IkReal x2735=(sj1*x2720);
IkReal x2736=((1.0)*x2734);
evalcond[0]=(x2735+x2733+(((-1.0)*x2725*x2726))+((sj4*x2723))+(((-1.0)*r02*x2724)));
evalcond[1]=(x2731+(((-1.0)*x2726*x2730))+((sj4*x2728))+(((-1.0)*r22*x2724))+(((-1.0)*x2736)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x2730))+(((-1.0)*pz))+(((9.9e-7)*x2728))+(((-0.4)*x2734))+(((-0.4)*sj1))+(((0.4)*x2731)));
evalcond[3]=((((-9.9e-7)*x2725))+(((0.4)*cj1))+(((-1.0)*px))+(((-1.93e-6)*sj1))+(((9.9e-7)*x2723))+(((0.4)*x2733))+(((0.4)*x2735)));
evalcond[4]=(x2731+(((-1.0)*r02*sj4*x2722))+(((-1.0)*cj4*x2722*x2723))+((cj3*cj4*x2725))+((r00*x2729))+((r01*x2727))+(((-1.0)*x2736)));
evalcond[5]=(((cj3*cj4*x2730))+(((-1.0)*cj4*x2722*x2728))+(((-1.0)*x2733))+(((-1.0)*x2735))+(((-1.0)*r22*sj4*x2722))+((r21*x2727))+((r20*x2729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2737=((1.0)*r01);
IkReal x2738=(sj1*sj4);
IkReal x2739=(cj5*r00);
IkReal x2740=(cj1*cj4);
IkReal x2741=(cj5*r20);
IkReal x2742=(cj1*sj4);
IkReal x2743=(sj5*x2742);
IkReal x2744=((1.0)*cj4*sj1);
if( IKabs((((x2738*x2741))+((x2739*x2742))+(((-1.0)*r21*sj5*x2738))+(((-1.0)*x2737*x2743))+(((-1.0)*r02*x2740))+(((-1.0)*r22*x2744)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x2743))+((r22*x2740))+(((-1.0)*sj5*x2737*x2738))+(((-1.0)*x2741*x2742))+((x2738*x2739))+(((-1.0)*r02*x2744)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2738*x2741))+((x2739*x2742))+(((-1.0)*r21*sj5*x2738))+(((-1.0)*x2737*x2743))+(((-1.0)*r02*x2740))+(((-1.0)*r22*x2744))))+IKsqr((((r21*x2743))+((r22*x2740))+(((-1.0)*sj5*x2737*x2738))+(((-1.0)*x2741*x2742))+((x2738*x2739))+(((-1.0)*r02*x2744))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2738*x2741))+((x2739*x2742))+(((-1.0)*r21*sj5*x2738))+(((-1.0)*x2737*x2743))+(((-1.0)*r02*x2740))+(((-1.0)*r22*x2744))), (((r21*x2743))+((r22*x2740))+(((-1.0)*sj5*x2737*x2738))+(((-1.0)*x2741*x2742))+((x2738*x2739))+(((-1.0)*r02*x2744))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2745=IKcos(j2);
IkReal x2746=IKsin(j2);
IkReal x2747=((1.0)*cj3);
IkReal x2748=(cj5*r00);
IkReal x2749=((1.0)*cj4);
IkReal x2750=(r01*sj5);
IkReal x2751=((1.0)*sj4);
IkReal x2752=(cj5*sj3);
IkReal x2753=(cj5*r20);
IkReal x2754=((1.0)*sj1);
IkReal x2755=(sj3*sj5);
IkReal x2756=((0.4)*sj1);
IkReal x2757=(r21*sj5);
IkReal x2758=(cj1*x2745);
IkReal x2759=(cj3*cj4*sj5);
IkReal x2760=((0.4)*x2746);
IkReal x2761=(x2745*x2754);
IkReal x2762=((1.0)*cj1*x2746);
IkReal x2763=(x2762+x2761);
evalcond[0]=(x2758+((sj4*x2753))+(((-1.0)*x2746*x2754))+(((-1.0)*x2751*x2757))+(((-1.0)*r22*x2749)));
evalcond[1]=((((-1.0)*x2763))+(((-1.0)*x2750*x2751))+((sj4*x2748))+(((-1.0)*r02*x2749)));
evalcond[2]=((((-1.93e-6)*cj1))+(((9.9e-7)*x2753))+(((0.4)*x2758))+(((-1.0)*pz))+(((-1.0)*x2746*x2756))+(((-1.0)*x2756))+(((-9.9e-7)*x2757)));
evalcond[3]=((((-1.0)*x2745*x2756))+(((1.93e-6)*sj1))+(((9.9e-7)*x2748))+(((-1.0)*px))+(((-1.0)*cj1*x2760))+(((-9.9e-7)*x2750))+(((-0.4)*cj1)));
evalcond[4]=(((cj3*cj4*x2750))+(((-1.0)*cj4*x2747*x2748))+(((-1.0)*r02*sj4*x2747))+((sj1*x2746))+((r00*x2755))+((r01*x2752))+(((-1.0)*x2758)));
evalcond[5]=(((r21*x2752))+((cj3*cj4*x2757))+(((-1.0)*r22*sj4*x2747))+(((-1.0)*x2763))+(((-1.0)*cj4*x2747*x2753))+((r20*x2755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2764=(cj4*r12);
IkReal x2765=(cj4*r22);
IkReal x2766=(cj1*sj4);
IkReal x2767=(r11*sj5);
IkReal x2768=(r21*sj5);
IkReal x2769=((1.0)*sj1);
IkReal x2770=(sj1*sj4);
IkReal x2771=(cj5*r20);
IkReal x2772=((1.0)*cj5*r10);
if( IKabs((((cj1*x2764))+((x2770*x2771))+(((-1.0)*x2766*x2772))+(((-1.0)*sj4*x2768*x2769))+((x2766*x2767))+(((-1.0)*x2765*x2769)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x2765))+((sj1*x2764))+(((-1.0)*x2766*x2771))+(((-1.0)*cj5*r10*sj4*x2769))+((x2767*x2770))+((x2766*x2768)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x2764))+((x2770*x2771))+(((-1.0)*x2766*x2772))+(((-1.0)*sj4*x2768*x2769))+((x2766*x2767))+(((-1.0)*x2765*x2769))))+IKsqr((((cj1*x2765))+((sj1*x2764))+(((-1.0)*x2766*x2771))+(((-1.0)*cj5*r10*sj4*x2769))+((x2767*x2770))+((x2766*x2768))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x2764))+((x2770*x2771))+(((-1.0)*x2766*x2772))+(((-1.0)*sj4*x2768*x2769))+((x2766*x2767))+(((-1.0)*x2765*x2769))), (((cj1*x2765))+((sj1*x2764))+(((-1.0)*x2766*x2771))+(((-1.0)*cj5*r10*sj4*x2769))+((x2767*x2770))+((x2766*x2768))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2773=IKcos(j2);
IkReal x2774=IKsin(j2);
IkReal x2775=(cj3*cj4);
IkReal x2776=(r21*sj5);
IkReal x2777=((1.0)*r22);
IkReal x2778=(cj5*r10);
IkReal x2779=(cj5*r20);
IkReal x2780=(cj5*sj3);
IkReal x2781=(cj3*sj4);
IkReal x2782=(r11*sj5);
IkReal x2783=((1.0)*sj4);
IkReal x2784=((1.0)*r12);
IkReal x2785=(sj3*sj5);
IkReal x2786=(cj1*x2773);
IkReal x2787=(cj1*x2774);
IkReal x2788=(sj1*x2774);
IkReal x2789=(sj1*x2773);
IkReal x2790=((1.0)*x2788);
evalcond[0]=(x2787+x2789+(((-1.0)*cj4*x2784))+((sj4*x2778))+(((-1.0)*x2782*x2783)));
evalcond[1]=((((-1.0)*cj4*x2777))+x2786+(((-1.0)*x2790))+((sj4*x2779))+(((-1.0)*x2776*x2783)));
evalcond[2]=((((-1.93e-6)*cj1))+(((9.9e-7)*x2779))+(((-1.0)*pz))+(((-0.4)*x2788))+(((0.4)*x2786))+(((-9.9e-7)*x2776))+(((-0.4)*sj1)));
evalcond[3]=((((9.9e-7)*x2778))+(((-9.9e-7)*x2782))+(((0.4)*cj1))+(((-1.0)*py))+(((-1.93e-6)*sj1))+(((0.4)*x2789))+(((0.4)*x2787)));
evalcond[4]=(x2786+(((-1.0)*x2775*x2778))+(((-1.0)*x2790))+(((-1.0)*x2781*x2784))+((r11*x2780))+((x2775*x2782))+((r10*x2785)));
evalcond[5]=((((-1.0)*x2775*x2779))+((r21*x2780))+((x2775*x2776))+(((-1.0)*x2789))+(((-1.0)*x2787))+(((-1.0)*x2777*x2781))+((r20*x2785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2791=((1.0)*cj1);
IkReal x2792=(sj4*sj5);
IkReal x2793=(cj5*sj4);
IkReal x2794=((1.0)*sj1);
IkReal x2795=(sj1*x2793);
IkReal x2796=(cj4*x2794);
if( IKabs(((((-1.0)*r11*x2791*x2792))+(((-1.0)*r21*x2792*x2794))+(((-1.0)*r22*x2796))+((cj1*r10*x2793))+(((-1.0)*cj4*r12*x2791))+((r20*x2795)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+(((-1.0)*r20*x2791*x2793))+((r10*x2795))+((cj1*r21*x2792))+(((-1.0)*r11*x2792*x2794))+(((-1.0)*r12*x2796)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x2791*x2792))+(((-1.0)*r21*x2792*x2794))+(((-1.0)*r22*x2796))+((cj1*r10*x2793))+(((-1.0)*cj4*r12*x2791))+((r20*x2795))))+IKsqr((((cj1*cj4*r22))+(((-1.0)*r20*x2791*x2793))+((r10*x2795))+((cj1*r21*x2792))+(((-1.0)*r11*x2792*x2794))+(((-1.0)*r12*x2796))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r11*x2791*x2792))+(((-1.0)*r21*x2792*x2794))+(((-1.0)*r22*x2796))+((cj1*r10*x2793))+(((-1.0)*cj4*r12*x2791))+((r20*x2795))), (((cj1*cj4*r22))+(((-1.0)*r20*x2791*x2793))+((r10*x2795))+((cj1*r21*x2792))+(((-1.0)*r11*x2792*x2794))+(((-1.0)*r12*x2796))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2797=IKcos(j2);
IkReal x2798=IKsin(j2);
IkReal x2799=(cj3*cj4);
IkReal x2800=(r21*sj5);
IkReal x2801=((1.0)*r22);
IkReal x2802=(cj5*r10);
IkReal x2803=(cj5*r20);
IkReal x2804=(cj5*sj3);
IkReal x2805=((1.0)*sj1);
IkReal x2806=(cj3*sj4);
IkReal x2807=(sj3*sj5);
IkReal x2808=(r11*sj5);
IkReal x2809=((1.0)*sj4);
IkReal x2810=((1.0)*r12);
IkReal x2811=((0.4)*sj1);
IkReal x2812=(cj1*x2797);
IkReal x2813=((0.4)*x2798);
IkReal x2814=(x2797*x2805);
IkReal x2815=((1.0)*cj1*x2798);
IkReal x2816=(x2815+x2814);
evalcond[0]=(((sj4*x2803))+(((-1.0)*cj4*x2801))+(((-1.0)*x2800*x2809))+(((-1.0)*x2798*x2805))+x2812);
evalcond[1]=(((sj4*x2802))+(((-1.0)*cj4*x2810))+(((-1.0)*x2808*x2809))+(((-1.0)*x2816)));
evalcond[2]=((((-1.93e-6)*cj1))+(((0.4)*x2812))+(((-1.0)*x2798*x2811))+(((-9.9e-7)*x2800))+(((-1.0)*pz))+(((-1.0)*x2811))+(((9.9e-7)*x2803)));
evalcond[3]=((((-1.0)*x2797*x2811))+(((-1.0)*cj1*x2813))+(((1.93e-6)*sj1))+(((-9.9e-7)*x2808))+(((-1.0)*py))+(((9.9e-7)*x2802))+(((-0.4)*cj1)));
evalcond[4]=(((r10*x2807))+(((-1.0)*x2812))+(((-1.0)*x2799*x2802))+((sj1*x2798))+(((-1.0)*x2806*x2810))+((x2799*x2808))+((r11*x2804)));
evalcond[5]=((((-1.0)*x2799*x2803))+((r20*x2807))+(((-1.0)*x2816))+((x2799*x2800))+((r21*x2804))+(((-1.0)*x2801*x2806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2817=((1.0)*sj1);
IkReal x2818=(cj5*sj4);
IkReal x2819=(r20*sj0);
IkReal x2820=((1.0)*cj1);
IkReal x2821=(cj4*r12);
IkReal x2822=(cj4*r22*sj0);
IkReal x2823=(r11*sj4*sj5);
IkReal x2824=(r21*sj0*sj4*sj5);
CheckValue<IkReal> x2825=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2825.valid){
continue;
}
CheckValue<IkReal> x2826 = IKatan2WithCheck(IkReal(((((-1.0)*x2817*x2824))+(((-1.0)*x2817*x2822))+((cj1*x2821))+((cj1*x2823))+(((-1.0)*r10*x2818*x2820))+((sj1*x2818*x2819)))),IkReal(((((-1.0)*r10*x2817*x2818))+((cj1*x2824))+((cj1*x2822))+((sj1*x2823))+((sj1*x2821))+(((-1.0)*x2818*x2819*x2820)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2826.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2825.value)))+(x2826.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2827=IKsin(j2);
IkReal x2828=IKcos(j2);
IkReal x2829=((1.0)*cj3);
IkReal x2830=(cj5*r00);
IkReal x2831=(cj0*cj1);
IkReal x2832=(cj5*r10);
IkReal x2833=(r01*sj5);
IkReal x2834=((1.0)*sj4);
IkReal x2835=(cj5*sj3);
IkReal x2836=(cj1*sj0);
IkReal x2837=(sj3*sj5);
IkReal x2838=(cj5*r20);
IkReal x2839=((1.0)*cj4);
IkReal x2840=((1.93e-6)*sj1);
IkReal x2841=(r11*sj5);
IkReal x2842=(r21*sj5);
IkReal x2843=(cj1*x2828);
IkReal x2844=(cj3*cj4*sj5);
IkReal x2845=((0.4)*x2827);
IkReal x2846=(sj1*x2828);
IkReal x2847=((1.0)*sj1*x2827);
evalcond[0]=(((sj4*x2838))+(((-1.0)*r22*x2839))+x2843+(((-1.0)*x2834*x2842))+(((-1.0)*x2847)));
evalcond[1]=(((sj4*x2830))+((x2827*x2831))+((cj0*x2846))+(((-1.0)*x2833*x2834))+(((-1.0)*r02*x2839)));
evalcond[2]=(((sj4*x2832))+((sj0*x2846))+((x2827*x2836))+(((-1.0)*r12*x2839))+(((-1.0)*x2834*x2841)));
evalcond[3]=((((-1.0)*sj1*x2845))+(((-1.93e-6)*cj1))+(((-9.9e-7)*x2842))+(((0.4)*x2843))+(((-1.0)*pz))+(((9.9e-7)*x2838))+(((-0.4)*sj1)));
evalcond[4]=((((0.4)*cj0*x2846))+(((0.4)*x2831))+(((-1.0)*cj0*x2840))+(((-9.9e-7)*x2833))+(((-1.0)*px))+(((9.9e-7)*x2830))+((x2831*x2845)));
evalcond[5]=(((x2836*x2845))+(((-9.9e-7)*x2841))+(((0.4)*x2836))+(((-1.0)*py))+(((9.9e-7)*x2832))+(((0.4)*sj0*x2846))+(((-1.0)*sj0*x2840)));
evalcond[6]=((((-1.0)*cj1*x2827))+((r20*x2837))+((cj3*cj4*x2842))+(((-1.0)*r22*sj4*x2829))+(((-1.0)*cj4*x2829*x2838))+(((-1.0)*x2846))+((r21*x2835)));
evalcond[7]=(((cj3*cj4*x2833))+((x2828*x2831))+(((-1.0)*cj0*x2847))+(((-1.0)*cj4*x2829*x2830))+((r00*x2837))+((r01*x2835))+(((-1.0)*r02*sj4*x2829)));
evalcond[8]=(((r10*x2837))+(((-1.0)*r12*sj4*x2829))+((x2828*x2836))+((cj3*cj4*x2841))+(((-1.0)*cj4*x2829*x2832))+((r11*x2835))+(((-1.0)*sj0*x2847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2848=((1.0)*cj0);
IkReal x2849=(cj4*r02);
IkReal x2850=(cj1*sj4);
IkReal x2851=(cj4*r22);
IkReal x2852=(cj5*r20);
IkReal x2853=(sj1*sj4);
IkReal x2854=(sj5*x2853);
IkReal x2855=((1.0)*cj5*r00);
CheckValue<IkReal> x2856=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2856.valid){
continue;
}
CheckValue<IkReal> x2857 = IKatan2WithCheck(IkReal((((r01*sj5*x2850))+(((-1.0)*x2850*x2855))+(((-1.0)*sj1*x2848*x2851))+(((-1.0)*r21*x2848*x2854))+((cj0*x2852*x2853))+((cj1*x2849)))),IkReal(((((-1.0)*x2848*x2850*x2852))+((sj1*x2849))+((cj0*cj1*x2851))+((r01*x2854))+((cj0*r21*sj5*x2850))+(((-1.0)*x2853*x2855)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2857.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2856.value)))+(x2857.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2858=IKsin(j2);
IkReal x2859=IKcos(j2);
IkReal x2860=((1.0)*cj3);
IkReal x2861=(cj5*r00);
IkReal x2862=(cj0*cj1);
IkReal x2863=(cj5*r10);
IkReal x2864=(r01*sj5);
IkReal x2865=((1.0)*sj4);
IkReal x2866=(cj5*sj3);
IkReal x2867=(cj1*sj0);
IkReal x2868=(sj3*sj5);
IkReal x2869=(cj5*r20);
IkReal x2870=((1.0)*cj4);
IkReal x2871=((1.93e-6)*sj1);
IkReal x2872=(r11*sj5);
IkReal x2873=(r21*sj5);
IkReal x2874=(cj1*x2859);
IkReal x2875=(cj3*cj4*sj5);
IkReal x2876=((0.4)*x2858);
IkReal x2877=(sj1*x2859);
IkReal x2878=((1.0)*sj1*x2858);
evalcond[0]=((((-1.0)*x2865*x2873))+(((-1.0)*r22*x2870))+(((-1.0)*x2878))+((sj4*x2869))+x2874);
evalcond[1]=(((cj0*x2877))+(((-1.0)*x2864*x2865))+(((-1.0)*r02*x2870))+((sj4*x2861))+((x2858*x2862)));
evalcond[2]=((((-1.0)*x2865*x2872))+((sj4*x2863))+((x2858*x2867))+((sj0*x2877))+(((-1.0)*r12*x2870)));
evalcond[3]=((((0.4)*x2874))+(((-1.93e-6)*cj1))+(((-1.0)*sj1*x2876))+(((9.9e-7)*x2869))+(((-1.0)*pz))+(((-9.9e-7)*x2873))+(((-0.4)*sj1)));
evalcond[4]=((((-1.0)*cj0*x2871))+(((0.4)*x2862))+(((9.9e-7)*x2861))+((x2862*x2876))+(((-1.0)*px))+(((0.4)*cj0*x2877))+(((-9.9e-7)*x2864)));
evalcond[5]=((((0.4)*x2867))+(((-1.0)*sj0*x2871))+(((0.4)*sj0*x2877))+((x2867*x2876))+(((9.9e-7)*x2863))+(((-1.0)*py))+(((-9.9e-7)*x2872)));
evalcond[6]=((((-1.0)*cj1*x2858))+(((-1.0)*cj4*x2860*x2869))+(((-1.0)*x2877))+((r21*x2866))+((r20*x2868))+((cj3*cj4*x2873))+(((-1.0)*r22*sj4*x2860)));
evalcond[7]=((((-1.0)*cj0*x2878))+((r00*x2868))+(((-1.0)*cj4*x2860*x2861))+(((-1.0)*r02*sj4*x2860))+((cj3*cj4*x2864))+((x2859*x2862))+((r01*x2866)));
evalcond[8]=((((-1.0)*r12*sj4*x2860))+(((-1.0)*cj4*x2860*x2863))+(((-1.0)*sj0*x2878))+((r10*x2868))+((x2859*x2867))+((r11*x2866))+((cj3*cj4*x2872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2879=((1.0)*cj0);
CheckValue<IkReal> x2880=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r02))+((cj5*r00*sj4))+(((-1.0)*r01*sj4*sj5)))),-1);
if(!x2880.valid){
continue;
}
CheckValue<IkReal> x2881 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x2879))+(((-1.0)*cj5*r21*x2879)))),IkReal((((cj0*cj4*cj5*r20))+((cj0*r22*sj4))+(((-1.0)*cj4*r21*sj5*x2879)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2881.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2880.value)))+(x2881.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x2882=IKsin(j3);
IkReal x2883=IKcos(j3);
IkReal x2884=((1.0)*cj5);
IkReal x2885=(cj4*x2882);
IkReal x2886=((1.0)*sj5*x2883);
IkReal x2887=((1.0)*sj4*x2882);
evalcond[0]=((((-1.0)*r22*x2887))+(((-1.0)*r20*x2884*x2885))+(((-1.0)*r21*x2883*x2884))+(((-1.0)*r20*x2886))+((r21*sj5*x2885)));
evalcond[1]=(((r11*sj5*x2885))+(((-1.0)*r10*x2886))+(((-1.0)*r10*x2884*x2885))+cj0+(((-1.0)*r11*x2883*x2884))+(((-1.0)*r12*x2887)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x2887))+((r01*sj5*x2885))+(((-1.0)*r00*x2886))+(((-1.0)*r00*x2884*x2885))+(((-1.0)*r01*x2883*x2884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[2];
IkReal x2888=sj0*sj0;
j1eval[0]=x2888;
j1eval[1]=IKsign(x2888);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x2889=cj0*cj0;
j1eval[0]=x2889;
j1eval[1]=IKsign(x2889);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
j1eval[0]=sj0;
j1eval[1]=IKsign(sj0);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2890=((4.82499999988767e-6)*sj4);
IkReal x2891=(r01*sj5);
IkReal x2892=((0.999999999976719)*cj4);
IkReal x2893=(cj5*r00);
IkReal x2894=(r21*sj5);
IkReal x2895=(cj5*r20);
IkReal x2896=((0.999999999976719)*sj4);
IkReal x2897=((4.82499999988767e-6)*cj4);
if( IKabs((((x2890*x2891))+(((-1.0)*x2890*x2893))+(((-1.0)*x2895*x2896))+((r22*x2892))+(((-1.1941874999722e-11)*x2891))+(((-1.20624999997192e-5)*px))+((r02*x2897))+(((1.1941874999722e-11)*x2893))+((x2894*x2896))+(((-2.4999999999418)*pz))+(((-2.47499999994238e-6)*x2894))+(((2.47499999994238e-6)*x2895)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2890*x2894))+(((-1.0)*x2891*x2896))+(((-1.0)*x2890*x2895))+(((2.4999999999418)*px))+(((-1.0)*r02*x2892))+((r22*x2897))+(((-1.1941874999722e-11)*x2894))+((x2893*x2896))+(((-1.20624999997192e-5)*pz))+(((1.1941874999722e-11)*x2895))+(((-2.47499999994238e-6)*x2893))+(((2.47499999994238e-6)*x2891)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2890*x2891))+(((-1.0)*x2890*x2893))+(((-1.0)*x2895*x2896))+((r22*x2892))+(((-1.1941874999722e-11)*x2891))+(((-1.20624999997192e-5)*px))+((r02*x2897))+(((1.1941874999722e-11)*x2893))+((x2894*x2896))+(((-2.4999999999418)*pz))+(((-2.47499999994238e-6)*x2894))+(((2.47499999994238e-6)*x2895))))+IKsqr((((x2890*x2894))+(((-1.0)*x2891*x2896))+(((-1.0)*x2890*x2895))+(((2.4999999999418)*px))+(((-1.0)*r02*x2892))+((r22*x2897))+(((-1.1941874999722e-11)*x2894))+((x2893*x2896))+(((-1.20624999997192e-5)*pz))+(((1.1941874999722e-11)*x2895))+(((-2.47499999994238e-6)*x2893))+(((2.47499999994238e-6)*x2891))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((x2890*x2891))+(((-1.0)*x2890*x2893))+(((-1.0)*x2895*x2896))+((r22*x2892))+(((-1.1941874999722e-11)*x2891))+(((-1.20624999997192e-5)*px))+((r02*x2897))+(((1.1941874999722e-11)*x2893))+((x2894*x2896))+(((-2.4999999999418)*pz))+(((-2.47499999994238e-6)*x2894))+(((2.47499999994238e-6)*x2895))), (((x2890*x2894))+(((-1.0)*x2891*x2896))+(((-1.0)*x2890*x2895))+(((2.4999999999418)*px))+(((-1.0)*r02*x2892))+((r22*x2897))+(((-1.1941874999722e-11)*x2894))+((x2893*x2896))+(((-1.20624999997192e-5)*pz))+(((1.1941874999722e-11)*x2895))+(((-2.47499999994238e-6)*x2893))+(((2.47499999994238e-6)*x2891))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2898=IKcos(j1);
IkReal x2899=IKsin(j1);
IkReal x2900=((0.4)*sj4);
IkReal x2901=(r21*sj5);
IkReal x2902=((0.4)*cj4);
IkReal x2903=(cj5*r20);
IkReal x2904=(r01*sj5);
IkReal x2905=(cj5*r00);
IkReal x2906=((9.9e-7)*x2904);
IkReal x2907=((1.93e-6)*x2899);
IkReal x2908=((0.4)*x2898);
IkReal x2909=((9.9e-7)*x2905);
IkReal x2910=((1.93e-6)*x2898);
IkReal x2911=((0.4)*x2899);
IkReal x2912=((9.9e-7)*x2901);
IkReal x2913=((9.9e-7)*x2903);
IkReal x2914=((0.4)*sj3*sj5);
IkReal x2915=((0.4)*cj5*sj3);
IkReal x2916=(x2909+x2908);
IkReal x2917=(px+x2907+x2906);
IkReal x2918=(x2910+x2911+x2912);
evalcond[0]=((((-1.0)*r02*x2902))+(((-1.0)*x2900*x2904))+((x2900*x2905))+x2917+(((-1.0)*x2916)));
evalcond[1]=((((-1.0)*x2900*x2903))+((r22*x2902))+((x2900*x2901))+(((-1.0)*pz))+x2913+(((-1.0)*x2918)));
evalcond[2]=(((cj3*r22*x2900))+(((-1.0)*cj3*x2901*x2902))+((cj3*x2902*x2903))+(((-1.0)*r21*x2915))+(((-1.0)*r20*x2914))+x2917+(((-1.0)*x2916)));
evalcond[3]=(((r01*x2915))+((r00*x2914))+(((-1.0)*cj3*r02*x2900))+((cj3*x2902*x2904))+pz+(((-1.0)*cj3*x2902*x2905))+x2918+(((-1.0)*x2913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2919=(cj4*sj1);
IkReal x2920=(cj1*sj4);
IkReal x2921=((1.0)*cj5);
IkReal x2922=(r21*sj5);
IkReal x2923=(cj1*cj4);
IkReal x2924=(sj1*sj4);
IkReal x2925=(r01*sj4*sj5);
if( IKabs(((((-1.0)*r22*x2919))+(((-1.0)*r00*x2920*x2921))+((r01*sj5*x2920))+((cj5*r20*x2924))+(((-1.0)*x2922*x2924))+((r02*x2923)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x2923))+(((-1.0)*r20*x2920*x2921))+((r02*x2919))+((r01*sj5*x2924))+(((-1.0)*r00*x2921*x2924))+((x2920*x2922)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x2919))+(((-1.0)*r00*x2920*x2921))+((r01*sj5*x2920))+((cj5*r20*x2924))+(((-1.0)*x2922*x2924))+((r02*x2923))))+IKsqr((((r22*x2923))+(((-1.0)*r20*x2920*x2921))+((r02*x2919))+((r01*sj5*x2924))+(((-1.0)*r00*x2921*x2924))+((x2920*x2922))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x2919))+(((-1.0)*r00*x2920*x2921))+((r01*sj5*x2920))+((cj5*r20*x2924))+(((-1.0)*x2922*x2924))+((r02*x2923))), (((r22*x2923))+(((-1.0)*r20*x2920*x2921))+((r02*x2919))+((r01*sj5*x2924))+(((-1.0)*r00*x2921*x2924))+((x2920*x2922))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2926=IKcos(j2);
IkReal x2927=IKsin(j2);
IkReal x2928=((1.0)*cj3);
IkReal x2929=(cj5*r00);
IkReal x2930=((1.0)*cj4);
IkReal x2931=(r01*sj5);
IkReal x2932=((1.0)*sj4);
IkReal x2933=(cj5*sj3);
IkReal x2934=(cj5*r20);
IkReal x2935=(sj3*sj5);
IkReal x2936=(r21*sj5);
IkReal x2937=(cj1*x2926);
IkReal x2938=(cj3*cj4*sj5);
IkReal x2939=(cj1*x2927);
IkReal x2940=(sj1*x2927);
IkReal x2941=(sj1*x2926);
IkReal x2942=((1.0)*x2940);
evalcond[0]=((((-1.0)*x2931*x2932))+((sj4*x2929))+x2939+x2941+(((-1.0)*r02*x2930)));
evalcond[1]=((((-1.0)*x2932*x2936))+(((-1.0)*x2942))+(((-1.0)*r22*x2930))+x2937+((sj4*x2934)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x2936))+(((-1.0)*pz))+(((-0.4)*x2940))+(((9.9e-7)*x2934))+(((-0.4)*sj1))+(((0.4)*x2937)));
evalcond[3]=((((-9.9e-7)*x2931))+(((0.4)*cj1))+(((-1.0)*px))+(((-1.93e-6)*sj1))+(((9.9e-7)*x2929))+(((0.4)*x2941))+(((0.4)*x2939)));
evalcond[4]=(((r01*x2933))+((r00*x2935))+((cj3*cj4*x2931))+(((-1.0)*x2942))+(((-1.0)*r02*sj4*x2928))+x2937+(((-1.0)*cj4*x2928*x2929)));
evalcond[5]=((((-1.0)*x2941))+(((-1.0)*r22*sj4*x2928))+((r21*x2933))+((cj3*cj4*x2936))+((r20*x2935))+(((-1.0)*cj4*x2928*x2934))+(((-1.0)*x2939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2943=((4.82499999988767e-6)*sj4);
IkReal x2944=(r01*sj5);
IkReal x2945=((0.999999999976719)*cj4);
IkReal x2946=(cj5*r00);
IkReal x2947=(r21*sj5);
IkReal x2948=(cj5*r20);
IkReal x2949=((0.999999999976719)*sj4);
IkReal x2950=((4.82499999988767e-6)*cj4);
if( IKabs(((((-1.0)*r02*x2950))+(((-1.0)*x2943*x2944))+(((1.20624999997192e-5)*px))+(((-1.0)*x2948*x2949))+((r22*x2945))+(((2.47499999994238e-6)*x2948))+((x2943*x2946))+(((-2.4999999999418)*pz))+(((1.1941874999722e-11)*x2944))+(((-1.1941874999722e-11)*x2946))+(((-2.47499999994238e-6)*x2947))+((x2947*x2949)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x2950))+(((-1.0)*x2943*x2948))+((r02*x2945))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x2946))+(((-1.0)*x2946*x2949))+((x2944*x2949))+((x2943*x2947))+(((-2.4999999999418)*px))+(((1.1941874999722e-11)*x2948))+(((-1.1941874999722e-11)*x2947))+(((-2.47499999994238e-6)*x2944)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x2950))+(((-1.0)*x2943*x2944))+(((1.20624999997192e-5)*px))+(((-1.0)*x2948*x2949))+((r22*x2945))+(((2.47499999994238e-6)*x2948))+((x2943*x2946))+(((-2.4999999999418)*pz))+(((1.1941874999722e-11)*x2944))+(((-1.1941874999722e-11)*x2946))+(((-2.47499999994238e-6)*x2947))+((x2947*x2949))))+IKsqr((((r22*x2950))+(((-1.0)*x2943*x2948))+((r02*x2945))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x2946))+(((-1.0)*x2946*x2949))+((x2944*x2949))+((x2943*x2947))+(((-2.4999999999418)*px))+(((1.1941874999722e-11)*x2948))+(((-1.1941874999722e-11)*x2947))+(((-2.47499999994238e-6)*x2944))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r02*x2950))+(((-1.0)*x2943*x2944))+(((1.20624999997192e-5)*px))+(((-1.0)*x2948*x2949))+((r22*x2945))+(((2.47499999994238e-6)*x2948))+((x2943*x2946))+(((-2.4999999999418)*pz))+(((1.1941874999722e-11)*x2944))+(((-1.1941874999722e-11)*x2946))+(((-2.47499999994238e-6)*x2947))+((x2947*x2949))), (((r22*x2950))+(((-1.0)*x2943*x2948))+((r02*x2945))+(((-1.20624999997192e-5)*pz))+(((2.47499999994238e-6)*x2946))+(((-1.0)*x2946*x2949))+((x2944*x2949))+((x2943*x2947))+(((-2.4999999999418)*px))+(((1.1941874999722e-11)*x2948))+(((-1.1941874999722e-11)*x2947))+(((-2.47499999994238e-6)*x2944))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2951=IKcos(j1);
IkReal x2952=IKsin(j1);
IkReal x2953=((1.0)*pz);
IkReal x2954=((0.4)*sj4);
IkReal x2955=(r21*sj5);
IkReal x2956=((0.4)*cj4);
IkReal x2957=(cj5*r20);
IkReal x2958=(r01*sj5);
IkReal x2959=(cj5*r00);
IkReal x2960=((0.4)*x2951);
IkReal x2961=((9.9e-7)*x2958);
IkReal x2962=((9.9e-7)*x2959);
IkReal x2963=((1.93e-6)*x2952);
IkReal x2964=((9.9e-7)*x2957);
IkReal x2965=((1.93e-6)*x2951);
IkReal x2966=((0.4)*x2952);
IkReal x2967=((9.9e-7)*x2955);
IkReal x2968=((0.4)*sj3*sj5);
IkReal x2969=((0.4)*cj5*sj3);
IkReal x2970=(x2961+x2960);
IkReal x2971=(x2963+x2962);
IkReal x2972=(x2953+x2965+x2967+x2966);
evalcond[0]=(((x2954*x2958))+(((-1.0)*x2954*x2959))+(((-1.0)*px))+(((-1.0)*x2970))+((r02*x2956))+x2971);
evalcond[1]=(((x2954*x2955))+((r22*x2956))+(((-1.0)*x2954*x2957))+(((-1.0)*x2972))+x2964);
evalcond[2]=(((r21*x2969))+(((-1.0)*cj3*x2956*x2957))+((cj3*x2955*x2956))+(((-1.0)*x2971))+(((-1.0)*cj3*r22*x2954))+px+((r20*x2968))+x2970);
evalcond[3]=((((-1.0)*cj3*x2956*x2959))+(((-1.0)*cj3*r02*x2954))+((cj3*x2956*x2958))+(((-1.0)*x2972))+((r00*x2968))+((r01*x2969))+x2964);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2973=((1.0)*r01);
IkReal x2974=(sj1*sj4);
IkReal x2975=(cj5*r00);
IkReal x2976=(cj1*cj4);
IkReal x2977=(cj5*r20);
IkReal x2978=(cj1*sj4);
IkReal x2979=(sj5*x2978);
IkReal x2980=((1.0)*cj4*sj1);
if( IKabs((((x2974*x2977))+(((-1.0)*r02*x2976))+((x2975*x2978))+(((-1.0)*r22*x2980))+(((-1.0)*r21*sj5*x2974))+(((-1.0)*x2973*x2979)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj5*x2973*x2974))+((x2974*x2975))+(((-1.0)*x2977*x2978))+((r22*x2976))+(((-1.0)*r02*x2980))+((r21*x2979)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2974*x2977))+(((-1.0)*r02*x2976))+((x2975*x2978))+(((-1.0)*r22*x2980))+(((-1.0)*r21*sj5*x2974))+(((-1.0)*x2973*x2979))))+IKsqr(((((-1.0)*sj5*x2973*x2974))+((x2974*x2975))+(((-1.0)*x2977*x2978))+((r22*x2976))+(((-1.0)*r02*x2980))+((r21*x2979))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2974*x2977))+(((-1.0)*r02*x2976))+((x2975*x2978))+(((-1.0)*r22*x2980))+(((-1.0)*r21*sj5*x2974))+(((-1.0)*x2973*x2979))), ((((-1.0)*sj5*x2973*x2974))+((x2974*x2975))+(((-1.0)*x2977*x2978))+((r22*x2976))+(((-1.0)*r02*x2980))+((r21*x2979))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2981=IKcos(j2);
IkReal x2982=IKsin(j2);
IkReal x2983=((1.0)*cj3);
IkReal x2984=(cj5*r00);
IkReal x2985=((1.0)*cj4);
IkReal x2986=(r01*sj5);
IkReal x2987=((1.0)*sj4);
IkReal x2988=(cj5*sj3);
IkReal x2989=(cj5*r20);
IkReal x2990=((1.0)*sj1);
IkReal x2991=(sj3*sj5);
IkReal x2992=((0.4)*sj1);
IkReal x2993=(r21*sj5);
IkReal x2994=(cj1*x2981);
IkReal x2995=(cj3*cj4*sj5);
IkReal x2996=((0.4)*x2982);
IkReal x2997=(x2981*x2990);
IkReal x2998=((1.0)*cj1*x2982);
IkReal x2999=(x2998+x2997);
evalcond[0]=((((-1.0)*x2987*x2993))+(((-1.0)*r22*x2985))+((sj4*x2989))+(((-1.0)*x2982*x2990))+x2994);
evalcond[1]=((((-1.0)*x2999))+((sj4*x2984))+(((-1.0)*r02*x2985))+(((-1.0)*x2986*x2987)));
evalcond[2]=((((-1.0)*x2992))+(((-1.93e-6)*cj1))+(((0.4)*x2994))+(((9.9e-7)*x2989))+(((-1.0)*pz))+(((-1.0)*x2982*x2992))+(((-9.9e-7)*x2993)));
evalcond[3]=((((1.93e-6)*sj1))+(((9.9e-7)*x2984))+(((-1.0)*cj1*x2996))+(((-1.0)*px))+(((-9.9e-7)*x2986))+(((-1.0)*x2981*x2992))+(((-0.4)*cj1)));
evalcond[4]=(((r00*x2991))+((cj3*cj4*x2986))+(((-1.0)*cj4*x2983*x2984))+(((-1.0)*r02*sj4*x2983))+((r01*x2988))+(((-1.0)*x2994))+((sj1*x2982)));
evalcond[5]=((((-1.0)*x2999))+((cj3*cj4*x2993))+(((-1.0)*cj4*x2983*x2989))+((r20*x2991))+(((-1.0)*r22*sj4*x2983))+((r21*x2988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3000=((4.82499999988767e-6)*sj4);
IkReal x3001=(cj5*r20);
IkReal x3002=(r11*sj5);
IkReal x3003=(r21*sj5);
IkReal x3004=(cj5*r10);
IkReal x3005=((0.999999999976719)*sj4);
IkReal x3006=((4.82499999988767e-6)*cj4);
IkReal x3007=((0.999999999976719)*cj4);
if( IKabs(((((-1.0)*x3000*x3004))+(((1.1941874999722e-11)*x3004))+(((2.47499999994238e-6)*x3001))+((r22*x3007))+((x3003*x3005))+((x3000*x3002))+(((-1.20624999997192e-5)*py))+((r12*x3006))+(((-2.47499999994238e-6)*x3003))+(((-2.4999999999418)*pz))+(((-1.1941874999722e-11)*x3002))+(((-1.0)*x3001*x3005)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3002*x3005))+(((2.4999999999418)*py))+(((-1.0)*x3000*x3001))+(((1.1941874999722e-11)*x3001))+(((2.47499999994238e-6)*x3002))+((r22*x3006))+((x3000*x3003))+(((-1.20624999997192e-5)*pz))+(((-1.0)*r12*x3007))+(((-2.47499999994238e-6)*x3004))+((x3004*x3005))+(((-1.1941874999722e-11)*x3003)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3000*x3004))+(((1.1941874999722e-11)*x3004))+(((2.47499999994238e-6)*x3001))+((r22*x3007))+((x3003*x3005))+((x3000*x3002))+(((-1.20624999997192e-5)*py))+((r12*x3006))+(((-2.47499999994238e-6)*x3003))+(((-2.4999999999418)*pz))+(((-1.1941874999722e-11)*x3002))+(((-1.0)*x3001*x3005))))+IKsqr(((((-1.0)*x3002*x3005))+(((2.4999999999418)*py))+(((-1.0)*x3000*x3001))+(((1.1941874999722e-11)*x3001))+(((2.47499999994238e-6)*x3002))+((r22*x3006))+((x3000*x3003))+(((-1.20624999997192e-5)*pz))+(((-1.0)*r12*x3007))+(((-2.47499999994238e-6)*x3004))+((x3004*x3005))+(((-1.1941874999722e-11)*x3003))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*x3000*x3004))+(((1.1941874999722e-11)*x3004))+(((2.47499999994238e-6)*x3001))+((r22*x3007))+((x3003*x3005))+((x3000*x3002))+(((-1.20624999997192e-5)*py))+((r12*x3006))+(((-2.47499999994238e-6)*x3003))+(((-2.4999999999418)*pz))+(((-1.1941874999722e-11)*x3002))+(((-1.0)*x3001*x3005))), ((((-1.0)*x3002*x3005))+(((2.4999999999418)*py))+(((-1.0)*x3000*x3001))+(((1.1941874999722e-11)*x3001))+(((2.47499999994238e-6)*x3002))+((r22*x3006))+((x3000*x3003))+(((-1.20624999997192e-5)*pz))+(((-1.0)*r12*x3007))+(((-2.47499999994238e-6)*x3004))+((x3004*x3005))+(((-1.1941874999722e-11)*x3003))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x3008=IKcos(j1);
IkReal x3009=IKsin(j1);
IkReal x3010=((0.4)*sj4);
IkReal x3011=(r21*sj5);
IkReal x3012=(cj5*r10);
IkReal x3013=((0.4)*cj4);
IkReal x3014=(cj5*r20);
IkReal x3015=((0.4)*sj3);
IkReal x3016=(r11*sj5);
IkReal x3017=((1.93e-6)*x3009);
IkReal x3018=((9.9e-7)*x3016);
IkReal x3019=((0.4)*x3008);
IkReal x3020=((9.9e-7)*x3012);
IkReal x3021=((1.93e-6)*x3008);
IkReal x3022=((0.4)*x3009);
IkReal x3023=((9.9e-7)*x3011);
IkReal x3024=((9.9e-7)*x3014);
IkReal x3025=(x3019+x3020);
IkReal x3026=(x3018+x3017+py);
IkReal x3027=(x3023+x3022+x3021);
evalcond[0]=(((x3010*x3012))+x3026+(((-1.0)*x3025))+(((-1.0)*r12*x3013))+(((-1.0)*x3010*x3016)));
evalcond[1]=(((x3010*x3011))+x3024+(((-1.0)*x3027))+((r22*x3013))+(((-1.0)*pz))+(((-1.0)*x3010*x3014)));
evalcond[2]=(x3026+(((-1.0)*x3025))+((cj3*x3013*x3014))+(((-1.0)*cj3*x3011*x3013))+((cj3*r22*x3010))+(((-1.0)*r20*sj5*x3015))+(((-1.0)*cj5*r21*x3015)));
evalcond[3]=((((-1.0)*cj3*x3012*x3013))+((r10*sj5*x3015))+x3027+(((-1.0)*x3024))+((cj3*x3013*x3016))+((cj5*r11*x3015))+pz+(((-1.0)*cj3*r12*x3010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3028=(cj4*r12);
IkReal x3029=(cj4*r22);
IkReal x3030=(cj1*sj4);
IkReal x3031=(r11*sj5);
IkReal x3032=(r21*sj5);
IkReal x3033=((1.0)*sj1);
IkReal x3034=(sj1*sj4);
IkReal x3035=(cj5*r20);
IkReal x3036=((1.0)*cj5*r10);
if( IKabs((((cj1*x3028))+(((-1.0)*x3029*x3033))+((x3030*x3031))+(((-1.0)*x3030*x3036))+((x3034*x3035))+(((-1.0)*sj4*x3032*x3033)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x3029))+((sj1*x3028))+((x3030*x3032))+(((-1.0)*x3030*x3035))+((x3031*x3034))+(((-1.0)*cj5*r10*sj4*x3033)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x3028))+(((-1.0)*x3029*x3033))+((x3030*x3031))+(((-1.0)*x3030*x3036))+((x3034*x3035))+(((-1.0)*sj4*x3032*x3033))))+IKsqr((((cj1*x3029))+((sj1*x3028))+((x3030*x3032))+(((-1.0)*x3030*x3035))+((x3031*x3034))+(((-1.0)*cj5*r10*sj4*x3033))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x3028))+(((-1.0)*x3029*x3033))+((x3030*x3031))+(((-1.0)*x3030*x3036))+((x3034*x3035))+(((-1.0)*sj4*x3032*x3033))), (((cj1*x3029))+((sj1*x3028))+((x3030*x3032))+(((-1.0)*x3030*x3035))+((x3031*x3034))+(((-1.0)*cj5*r10*sj4*x3033))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3037=IKcos(j2);
IkReal x3038=IKsin(j2);
IkReal x3039=(cj3*cj4);
IkReal x3040=(r21*sj5);
IkReal x3041=((1.0)*r22);
IkReal x3042=(cj5*r10);
IkReal x3043=(cj5*r20);
IkReal x3044=(cj5*sj3);
IkReal x3045=(cj3*sj4);
IkReal x3046=(r11*sj5);
IkReal x3047=((1.0)*sj4);
IkReal x3048=((1.0)*r12);
IkReal x3049=(sj3*sj5);
IkReal x3050=(cj1*x3037);
IkReal x3051=(cj1*x3038);
IkReal x3052=(sj1*x3038);
IkReal x3053=(sj1*x3037);
IkReal x3054=((1.0)*x3052);
evalcond[0]=(x3053+x3051+(((-1.0)*x3046*x3047))+(((-1.0)*cj4*x3048))+((sj4*x3042)));
evalcond[1]=(x3050+(((-1.0)*cj4*x3041))+((sj4*x3043))+(((-1.0)*x3040*x3047))+(((-1.0)*x3054)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x3040))+(((-0.4)*x3052))+(((0.4)*x3050))+(((-1.0)*pz))+(((9.9e-7)*x3043))+(((-0.4)*sj1)));
evalcond[3]=((((-9.9e-7)*x3046))+(((0.4)*x3051))+(((0.4)*x3053))+(((0.4)*cj1))+(((-1.0)*py))+(((-1.93e-6)*sj1))+(((9.9e-7)*x3042)));
evalcond[4]=((((-1.0)*x3045*x3048))+x3050+((r10*x3049))+((x3039*x3046))+(((-1.0)*x3054))+(((-1.0)*x3039*x3042))+((r11*x3044)));
evalcond[5]=(((r21*x3044))+((x3039*x3040))+(((-1.0)*x3051))+(((-1.0)*x3053))+((r20*x3049))+(((-1.0)*x3041*x3045))+(((-1.0)*x3039*x3043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3055=((4.82499999988767e-6)*sj4);
IkReal x3056=(cj5*r20);
IkReal x3057=(r11*sj5);
IkReal x3058=(r21*sj5);
IkReal x3059=(cj5*r10);
IkReal x3060=((0.999999999976719)*sj4);
IkReal x3061=((4.82499999988767e-6)*cj4);
IkReal x3062=((0.999999999976719)*cj4);
if( IKabs(((((-1.0)*x3055*x3057))+((r22*x3062))+(((1.1941874999722e-11)*x3057))+(((-1.1941874999722e-11)*x3059))+((x3058*x3060))+(((-1.0)*r12*x3061))+(((1.20624999997192e-5)*py))+((x3055*x3059))+(((-2.47499999994238e-6)*x3058))+(((-2.4999999999418)*pz))+(((-1.0)*x3056*x3060))+(((2.47499999994238e-6)*x3056)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3055*x3056))+((r22*x3061))+(((1.1941874999722e-11)*x3056))+(((-1.1941874999722e-11)*x3058))+(((-1.20624999997192e-5)*pz))+((x3057*x3060))+((r12*x3062))+((x3055*x3058))+(((-2.47499999994238e-6)*x3057))+(((-2.4999999999418)*py))+(((-1.0)*x3059*x3060))+(((2.47499999994238e-6)*x3059)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3055*x3057))+((r22*x3062))+(((1.1941874999722e-11)*x3057))+(((-1.1941874999722e-11)*x3059))+((x3058*x3060))+(((-1.0)*r12*x3061))+(((1.20624999997192e-5)*py))+((x3055*x3059))+(((-2.47499999994238e-6)*x3058))+(((-2.4999999999418)*pz))+(((-1.0)*x3056*x3060))+(((2.47499999994238e-6)*x3056))))+IKsqr(((((-1.0)*x3055*x3056))+((r22*x3061))+(((1.1941874999722e-11)*x3056))+(((-1.1941874999722e-11)*x3058))+(((-1.20624999997192e-5)*pz))+((x3057*x3060))+((r12*x3062))+((x3055*x3058))+(((-2.47499999994238e-6)*x3057))+(((-2.4999999999418)*py))+(((-1.0)*x3059*x3060))+(((2.47499999994238e-6)*x3059))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*x3055*x3057))+((r22*x3062))+(((1.1941874999722e-11)*x3057))+(((-1.1941874999722e-11)*x3059))+((x3058*x3060))+(((-1.0)*r12*x3061))+(((1.20624999997192e-5)*py))+((x3055*x3059))+(((-2.47499999994238e-6)*x3058))+(((-2.4999999999418)*pz))+(((-1.0)*x3056*x3060))+(((2.47499999994238e-6)*x3056))), ((((-1.0)*x3055*x3056))+((r22*x3061))+(((1.1941874999722e-11)*x3056))+(((-1.1941874999722e-11)*x3058))+(((-1.20624999997192e-5)*pz))+((x3057*x3060))+((r12*x3062))+((x3055*x3058))+(((-2.47499999994238e-6)*x3057))+(((-2.4999999999418)*py))+(((-1.0)*x3059*x3060))+(((2.47499999994238e-6)*x3059))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x3063=IKcos(j1);
IkReal x3064=IKsin(j1);
IkReal x3065=((1.0)*pz);
IkReal x3066=((0.4)*sj4);
IkReal x3067=(r21*sj5);
IkReal x3068=(cj5*r10);
IkReal x3069=((0.4)*cj4);
IkReal x3070=(cj5*r20);
IkReal x3071=((0.4)*sj3);
IkReal x3072=(r11*sj5);
IkReal x3073=((0.4)*x3063);
IkReal x3074=((9.9e-7)*x3072);
IkReal x3075=((9.9e-7)*x3068);
IkReal x3076=((1.93e-6)*x3064);
IkReal x3077=((9.9e-7)*x3070);
IkReal x3078=((1.93e-6)*x3063);
IkReal x3079=((0.4)*x3064);
IkReal x3080=((9.9e-7)*x3067);
IkReal x3081=(x3075+x3076);
IkReal x3082=(x3073+x3074);
IkReal x3083=(x3080+x3078+x3079+x3065);
evalcond[0]=((((-1.0)*x3082))+(((-1.0)*x3066*x3068))+x3081+(((-1.0)*py))+((r12*x3069))+((x3066*x3072)));
evalcond[1]=((((-1.0)*x3083))+((r22*x3069))+x3077+(((-1.0)*x3066*x3070))+((x3066*x3067)));
evalcond[2]=((((-1.0)*x3081))+(((-1.0)*cj3*x3069*x3070))+x3082+(((-1.0)*cj3*r22*x3066))+((cj5*r21*x3071))+((r20*sj5*x3071))+py+((cj3*x3067*x3069)));
evalcond[3]=((((-1.0)*x3083))+((r10*sj5*x3071))+(((-1.0)*cj3*x3068*x3069))+x3077+((cj3*x3069*x3072))+((cj5*r11*x3071))+(((-1.0)*cj3*r12*x3066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3084=((1.0)*cj1);
IkReal x3085=(sj4*sj5);
IkReal x3086=(cj5*sj4);
IkReal x3087=((1.0)*sj1);
IkReal x3088=(sj1*x3086);
IkReal x3089=(cj4*x3087);
if( IKabs((((r20*x3088))+((cj1*r10*x3086))+(((-1.0)*r22*x3089))+(((-1.0)*r11*x3084*x3085))+(((-1.0)*r21*x3085*x3087))+(((-1.0)*cj4*r12*x3084)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+((cj1*r21*x3085))+(((-1.0)*r20*x3084*x3086))+(((-1.0)*r11*x3085*x3087))+(((-1.0)*r12*x3089))+((r10*x3088)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x3088))+((cj1*r10*x3086))+(((-1.0)*r22*x3089))+(((-1.0)*r11*x3084*x3085))+(((-1.0)*r21*x3085*x3087))+(((-1.0)*cj4*r12*x3084))))+IKsqr((((cj1*cj4*r22))+((cj1*r21*x3085))+(((-1.0)*r20*x3084*x3086))+(((-1.0)*r11*x3085*x3087))+(((-1.0)*r12*x3089))+((r10*x3088))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*x3088))+((cj1*r10*x3086))+(((-1.0)*r22*x3089))+(((-1.0)*r11*x3084*x3085))+(((-1.0)*r21*x3085*x3087))+(((-1.0)*cj4*r12*x3084))), (((cj1*cj4*r22))+((cj1*r21*x3085))+(((-1.0)*r20*x3084*x3086))+(((-1.0)*r11*x3085*x3087))+(((-1.0)*r12*x3089))+((r10*x3088))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3090=IKcos(j2);
IkReal x3091=IKsin(j2);
IkReal x3092=(cj3*cj4);
IkReal x3093=(r21*sj5);
IkReal x3094=((1.0)*r22);
IkReal x3095=(cj5*r10);
IkReal x3096=(cj5*r20);
IkReal x3097=(cj5*sj3);
IkReal x3098=((1.0)*sj1);
IkReal x3099=(cj3*sj4);
IkReal x3100=(sj3*sj5);
IkReal x3101=(r11*sj5);
IkReal x3102=((1.0)*sj4);
IkReal x3103=((1.0)*r12);
IkReal x3104=((0.4)*sj1);
IkReal x3105=(cj1*x3090);
IkReal x3106=((0.4)*x3091);
IkReal x3107=(x3090*x3098);
IkReal x3108=((1.0)*cj1*x3091);
IkReal x3109=(x3108+x3107);
evalcond[0]=(x3105+(((-1.0)*cj4*x3094))+(((-1.0)*x3093*x3102))+(((-1.0)*x3091*x3098))+((sj4*x3096)));
evalcond[1]=((((-1.0)*cj4*x3103))+(((-1.0)*x3109))+((sj4*x3095))+(((-1.0)*x3101*x3102)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-1.0)*x3091*x3104))+(((-1.0)*x3104))+(((-1.0)*pz))+(((9.9e-7)*x3096))+(((0.4)*x3105))+(((-9.9e-7)*x3093)));
evalcond[3]=((((-9.9e-7)*x3101))+(((-1.0)*x3090*x3104))+(((-1.0)*cj1*x3106))+(((1.93e-6)*sj1))+(((-1.0)*py))+(((9.9e-7)*x3095))+(((-0.4)*cj1)));
evalcond[4]=(((sj1*x3091))+(((-1.0)*x3092*x3095))+((x3092*x3101))+(((-1.0)*x3105))+((r10*x3100))+(((-1.0)*x3099*x3103))+((r11*x3097)));
evalcond[5]=(((r21*x3097))+(((-1.0)*x3092*x3096))+((x3092*x3093))+(((-1.0)*x3109))+((r20*x3100))+(((-1.0)*x3094*x3099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3110=(cj5*r10);
IkReal x3111=((0.4)*sj4);
IkReal x3112=(r21*sj5);
IkReal x3113=(cj5*r21);
IkReal x3114=(r11*sj5);
IkReal x3115=(r20*sj5);
IkReal x3116=(cj5*r20);
IkReal x3117=((7720000000.0)*sj0);
IkReal x3118=(cj3*cj4);
IkReal x3119=((1.6e+15)*sj0);
IkReal x3120=(cj3*r22*sj4);
IkReal x3121=((-1.6e+15)*sj0*sj3);
IkReal x3122=((((9.9e-7)*x3116))+((x3111*x3112))+(((-1.0)*pz))+(((-1.0)*x3111*x3116))+(((0.4)*cj4*r22))+(((-9.9e-7)*x3112)));
IkReal x3123=(sj0*x3122);
CheckValue<IkReal> x3124 = IKatan2WithCheck(IkReal(((((-1.0)*x3117*x3120))+(((-1.0)*x3116*x3117*x3118))+((sj3*x3113*x3117))+(((4.0e+15)*x3123))+(((19107.0)*x3110))+((sj3*x3115*x3117))+((x3112*x3117*x3118))+(((-19300000000.0)*py))+(((-19107.0)*x3114)))),IkReal((((x3115*x3121))+(((-3960000000.0)*x3110))+(((3960000000.0)*x3114))+((x3119*x3120))+(((19300000000.0)*x3123))+(((-1.6e+15)*sj0*x3112*x3118))+((x3113*x3121))+(((4.0e+15)*py))+((x3116*x3118*x3119)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3124.valid){
continue;
}
CheckValue<IkReal> x3125=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x3125.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x3124.value)+(((1.5707963267949)*(x3125.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x3126=IKsin(j1);
IkReal x3127=sj0*sj0;
IkReal x3128=IKcos(j1);
IkReal x3129=cj0*cj0;
IkReal x3130=((0.4)*cj5);
IkReal x3131=(r21*sj0);
IkReal x3132=((0.4)*sj4);
IkReal x3133=(r21*sj5);
IkReal x3134=(cj3*r22);
IkReal x3135=(r11*sj5);
IkReal x3136=((9.9e-7)*cj0);
IkReal x3137=((0.4)*cj4);
IkReal x3138=(cj3*cj4);
IkReal x3139=(cj5*r00);
IkReal x3140=(r01*sj5);
IkReal x3141=(r20*sj0);
IkReal x3142=(r00*sj4);
IkReal x3143=((9.9e-7)*cj5);
IkReal x3144=(cj0*sj0);
IkReal x3145=((9.9e-7)*sj0);
IkReal x3146=(r10*sj4);
IkReal x3147=((0.4)*x3128);
IkReal x3148=(r20*x3138);
IkReal x3149=((1.93e-6)*x3126);
IkReal x3150=(r10*x3143);
IkReal x3151=((1.93e-6)*x3128);
IkReal x3152=((0.4)*sj3*sj5);
IkReal x3153=((0.4)*x3126);
IkReal x3154=(x3144*x3149);
IkReal x3155=(x3144*x3147);
evalcond[0]=((((-1.0)*x3151))+(((-1.0)*x3153))+(((-9.9e-7)*x3133))+((x3132*x3133))+(((-1.0)*pz))+((r22*x3137))+((r20*x3143))+(((-1.0)*r20*sj4*x3130)));
evalcond[1]=((((-1.0)*sj0*x3132*x3135))+((sj0*x3130*x3146))+((x3127*x3149))+(((-1.0)*sj0*x3150))+(((-1.0)*r12*sj0*x3137))+((x3135*x3145))+(((-1.0)*x3127*x3147))+((py*sj0)));
evalcond[2]=(((x3129*x3149))+(((-1.0)*x3136*x3139))+(((-1.0)*x3129*x3147))+((cj0*x3130*x3142))+(((-1.0)*cj0*x3132*x3140))+((cj0*px))+(((-1.0)*cj0*r02*x3137))+((x3136*x3140)));
evalcond[3]=(((cj3*x3135*x3137))+((r10*x3152))+(((-1.0)*r10*x3130*x3138))+(((9.9e-7)*sj5*x3131))+(((-1.0)*x3141*x3143))+(((-1.0)*cj3*r12*x3132))+((sj0*x3151))+((sj0*x3153))+((r11*sj3*x3130))+((pz*sj0)));
evalcond[4]=((((-1.0)*cj3*r02*x3132))+((x3133*x3136))+((cj0*x3151))+((cj0*x3153))+((r00*x3152))+(((-1.0)*cj5*r20*x3136))+((r01*sj3*x3130))+(((-1.0)*r00*x3130*x3138))+((cj0*pz))+((cj3*x3137*x3140)));
evalcond[5]=((((-1.0)*x3150))+(((-1.0)*cj3*sj5*x3131*x3137))+((sj0*x3149))+(((-1.0)*x3141*x3152))+(((-1.0)*sj3*x3130*x3131))+py+((x3130*x3138*x3141))+((sj0*x3132*x3134))+(((-1.0)*sj0*x3147))+(((9.9e-7)*x3135)));
evalcond[6]=((((-1.0)*cj0*r20*x3152))+(((-9.9e-7)*x3139))+((cj0*x3149))+(((-1.0)*cj0*cj3*x3133*x3137))+(((-1.0)*cj0*r21*sj3*x3130))+(((-1.0)*cj0*x3147))+(((9.9e-7)*x3140))+px+((cj0*x3130*x3148))+((cj0*x3132*x3134)));
evalcond[7]=((((-1.0)*x3155))+x3154+((cj0*x3130*x3146))+((x3140*x3145))+(((-1.0)*x3139*x3145))+((px*sj0))+(((-1.0)*cj0*r12*x3137))+(((-1.0)*cj0*x3132*x3135)));
evalcond[8]=((((-1.0)*x3155))+x3154+((sj0*x3130*x3142))+(((-1.0)*cj5*r10*x3136))+(((-1.0)*r02*sj0*x3137))+(((-1.0)*sj0*x3132*x3140))+((x3135*x3136))+((cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3156=(cj4*sj1);
IkReal x3157=(cj1*sj4);
IkReal x3158=((1.0)*cj5);
IkReal x3159=(r21*sj5);
IkReal x3160=(cj1*cj4);
IkReal x3161=(sj1*sj4);
IkReal x3162=(r01*sj4*sj5);
if( IKabs((((r02*x3160))+(((-1.0)*r00*x3157*x3158))+(((-1.0)*r22*x3156))+((r01*sj5*x3157))+((cj5*r20*x3161))+(((-1.0)*x3159*x3161)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x3160))+((r02*x3156))+(((-1.0)*r00*x3158*x3161))+(((-1.0)*r20*x3157*x3158))+((x3157*x3159))+((r01*sj5*x3161)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x3160))+(((-1.0)*r00*x3157*x3158))+(((-1.0)*r22*x3156))+((r01*sj5*x3157))+((cj5*r20*x3161))+(((-1.0)*x3159*x3161))))+IKsqr((((r22*x3160))+((r02*x3156))+(((-1.0)*r00*x3158*x3161))+(((-1.0)*r20*x3157*x3158))+((x3157*x3159))+((r01*sj5*x3161))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r02*x3160))+(((-1.0)*r00*x3157*x3158))+(((-1.0)*r22*x3156))+((r01*sj5*x3157))+((cj5*r20*x3161))+(((-1.0)*x3159*x3161))), (((r22*x3160))+((r02*x3156))+(((-1.0)*r00*x3158*x3161))+(((-1.0)*r20*x3157*x3158))+((x3157*x3159))+((r01*sj5*x3161))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3163=IKcos(j2);
IkReal x3164=IKsin(j2);
IkReal x3165=((1.0)*cj3);
IkReal x3166=(cj5*r00);
IkReal x3167=((1.0)*cj4);
IkReal x3168=(r01*sj5);
IkReal x3169=((1.0)*sj4);
IkReal x3170=(cj5*sj3);
IkReal x3171=(cj5*r20);
IkReal x3172=(sj3*sj5);
IkReal x3173=(r21*sj5);
IkReal x3174=(cj1*x3163);
IkReal x3175=(cj3*cj4*sj5);
IkReal x3176=(cj1*x3164);
IkReal x3177=(sj1*x3164);
IkReal x3178=(sj1*x3163);
IkReal x3179=((1.0)*x3177);
evalcond[0]=(x3178+x3176+((sj4*x3166))+(((-1.0)*r02*x3167))+(((-1.0)*x3168*x3169)));
evalcond[1]=((((-1.0)*x3169*x3173))+x3174+(((-1.0)*x3179))+((sj4*x3171))+(((-1.0)*r22*x3167)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x3173))+(((9.9e-7)*x3171))+(((-0.4)*x3177))+(((-1.0)*pz))+(((0.4)*x3174))+(((-0.4)*sj1)));
evalcond[3]=((((0.4)*cj1))+(((9.9e-7)*x3166))+(((-1.0)*px))+(((-1.93e-6)*sj1))+(((-9.9e-7)*x3168))+(((0.4)*x3176))+(((0.4)*x3178)));
evalcond[4]=(x3174+(((-1.0)*x3179))+((cj3*cj4*x3168))+((r00*x3172))+((r01*x3170))+(((-1.0)*r02*sj4*x3165))+(((-1.0)*cj4*x3165*x3166)));
evalcond[5]=(((cj3*cj4*x3173))+(((-1.0)*x3176))+(((-1.0)*x3178))+(((-1.0)*r22*sj4*x3165))+((r21*x3170))+(((-1.0)*cj4*x3165*x3171))+((r20*x3172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3180=((1.0)*r01);
IkReal x3181=(sj1*sj4);
IkReal x3182=(cj5*r00);
IkReal x3183=(cj1*cj4);
IkReal x3184=(cj5*r20);
IkReal x3185=(cj1*sj4);
IkReal x3186=(sj5*x3185);
IkReal x3187=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*r21*sj5*x3181))+(((-1.0)*x3180*x3186))+(((-1.0)*r22*x3187))+((x3182*x3185))+(((-1.0)*r02*x3183))+((x3181*x3184)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x3183))+(((-1.0)*r02*x3187))+(((-1.0)*sj5*x3180*x3181))+(((-1.0)*x3184*x3185))+((x3181*x3182))+((r21*x3186)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*sj5*x3181))+(((-1.0)*x3180*x3186))+(((-1.0)*r22*x3187))+((x3182*x3185))+(((-1.0)*r02*x3183))+((x3181*x3184))))+IKsqr((((r22*x3183))+(((-1.0)*r02*x3187))+(((-1.0)*sj5*x3180*x3181))+(((-1.0)*x3184*x3185))+((x3181*x3182))+((r21*x3186))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*sj5*x3181))+(((-1.0)*x3180*x3186))+(((-1.0)*r22*x3187))+((x3182*x3185))+(((-1.0)*r02*x3183))+((x3181*x3184))), (((r22*x3183))+(((-1.0)*r02*x3187))+(((-1.0)*sj5*x3180*x3181))+(((-1.0)*x3184*x3185))+((x3181*x3182))+((r21*x3186))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3188=IKcos(j2);
IkReal x3189=IKsin(j2);
IkReal x3190=((1.0)*cj3);
IkReal x3191=(cj5*r00);
IkReal x3192=((1.0)*cj4);
IkReal x3193=(r01*sj5);
IkReal x3194=((1.0)*sj4);
IkReal x3195=(cj5*sj3);
IkReal x3196=(cj5*r20);
IkReal x3197=((1.0)*sj1);
IkReal x3198=(sj3*sj5);
IkReal x3199=((0.4)*sj1);
IkReal x3200=(r21*sj5);
IkReal x3201=(cj1*x3188);
IkReal x3202=(cj3*cj4*sj5);
IkReal x3203=((0.4)*x3189);
IkReal x3204=(x3188*x3197);
IkReal x3205=((1.0)*cj1*x3189);
IkReal x3206=(x3205+x3204);
evalcond[0]=((((-1.0)*x3194*x3200))+(((-1.0)*r22*x3192))+((sj4*x3196))+x3201+(((-1.0)*x3189*x3197)));
evalcond[1]=(((sj4*x3191))+(((-1.0)*x3193*x3194))+(((-1.0)*r02*x3192))+(((-1.0)*x3206)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x3200))+(((0.4)*x3201))+(((9.9e-7)*x3196))+(((-1.0)*pz))+(((-1.0)*x3199))+(((-1.0)*x3189*x3199)));
evalcond[3]=((((1.93e-6)*sj1))+(((-1.0)*x3188*x3199))+(((9.9e-7)*x3191))+(((-1.0)*px))+(((-9.9e-7)*x3193))+(((-1.0)*cj1*x3203))+(((-0.4)*cj1)));
evalcond[4]=(((r00*x3198))+(((-1.0)*x3201))+((r01*x3195))+(((-1.0)*r02*sj4*x3190))+((sj1*x3189))+(((-1.0)*cj4*x3190*x3191))+((cj3*cj4*x3193)));
evalcond[5]=(((r21*x3195))+(((-1.0)*r22*sj4*x3190))+((r20*x3198))+((cj3*cj4*x3200))+(((-1.0)*cj4*x3190*x3196))+(((-1.0)*x3206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3207=(cj4*r12);
IkReal x3208=(cj4*r22);
IkReal x3209=(cj1*sj4);
IkReal x3210=(r11*sj5);
IkReal x3211=(r21*sj5);
IkReal x3212=((1.0)*sj1);
IkReal x3213=(sj1*sj4);
IkReal x3214=(cj5*r20);
IkReal x3215=((1.0)*cj5*r10);
if( IKabs((((x3213*x3214))+((x3209*x3210))+(((-1.0)*x3209*x3215))+(((-1.0)*sj4*x3211*x3212))+(((-1.0)*x3208*x3212))+((cj1*x3207)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3209*x3214))+((x3209*x3211))+(((-1.0)*cj5*r10*sj4*x3212))+((cj1*x3208))+((sj1*x3207))+((x3210*x3213)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x3213*x3214))+((x3209*x3210))+(((-1.0)*x3209*x3215))+(((-1.0)*sj4*x3211*x3212))+(((-1.0)*x3208*x3212))+((cj1*x3207))))+IKsqr(((((-1.0)*x3209*x3214))+((x3209*x3211))+(((-1.0)*cj5*r10*sj4*x3212))+((cj1*x3208))+((sj1*x3207))+((x3210*x3213))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x3213*x3214))+((x3209*x3210))+(((-1.0)*x3209*x3215))+(((-1.0)*sj4*x3211*x3212))+(((-1.0)*x3208*x3212))+((cj1*x3207))), ((((-1.0)*x3209*x3214))+((x3209*x3211))+(((-1.0)*cj5*r10*sj4*x3212))+((cj1*x3208))+((sj1*x3207))+((x3210*x3213))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3216=IKcos(j2);
IkReal x3217=IKsin(j2);
IkReal x3218=(cj3*cj4);
IkReal x3219=(r21*sj5);
IkReal x3220=((1.0)*r22);
IkReal x3221=(cj5*r10);
IkReal x3222=(cj5*r20);
IkReal x3223=(cj5*sj3);
IkReal x3224=(cj3*sj4);
IkReal x3225=(r11*sj5);
IkReal x3226=((1.0)*sj4);
IkReal x3227=((1.0)*r12);
IkReal x3228=(sj3*sj5);
IkReal x3229=(cj1*x3216);
IkReal x3230=(cj1*x3217);
IkReal x3231=(sj1*x3217);
IkReal x3232=(sj1*x3216);
IkReal x3233=((1.0)*x3231);
evalcond[0]=(x3232+x3230+(((-1.0)*x3225*x3226))+((sj4*x3221))+(((-1.0)*cj4*x3227)));
evalcond[1]=(x3229+((sj4*x3222))+(((-1.0)*x3233))+(((-1.0)*cj4*x3220))+(((-1.0)*x3219*x3226)));
evalcond[2]=((((-1.93e-6)*cj1))+(((0.4)*x3229))+(((-9.9e-7)*x3219))+(((-0.4)*x3231))+(((-1.0)*pz))+(((9.9e-7)*x3222))+(((-0.4)*sj1)));
evalcond[3]=((((0.4)*cj1))+(((0.4)*x3230))+(((0.4)*x3232))+(((-1.0)*py))+(((-9.9e-7)*x3225))+(((-1.93e-6)*sj1))+(((9.9e-7)*x3221)));
evalcond[4]=(((r10*x3228))+((x3218*x3225))+((r11*x3223))+x3229+(((-1.0)*x3224*x3227))+(((-1.0)*x3233))+(((-1.0)*x3218*x3221)));
evalcond[5]=(((r21*x3223))+(((-1.0)*x3232))+(((-1.0)*x3230))+(((-1.0)*x3220*x3224))+(((-1.0)*x3218*x3222))+((r20*x3228))+((x3218*x3219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3234=((1.0)*cj1);
IkReal x3235=(sj4*sj5);
IkReal x3236=(cj5*sj4);
IkReal x3237=((1.0)*sj1);
IkReal x3238=(sj1*x3236);
IkReal x3239=(cj4*x3237);
if( IKabs((((cj1*r10*x3236))+(((-1.0)*r11*x3234*x3235))+(((-1.0)*cj4*r12*x3234))+((r20*x3238))+(((-1.0)*r22*x3239))+(((-1.0)*r21*x3235*x3237)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+(((-1.0)*r11*x3235*x3237))+(((-1.0)*r20*x3234*x3236))+((cj1*r21*x3235))+(((-1.0)*r12*x3239))+((r10*x3238)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r10*x3236))+(((-1.0)*r11*x3234*x3235))+(((-1.0)*cj4*r12*x3234))+((r20*x3238))+(((-1.0)*r22*x3239))+(((-1.0)*r21*x3235*x3237))))+IKsqr((((cj1*cj4*r22))+(((-1.0)*r11*x3235*x3237))+(((-1.0)*r20*x3234*x3236))+((cj1*r21*x3235))+(((-1.0)*r12*x3239))+((r10*x3238))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r10*x3236))+(((-1.0)*r11*x3234*x3235))+(((-1.0)*cj4*r12*x3234))+((r20*x3238))+(((-1.0)*r22*x3239))+(((-1.0)*r21*x3235*x3237))), (((cj1*cj4*r22))+(((-1.0)*r11*x3235*x3237))+(((-1.0)*r20*x3234*x3236))+((cj1*r21*x3235))+(((-1.0)*r12*x3239))+((r10*x3238))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3240=IKcos(j2);
IkReal x3241=IKsin(j2);
IkReal x3242=(cj3*cj4);
IkReal x3243=(r21*sj5);
IkReal x3244=((1.0)*r22);
IkReal x3245=(cj5*r10);
IkReal x3246=(cj5*r20);
IkReal x3247=(cj5*sj3);
IkReal x3248=((1.0)*sj1);
IkReal x3249=(cj3*sj4);
IkReal x3250=(sj3*sj5);
IkReal x3251=(r11*sj5);
IkReal x3252=((1.0)*sj4);
IkReal x3253=((1.0)*r12);
IkReal x3254=((0.4)*sj1);
IkReal x3255=(cj1*x3240);
IkReal x3256=((0.4)*x3241);
IkReal x3257=(x3240*x3248);
IkReal x3258=((1.0)*cj1*x3241);
IkReal x3259=(x3258+x3257);
evalcond[0]=((((-1.0)*cj4*x3244))+x3255+(((-1.0)*x3243*x3252))+(((-1.0)*x3241*x3248))+((sj4*x3246)));
evalcond[1]=((((-1.0)*cj4*x3253))+(((-1.0)*x3251*x3252))+(((-1.0)*x3259))+((sj4*x3245)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x3243))+(((0.4)*x3255))+(((9.9e-7)*x3246))+(((-1.0)*x3241*x3254))+(((-1.0)*pz))+(((-1.0)*x3254)));
evalcond[3]=((((9.9e-7)*x3245))+(((1.93e-6)*sj1))+(((-1.0)*py))+(((-9.9e-7)*x3251))+(((-1.0)*cj1*x3256))+(((-1.0)*x3240*x3254))+(((-0.4)*cj1)));
evalcond[4]=(((r10*x3250))+((sj1*x3241))+((x3242*x3251))+(((-1.0)*x3249*x3253))+(((-1.0)*x3242*x3245))+(((-1.0)*x3255))+((r11*x3247)));
evalcond[5]=(((r21*x3247))+(((-1.0)*x3244*x3249))+(((-1.0)*x3242*x3246))+((x3242*x3243))+((r20*x3250))+(((-1.0)*x3259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3260=((1.0)*sj1);
IkReal x3261=(cj5*sj4);
IkReal x3262=(r20*sj0);
IkReal x3263=((1.0)*cj1);
IkReal x3264=(cj4*r12);
IkReal x3265=(cj4*r22*sj0);
IkReal x3266=(r11*sj4*sj5);
IkReal x3267=(r21*sj0*sj4*sj5);
CheckValue<IkReal> x3268=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x3268.valid){
continue;
}
CheckValue<IkReal> x3269 = IKatan2WithCheck(IkReal((((sj1*x3261*x3262))+(((-1.0)*x3260*x3265))+(((-1.0)*x3260*x3267))+(((-1.0)*r10*x3261*x3263))+((cj1*x3264))+((cj1*x3266)))),IkReal((((sj1*x3266))+((sj1*x3264))+((cj1*x3265))+((cj1*x3267))+(((-1.0)*x3261*x3262*x3263))+(((-1.0)*r10*x3260*x3261)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3269.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3268.value)))+(x3269.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x3270=IKsin(j2);
IkReal x3271=IKcos(j2);
IkReal x3272=((1.0)*cj3);
IkReal x3273=(cj5*r00);
IkReal x3274=(cj0*cj1);
IkReal x3275=(cj5*r10);
IkReal x3276=(r01*sj5);
IkReal x3277=((1.0)*sj4);
IkReal x3278=(cj5*sj3);
IkReal x3279=(cj1*sj0);
IkReal x3280=(sj3*sj5);
IkReal x3281=(cj5*r20);
IkReal x3282=((1.0)*cj4);
IkReal x3283=((1.93e-6)*sj1);
IkReal x3284=(r11*sj5);
IkReal x3285=(r21*sj5);
IkReal x3286=(cj1*x3271);
IkReal x3287=(cj3*cj4*sj5);
IkReal x3288=((0.4)*x3270);
IkReal x3289=(sj1*x3271);
IkReal x3290=((1.0)*sj1*x3270);
evalcond[0]=((((-1.0)*x3290))+(((-1.0)*r22*x3282))+x3286+(((-1.0)*x3277*x3285))+((sj4*x3281)));
evalcond[1]=((((-1.0)*x3276*x3277))+(((-1.0)*r02*x3282))+((cj0*x3289))+((sj4*x3273))+((x3270*x3274)));
evalcond[2]=((((-1.0)*r12*x3282))+(((-1.0)*x3277*x3284))+((sj0*x3289))+((sj4*x3275))+((x3270*x3279)));
evalcond[3]=((((-1.93e-6)*cj1))+(((9.9e-7)*x3281))+(((-1.0)*pz))+(((-9.9e-7)*x3285))+(((0.4)*x3286))+(((-0.4)*sj1))+(((-1.0)*sj1*x3288)));
evalcond[4]=((((-9.9e-7)*x3276))+(((-1.0)*px))+(((0.4)*x3274))+((x3274*x3288))+(((-1.0)*cj0*x3283))+(((0.4)*cj0*x3289))+(((9.9e-7)*x3273)));
evalcond[5]=(((x3279*x3288))+(((-1.0)*sj0*x3283))+(((-1.0)*py))+(((-9.9e-7)*x3284))+(((0.4)*sj0*x3289))+(((0.4)*x3279))+(((9.9e-7)*x3275)));
evalcond[6]=(((r20*x3280))+(((-1.0)*r22*sj4*x3272))+((r21*x3278))+(((-1.0)*cj1*x3270))+((cj3*cj4*x3285))+(((-1.0)*x3289))+(((-1.0)*cj4*x3272*x3281)));
evalcond[7]=(((r00*x3280))+(((-1.0)*cj4*x3272*x3273))+((r01*x3278))+(((-1.0)*cj0*x3290))+((cj3*cj4*x3276))+(((-1.0)*r02*sj4*x3272))+((x3271*x3274)));
evalcond[8]=((((-1.0)*cj4*x3272*x3275))+(((-1.0)*sj0*x3290))+((r11*x3278))+((r10*x3280))+(((-1.0)*r12*sj4*x3272))+((cj3*cj4*x3284))+((x3271*x3279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3291=((1.0)*cj0);
IkReal x3292=(cj4*r02);
IkReal x3293=(cj1*sj4);
IkReal x3294=(cj4*r22);
IkReal x3295=(cj5*r20);
IkReal x3296=(sj1*sj4);
IkReal x3297=(sj5*x3296);
IkReal x3298=((1.0)*cj5*r00);
CheckValue<IkReal> x3299=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x3299.valid){
continue;
}
CheckValue<IkReal> x3300 = IKatan2WithCheck(IkReal((((r01*sj5*x3293))+((cj0*x3295*x3296))+((cj1*x3292))+(((-1.0)*sj1*x3291*x3294))+(((-1.0)*r21*x3291*x3297))+(((-1.0)*x3293*x3298)))),IkReal((((r01*x3297))+((cj0*r21*sj5*x3293))+((sj1*x3292))+(((-1.0)*x3296*x3298))+(((-1.0)*x3291*x3293*x3295))+((cj0*cj1*x3294)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3300.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3299.value)))+(x3300.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x3301=IKsin(j2);
IkReal x3302=IKcos(j2);
IkReal x3303=((1.0)*cj3);
IkReal x3304=(cj5*r00);
IkReal x3305=(cj0*cj1);
IkReal x3306=(cj5*r10);
IkReal x3307=(r01*sj5);
IkReal x3308=((1.0)*sj4);
IkReal x3309=(cj5*sj3);
IkReal x3310=(cj1*sj0);
IkReal x3311=(sj3*sj5);
IkReal x3312=(cj5*r20);
IkReal x3313=((1.0)*cj4);
IkReal x3314=((1.93e-6)*sj1);
IkReal x3315=(r11*sj5);
IkReal x3316=(r21*sj5);
IkReal x3317=(cj1*x3302);
IkReal x3318=(cj3*cj4*sj5);
IkReal x3319=((0.4)*x3301);
IkReal x3320=(sj1*x3302);
IkReal x3321=((1.0)*sj1*x3301);
evalcond[0]=((((-1.0)*x3321))+((sj4*x3312))+x3317+(((-1.0)*r22*x3313))+(((-1.0)*x3308*x3316)));
evalcond[1]=(((sj4*x3304))+(((-1.0)*r02*x3313))+((x3301*x3305))+((cj0*x3320))+(((-1.0)*x3307*x3308)));
evalcond[2]=(((sj4*x3306))+((sj0*x3320))+((x3301*x3310))+(((-1.0)*x3308*x3315))+(((-1.0)*r12*x3313)));
evalcond[3]=((((-1.93e-6)*cj1))+(((9.9e-7)*x3312))+(((0.4)*x3317))+(((-1.0)*pz))+(((-1.0)*sj1*x3319))+(((-9.9e-7)*x3316))+(((-0.4)*sj1)));
evalcond[4]=((((9.9e-7)*x3304))+(((0.4)*x3305))+(((-1.0)*cj0*x3314))+(((-1.0)*px))+(((-9.9e-7)*x3307))+((x3305*x3319))+(((0.4)*cj0*x3320)));
evalcond[5]=((((9.9e-7)*x3306))+(((-1.0)*sj0*x3314))+(((0.4)*x3310))+(((-1.0)*py))+(((-9.9e-7)*x3315))+(((0.4)*sj0*x3320))+((x3310*x3319)));
evalcond[6]=((((-1.0)*x3320))+((cj3*cj4*x3316))+(((-1.0)*cj1*x3301))+((r21*x3309))+(((-1.0)*cj4*x3303*x3312))+(((-1.0)*r22*sj4*x3303))+((r20*x3311)));
evalcond[7]=((((-1.0)*cj0*x3321))+((cj3*cj4*x3307))+(((-1.0)*r02*sj4*x3303))+(((-1.0)*cj4*x3303*x3304))+((r00*x3311))+((r01*x3309))+((x3302*x3305)));
evalcond[8]=((((-1.0)*r12*sj4*x3303))+((x3302*x3310))+((cj3*cj4*x3315))+((r11*x3309))+(((-1.0)*cj4*x3303*x3306))+((r10*x3311))+(((-1.0)*sj0*x3321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3322=cj0*cj0;
IkReal x3323=(cj0*px);
IkReal x3324=(cj5*r20);
IkReal x3325=(r21*sj5);
IkReal x3326=((0.4)*sj4);
IkReal x3327=((77.2)*sj4);
IkReal x3328=(cj0*cj4*r02);
IkReal x3329=(cj0*r01*sj5);
IkReal x3330=(cj0*cj5*r00);
IkReal x3331=((((-1.0)*x3324*x3326))+(((-9.9e-7)*x3325))+((x3325*x3326))+(((-1.0)*pz))+(((9.9e-7)*x3324))+(((0.4)*cj4*r22)));
IkReal x3332=(x3322*x3331);
CheckValue<IkReal> x3333 = IKatan2WithCheck(IkReal(((((-1.0)*x3327*x3329))+(((-0.00019107)*x3330))+((x3327*x3330))+(((193.0)*x3323))+(((-40000000.0)*x3332))+(((-77.2)*x3328))+(((0.00019107)*x3329)))),IkReal(((((16000000.0)*x3328))+(((16000000.0)*sj4*x3329))+(((-193.0)*x3332))+(((-39.6)*x3329))+(((-16000000.0)*sj4*x3330))+(((-40000000.0)*x3323))+(((39.6)*x3330)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3333.valid){
continue;
}
CheckValue<IkReal> x3334=IKPowWithIntegerCheck(IKsign(x3322),-1);
if(!x3334.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x3333.value)+(((-1.5707963267949)*(x3334.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x3335=IKsin(j1);
IkReal x3336=sj0*sj0;
IkReal x3337=IKcos(j1);
IkReal x3338=cj0*cj0;
IkReal x3339=((0.4)*cj5);
IkReal x3340=(r21*sj0);
IkReal x3341=((0.4)*sj4);
IkReal x3342=(r21*sj5);
IkReal x3343=(cj3*r22);
IkReal x3344=(r11*sj5);
IkReal x3345=((9.9e-7)*cj0);
IkReal x3346=((0.4)*cj4);
IkReal x3347=(cj3*cj4);
IkReal x3348=(cj5*r00);
IkReal x3349=(r01*sj5);
IkReal x3350=(r20*sj0);
IkReal x3351=(r00*sj4);
IkReal x3352=((9.9e-7)*cj5);
IkReal x3353=(cj0*sj0);
IkReal x3354=((9.9e-7)*sj0);
IkReal x3355=(r10*sj4);
IkReal x3356=((0.4)*x3337);
IkReal x3357=(r20*x3347);
IkReal x3358=((1.93e-6)*x3335);
IkReal x3359=(r10*x3352);
IkReal x3360=((1.93e-6)*x3337);
IkReal x3361=((0.4)*sj3*sj5);
IkReal x3362=((0.4)*x3335);
IkReal x3363=(x3353*x3358);
IkReal x3364=(x3353*x3356);
evalcond[0]=((((-1.0)*x3362))+(((-1.0)*x3360))+((r22*x3346))+(((-1.0)*r20*sj4*x3339))+((x3341*x3342))+((r20*x3352))+(((-1.0)*pz))+(((-9.9e-7)*x3342)));
evalcond[1]=(((x3344*x3354))+((sj0*x3339*x3355))+((x3336*x3358))+(((-1.0)*sj0*x3341*x3344))+(((-1.0)*sj0*x3359))+(((-1.0)*r12*sj0*x3346))+((py*sj0))+(((-1.0)*x3336*x3356)));
evalcond[2]=(((cj0*x3339*x3351))+(((-1.0)*x3338*x3356))+(((-1.0)*cj0*x3341*x3349))+((x3338*x3358))+((x3345*x3349))+(((-1.0)*x3345*x3348))+(((-1.0)*cj0*r02*x3346))+((cj0*px)));
evalcond[3]=(((r10*x3361))+((cj3*x3344*x3346))+(((-1.0)*x3350*x3352))+((r11*sj3*x3339))+(((9.9e-7)*sj5*x3340))+((pz*sj0))+(((-1.0)*cj3*r12*x3341))+((sj0*x3362))+((sj0*x3360))+(((-1.0)*r10*x3339*x3347)));
evalcond[4]=(((cj0*x3362))+((cj0*x3360))+(((-1.0)*cj5*r20*x3345))+((x3342*x3345))+(((-1.0)*cj3*r02*x3341))+((r00*x3361))+(((-1.0)*r00*x3339*x3347))+((cj3*x3346*x3349))+((cj0*pz))+((r01*sj3*x3339)));
evalcond[5]=((((-1.0)*x3359))+((sj0*x3341*x3343))+((sj0*x3358))+(((-1.0)*cj3*sj5*x3340*x3346))+((x3339*x3347*x3350))+py+(((-1.0)*sj3*x3339*x3340))+(((-1.0)*sj0*x3356))+(((9.9e-7)*x3344))+(((-1.0)*x3350*x3361)));
evalcond[6]=((((-1.0)*cj0*x3356))+(((-1.0)*cj0*cj3*x3342*x3346))+((cj0*x3341*x3343))+(((-1.0)*cj0*r21*sj3*x3339))+((cj0*x3339*x3357))+(((-9.9e-7)*x3348))+px+(((9.9e-7)*x3349))+((cj0*x3358))+(((-1.0)*cj0*r20*x3361)));
evalcond[7]=((((-1.0)*x3348*x3354))+(((-1.0)*cj0*r12*x3346))+x3363+(((-1.0)*x3364))+((cj0*x3339*x3355))+(((-1.0)*cj0*x3341*x3344))+((px*sj0))+((x3349*x3354)));
evalcond[8]=(((x3344*x3345))+((sj0*x3339*x3351))+x3363+(((-1.0)*x3364))+(((-1.0)*sj0*x3341*x3349))+(((-1.0)*cj5*r10*x3345))+((cj0*py))+(((-1.0)*r02*sj0*x3346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3365=(cj4*sj1);
IkReal x3366=(cj1*sj4);
IkReal x3367=((1.0)*cj5);
IkReal x3368=(r21*sj5);
IkReal x3369=(cj1*cj4);
IkReal x3370=(sj1*sj4);
IkReal x3371=(r01*sj4*sj5);
if( IKabs((((r01*sj5*x3366))+((r02*x3369))+((cj5*r20*x3370))+(((-1.0)*x3368*x3370))+(((-1.0)*r22*x3365))+(((-1.0)*r00*x3366*x3367)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x3365))+((r22*x3369))+((r01*sj5*x3370))+(((-1.0)*r00*x3367*x3370))+(((-1.0)*r20*x3366*x3367))+((x3366*x3368)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj5*x3366))+((r02*x3369))+((cj5*r20*x3370))+(((-1.0)*x3368*x3370))+(((-1.0)*r22*x3365))+(((-1.0)*r00*x3366*x3367))))+IKsqr((((r02*x3365))+((r22*x3369))+((r01*sj5*x3370))+(((-1.0)*r00*x3367*x3370))+(((-1.0)*r20*x3366*x3367))+((x3366*x3368))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r01*sj5*x3366))+((r02*x3369))+((cj5*r20*x3370))+(((-1.0)*x3368*x3370))+(((-1.0)*r22*x3365))+(((-1.0)*r00*x3366*x3367))), (((r02*x3365))+((r22*x3369))+((r01*sj5*x3370))+(((-1.0)*r00*x3367*x3370))+(((-1.0)*r20*x3366*x3367))+((x3366*x3368))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3372=IKcos(j2);
IkReal x3373=IKsin(j2);
IkReal x3374=((1.0)*cj3);
IkReal x3375=(cj5*r00);
IkReal x3376=((1.0)*cj4);
IkReal x3377=(r01*sj5);
IkReal x3378=((1.0)*sj4);
IkReal x3379=(cj5*sj3);
IkReal x3380=(cj5*r20);
IkReal x3381=(sj3*sj5);
IkReal x3382=(r21*sj5);
IkReal x3383=(cj1*x3372);
IkReal x3384=(cj3*cj4*sj5);
IkReal x3385=(cj1*x3373);
IkReal x3386=(sj1*x3373);
IkReal x3387=(sj1*x3372);
IkReal x3388=((1.0)*x3386);
evalcond[0]=(x3387+x3385+(((-1.0)*r02*x3376))+(((-1.0)*x3377*x3378))+((sj4*x3375)));
evalcond[1]=((((-1.0)*r22*x3376))+(((-1.0)*x3378*x3382))+x3383+((sj4*x3380))+(((-1.0)*x3388)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-0.4)*x3386))+(((-1.0)*pz))+(((9.9e-7)*x3380))+(((0.4)*x3383))+(((-0.4)*sj1))+(((-9.9e-7)*x3382)));
evalcond[3]=((((0.4)*cj1))+(((-1.0)*px))+(((-1.93e-6)*sj1))+(((-9.9e-7)*x3377))+(((9.9e-7)*x3375))+(((0.4)*x3385))+(((0.4)*x3387)));
evalcond[4]=(((r01*x3379))+((cj3*cj4*x3377))+x3383+(((-1.0)*cj4*x3374*x3375))+(((-1.0)*r02*sj4*x3374))+(((-1.0)*x3388))+((r00*x3381)));
evalcond[5]=(((cj3*cj4*x3382))+(((-1.0)*x3387))+(((-1.0)*x3385))+((r20*x3381))+(((-1.0)*cj4*x3374*x3380))+((r21*x3379))+(((-1.0)*r22*sj4*x3374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3389=((1.0)*r01);
IkReal x3390=(sj1*sj4);
IkReal x3391=(cj5*r00);
IkReal x3392=(cj1*cj4);
IkReal x3393=(cj5*r20);
IkReal x3394=(cj1*sj4);
IkReal x3395=(sj5*x3394);
IkReal x3396=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*r22*x3396))+((x3391*x3394))+(((-1.0)*x3389*x3395))+((x3390*x3393))+(((-1.0)*r02*x3392))+(((-1.0)*r21*sj5*x3390)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x3390*x3391))+((r21*x3395))+(((-1.0)*r02*x3396))+((r22*x3392))+(((-1.0)*sj5*x3389*x3390))+(((-1.0)*x3393*x3394)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x3396))+((x3391*x3394))+(((-1.0)*x3389*x3395))+((x3390*x3393))+(((-1.0)*r02*x3392))+(((-1.0)*r21*sj5*x3390))))+IKsqr((((x3390*x3391))+((r21*x3395))+(((-1.0)*r02*x3396))+((r22*x3392))+(((-1.0)*sj5*x3389*x3390))+(((-1.0)*x3393*x3394))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x3396))+((x3391*x3394))+(((-1.0)*x3389*x3395))+((x3390*x3393))+(((-1.0)*r02*x3392))+(((-1.0)*r21*sj5*x3390))), (((x3390*x3391))+((r21*x3395))+(((-1.0)*r02*x3396))+((r22*x3392))+(((-1.0)*sj5*x3389*x3390))+(((-1.0)*x3393*x3394))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3397=IKcos(j2);
IkReal x3398=IKsin(j2);
IkReal x3399=((1.0)*cj3);
IkReal x3400=(cj5*r00);
IkReal x3401=((1.0)*cj4);
IkReal x3402=(r01*sj5);
IkReal x3403=((1.0)*sj4);
IkReal x3404=(cj5*sj3);
IkReal x3405=(cj5*r20);
IkReal x3406=((1.0)*sj1);
IkReal x3407=(sj3*sj5);
IkReal x3408=((0.4)*sj1);
IkReal x3409=(r21*sj5);
IkReal x3410=(cj1*x3397);
IkReal x3411=(cj3*cj4*sj5);
IkReal x3412=((0.4)*x3398);
IkReal x3413=(x3397*x3406);
IkReal x3414=((1.0)*cj1*x3398);
IkReal x3415=(x3414+x3413);
evalcond[0]=((((-1.0)*x3398*x3406))+x3410+(((-1.0)*x3403*x3409))+(((-1.0)*r22*x3401))+((sj4*x3405)));
evalcond[1]=((((-1.0)*x3402*x3403))+(((-1.0)*r02*x3401))+((sj4*x3400))+(((-1.0)*x3415)));
evalcond[2]=((((-9.9e-7)*x3409))+(((9.9e-7)*x3405))+(((-1.93e-6)*cj1))+(((-1.0)*x3398*x3408))+(((0.4)*x3410))+(((-1.0)*pz))+(((-1.0)*x3408)));
evalcond[3]=((((-9.9e-7)*x3402))+(((9.9e-7)*x3400))+(((1.93e-6)*sj1))+(((-1.0)*cj1*x3412))+(((-1.0)*px))+(((-1.0)*x3397*x3408))+(((-0.4)*cj1)));
evalcond[4]=((((-1.0)*x3410))+((sj1*x3398))+(((-1.0)*r02*sj4*x3399))+((cj3*cj4*x3402))+((r00*x3407))+((r01*x3404))+(((-1.0)*cj4*x3399*x3400)));
evalcond[5]=(((cj3*cj4*x3409))+(((-1.0)*r22*sj4*x3399))+((r21*x3404))+((r20*x3407))+(((-1.0)*cj4*x3399*x3405))+(((-1.0)*x3415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3416=(cj4*r12);
IkReal x3417=(cj4*r22);
IkReal x3418=(cj1*sj4);
IkReal x3419=(r11*sj5);
IkReal x3420=(r21*sj5);
IkReal x3421=((1.0)*sj1);
IkReal x3422=(sj1*sj4);
IkReal x3423=(cj5*r20);
IkReal x3424=((1.0)*cj5*r10);
if( IKabs((((cj1*x3416))+(((-1.0)*sj4*x3420*x3421))+(((-1.0)*x3417*x3421))+((x3422*x3423))+(((-1.0)*x3418*x3424))+((x3418*x3419)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*sj4*x3421))+((cj1*x3417))+(((-1.0)*x3418*x3423))+((x3418*x3420))+((sj1*x3416))+((x3419*x3422)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x3416))+(((-1.0)*sj4*x3420*x3421))+(((-1.0)*x3417*x3421))+((x3422*x3423))+(((-1.0)*x3418*x3424))+((x3418*x3419))))+IKsqr(((((-1.0)*cj5*r10*sj4*x3421))+((cj1*x3417))+(((-1.0)*x3418*x3423))+((x3418*x3420))+((sj1*x3416))+((x3419*x3422))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x3416))+(((-1.0)*sj4*x3420*x3421))+(((-1.0)*x3417*x3421))+((x3422*x3423))+(((-1.0)*x3418*x3424))+((x3418*x3419))), ((((-1.0)*cj5*r10*sj4*x3421))+((cj1*x3417))+(((-1.0)*x3418*x3423))+((x3418*x3420))+((sj1*x3416))+((x3419*x3422))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3425=IKcos(j2);
IkReal x3426=IKsin(j2);
IkReal x3427=(cj3*cj4);
IkReal x3428=(r21*sj5);
IkReal x3429=((1.0)*r22);
IkReal x3430=(cj5*r10);
IkReal x3431=(cj5*r20);
IkReal x3432=(cj5*sj3);
IkReal x3433=(cj3*sj4);
IkReal x3434=(r11*sj5);
IkReal x3435=((1.0)*sj4);
IkReal x3436=((1.0)*r12);
IkReal x3437=(sj3*sj5);
IkReal x3438=(cj1*x3425);
IkReal x3439=(cj1*x3426);
IkReal x3440=(sj1*x3426);
IkReal x3441=(sj1*x3425);
IkReal x3442=((1.0)*x3440);
evalcond[0]=(x3441+x3439+(((-1.0)*x3434*x3435))+((sj4*x3430))+(((-1.0)*cj4*x3436)));
evalcond[1]=((((-1.0)*x3428*x3435))+x3438+((sj4*x3431))+(((-1.0)*cj4*x3429))+(((-1.0)*x3442)));
evalcond[2]=((((-1.93e-6)*cj1))+(((0.4)*x3438))+(((-1.0)*pz))+(((-9.9e-7)*x3428))+(((-0.4)*x3440))+(((9.9e-7)*x3431))+(((-0.4)*sj1)));
evalcond[3]=((((0.4)*x3439))+(((0.4)*x3441))+(((0.4)*cj1))+(((-1.0)*py))+(((-1.93e-6)*sj1))+(((-9.9e-7)*x3434))+(((9.9e-7)*x3430)));
evalcond[4]=(((r10*x3437))+(((-1.0)*x3427*x3430))+((x3427*x3434))+(((-1.0)*x3433*x3436))+x3438+((r11*x3432))+(((-1.0)*x3442)));
evalcond[5]=((((-1.0)*x3427*x3431))+((x3427*x3428))+((r20*x3437))+(((-1.0)*x3441))+(((-1.0)*x3439))+((r21*x3432))+(((-1.0)*x3429*x3433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3443=((1.0)*cj1);
IkReal x3444=(sj4*sj5);
IkReal x3445=(cj5*sj4);
IkReal x3446=((1.0)*sj1);
IkReal x3447=(sj1*x3445);
IkReal x3448=(cj4*x3446);
if( IKabs((((cj1*r10*x3445))+(((-1.0)*cj4*r12*x3443))+(((-1.0)*r11*x3443*x3444))+(((-1.0)*r21*x3444*x3446))+((r20*x3447))+(((-1.0)*r22*x3448)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x3447))+((cj1*cj4*r22))+((cj1*r21*x3444))+(((-1.0)*r11*x3444*x3446))+(((-1.0)*r12*x3448))+(((-1.0)*r20*x3443*x3445)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r10*x3445))+(((-1.0)*cj4*r12*x3443))+(((-1.0)*r11*x3443*x3444))+(((-1.0)*r21*x3444*x3446))+((r20*x3447))+(((-1.0)*r22*x3448))))+IKsqr((((r10*x3447))+((cj1*cj4*r22))+((cj1*r21*x3444))+(((-1.0)*r11*x3444*x3446))+(((-1.0)*r12*x3448))+(((-1.0)*r20*x3443*x3445))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r10*x3445))+(((-1.0)*cj4*r12*x3443))+(((-1.0)*r11*x3443*x3444))+(((-1.0)*r21*x3444*x3446))+((r20*x3447))+(((-1.0)*r22*x3448))), (((r10*x3447))+((cj1*cj4*r22))+((cj1*r21*x3444))+(((-1.0)*r11*x3444*x3446))+(((-1.0)*r12*x3448))+(((-1.0)*r20*x3443*x3445))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3449=IKcos(j2);
IkReal x3450=IKsin(j2);
IkReal x3451=(cj3*cj4);
IkReal x3452=(r21*sj5);
IkReal x3453=((1.0)*r22);
IkReal x3454=(cj5*r10);
IkReal x3455=(cj5*r20);
IkReal x3456=(cj5*sj3);
IkReal x3457=((1.0)*sj1);
IkReal x3458=(cj3*sj4);
IkReal x3459=(sj3*sj5);
IkReal x3460=(r11*sj5);
IkReal x3461=((1.0)*sj4);
IkReal x3462=((1.0)*r12);
IkReal x3463=((0.4)*sj1);
IkReal x3464=(cj1*x3449);
IkReal x3465=((0.4)*x3450);
IkReal x3466=(x3449*x3457);
IkReal x3467=((1.0)*cj1*x3450);
IkReal x3468=(x3467+x3466);
evalcond[0]=(((sj4*x3455))+x3464+(((-1.0)*x3452*x3461))+(((-1.0)*x3450*x3457))+(((-1.0)*cj4*x3453)));
evalcond[1]=(((sj4*x3454))+(((-1.0)*x3460*x3461))+(((-1.0)*cj4*x3462))+(((-1.0)*x3468)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x3452))+(((-1.0)*pz))+(((-1.0)*x3450*x3463))+(((0.4)*x3464))+(((-1.0)*x3463))+(((9.9e-7)*x3455)));
evalcond[3]=((((-1.0)*x3449*x3463))+(((-1.0)*cj1*x3465))+(((1.93e-6)*sj1))+(((-1.0)*py))+(((-9.9e-7)*x3460))+(((9.9e-7)*x3454))+(((-0.4)*cj1)));
evalcond[4]=(((sj1*x3450))+(((-1.0)*x3458*x3462))+((x3451*x3460))+(((-1.0)*x3464))+(((-1.0)*x3451*x3454))+((r10*x3459))+((r11*x3456)));
evalcond[5]=((((-1.0)*x3453*x3458))+((r21*x3456))+((r20*x3459))+(((-1.0)*x3468))+(((-1.0)*x3451*x3455))+((x3451*x3452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3469=((1.0)*sj1);
IkReal x3470=(cj5*sj4);
IkReal x3471=(r20*sj0);
IkReal x3472=((1.0)*cj1);
IkReal x3473=(cj4*r12);
IkReal x3474=(cj4*r22*sj0);
IkReal x3475=(r11*sj4*sj5);
IkReal x3476=(r21*sj0*sj4*sj5);
CheckValue<IkReal> x3477 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3470*x3472))+((sj1*x3470*x3471))+(((-1.0)*x3469*x3474))+(((-1.0)*x3469*x3476))+((cj1*x3473))+((cj1*x3475)))),IkReal(((((-1.0)*r10*x3469*x3470))+((sj1*x3473))+((sj1*x3475))+((cj1*x3476))+((cj1*x3474))+(((-1.0)*x3470*x3471*x3472)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3477.valid){
continue;
}
CheckValue<IkReal> x3478=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x3478.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x3477.value)+(((1.5707963267949)*(x3478.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x3479=IKsin(j2);
IkReal x3480=IKcos(j2);
IkReal x3481=((1.0)*cj3);
IkReal x3482=(cj5*r00);
IkReal x3483=(cj0*cj1);
IkReal x3484=(cj5*r10);
IkReal x3485=(r01*sj5);
IkReal x3486=((1.0)*sj4);
IkReal x3487=(cj5*sj3);
IkReal x3488=(cj1*sj0);
IkReal x3489=(sj3*sj5);
IkReal x3490=(cj5*r20);
IkReal x3491=((1.0)*cj4);
IkReal x3492=((1.93e-6)*sj1);
IkReal x3493=(r11*sj5);
IkReal x3494=(r21*sj5);
IkReal x3495=(cj1*x3480);
IkReal x3496=(cj3*cj4*sj5);
IkReal x3497=((0.4)*x3479);
IkReal x3498=(sj1*x3480);
IkReal x3499=((1.0)*sj1*x3479);
evalcond[0]=((((-1.0)*x3499))+(((-1.0)*x3486*x3494))+x3495+(((-1.0)*r22*x3491))+((sj4*x3490)));
evalcond[1]=((((-1.0)*r02*x3491))+((cj0*x3498))+(((-1.0)*x3485*x3486))+((x3479*x3483))+((sj4*x3482)));
evalcond[2]=((((-1.0)*r12*x3491))+(((-1.0)*x3486*x3493))+((x3479*x3488))+((sj0*x3498))+((sj4*x3484)));
evalcond[3]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x3494))+(((-1.0)*pz))+(((-1.0)*sj1*x3497))+(((9.9e-7)*x3490))+(((0.4)*x3495))+(((-0.4)*sj1)));
evalcond[4]=((((0.4)*cj0*x3498))+(((-1.0)*cj0*x3492))+(((-1.0)*px))+((x3483*x3497))+(((9.9e-7)*x3482))+(((0.4)*x3483))+(((-9.9e-7)*x3485)));
evalcond[5]=((((0.4)*sj0*x3498))+(((-1.0)*sj0*x3492))+(((-9.9e-7)*x3493))+(((-1.0)*py))+(((9.9e-7)*x3484))+(((0.4)*x3488))+((x3488*x3497)));
evalcond[6]=((((-1.0)*cj4*x3481*x3490))+((r20*x3489))+(((-1.0)*r22*sj4*x3481))+((r21*x3487))+((cj3*cj4*x3494))+(((-1.0)*x3498))+(((-1.0)*cj1*x3479)));
evalcond[7]=(((cj3*cj4*x3485))+((r00*x3489))+((x3480*x3483))+(((-1.0)*r02*sj4*x3481))+((r01*x3487))+(((-1.0)*cj4*x3481*x3482))+(((-1.0)*cj0*x3499)));
evalcond[8]=((((-1.0)*r12*sj4*x3481))+(((-1.0)*sj0*x3499))+((x3480*x3488))+(((-1.0)*cj4*x3481*x3484))+((r10*x3489))+((r11*x3487))+((cj3*cj4*x3493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3500=((1.0)*cj0);
IkReal x3501=(cj4*r02);
IkReal x3502=(cj1*sj4);
IkReal x3503=(cj4*r22);
IkReal x3504=(cj5*r20);
IkReal x3505=(sj1*sj4);
IkReal x3506=(sj5*x3505);
IkReal x3507=((1.0)*cj5*r00);
CheckValue<IkReal> x3508 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x3500*x3506))+((r01*sj5*x3502))+((cj1*x3501))+(((-1.0)*sj1*x3500*x3503))+(((-1.0)*x3502*x3507))+((cj0*x3504*x3505)))),IkReal((((r01*x3506))+(((-1.0)*x3500*x3502*x3504))+((cj0*r21*sj5*x3502))+((sj1*x3501))+(((-1.0)*x3505*x3507))+((cj0*cj1*x3503)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3508.valid){
continue;
}
CheckValue<IkReal> x3509=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x3509.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x3508.value)+(((1.5707963267949)*(x3509.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x3510=IKsin(j2);
IkReal x3511=IKcos(j2);
IkReal x3512=((1.0)*cj3);
IkReal x3513=(cj5*r00);
IkReal x3514=(cj0*cj1);
IkReal x3515=(cj5*r10);
IkReal x3516=(r01*sj5);
IkReal x3517=((1.0)*sj4);
IkReal x3518=(cj5*sj3);
IkReal x3519=(cj1*sj0);
IkReal x3520=(sj3*sj5);
IkReal x3521=(cj5*r20);
IkReal x3522=((1.0)*cj4);
IkReal x3523=((1.93e-6)*sj1);
IkReal x3524=(r11*sj5);
IkReal x3525=(r21*sj5);
IkReal x3526=(cj1*x3511);
IkReal x3527=(cj3*cj4*sj5);
IkReal x3528=((0.4)*x3510);
IkReal x3529=(sj1*x3511);
IkReal x3530=((1.0)*sj1*x3510);
evalcond[0]=(x3526+(((-1.0)*x3517*x3525))+(((-1.0)*r22*x3522))+((sj4*x3521))+(((-1.0)*x3530)));
evalcond[1]=((((-1.0)*r02*x3522))+((cj0*x3529))+((x3510*x3514))+((sj4*x3513))+(((-1.0)*x3516*x3517)));
evalcond[2]=(((x3510*x3519))+(((-1.0)*x3517*x3524))+((sj4*x3515))+((sj0*x3529))+(((-1.0)*r12*x3522)));
evalcond[3]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x3525))+(((0.4)*x3526))+(((-1.0)*sj1*x3528))+(((-1.0)*pz))+(((9.9e-7)*x3521))+(((-0.4)*sj1)));
evalcond[4]=((((-9.9e-7)*x3516))+(((0.4)*x3514))+(((-1.0)*cj0*x3523))+(((-1.0)*px))+((x3514*x3528))+(((9.9e-7)*x3513))+(((0.4)*cj0*x3529)));
evalcond[5]=((((-9.9e-7)*x3524))+(((-1.0)*sj0*x3523))+(((0.4)*x3519))+(((0.4)*sj0*x3529))+(((-1.0)*py))+(((9.9e-7)*x3515))+((x3519*x3528)));
evalcond[6]=((((-1.0)*x3529))+((r21*x3518))+((r20*x3520))+(((-1.0)*r22*sj4*x3512))+(((-1.0)*cj4*x3512*x3521))+((cj3*cj4*x3525))+(((-1.0)*cj1*x3510)));
evalcond[7]=(((r00*x3520))+((r01*x3518))+((x3511*x3514))+(((-1.0)*cj4*x3512*x3513))+(((-1.0)*r02*sj4*x3512))+((cj3*cj4*x3516))+(((-1.0)*cj0*x3530)));
evalcond[8]=((((-1.0)*r12*sj4*x3512))+((r10*x3520))+((x3511*x3519))+((r11*x3518))+(((-1.0)*cj4*x3512*x3515))+((cj3*cj4*x3524))+(((-1.0)*sj0*x3530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x3531=sj0*sj0;
IkReal x3532=(py*sj0);
IkReal x3533=((77.2)*sj0);
IkReal x3534=(sj4*sj5);
IkReal x3535=(cj4*r12);
IkReal x3536=((16000000.0)*sj0);
IkReal x3537=(cj5*r20);
IkReal x3538=(cj5*r10*sj0);
IkReal x3539=(r11*sj0*sj5);
IkReal x3540=((((0.4)*r21*x3534))+(((-9.9e-7)*r21*sj5))+(((9.9e-7)*x3537))+(((-1.0)*pz))+(((0.4)*cj4*r22))+(((-0.4)*sj4*x3537)));
IkReal x3541=(x3531*x3540);
CheckValue<IkReal> x3542 = IKatan2WithCheck(IkReal(((((0.00019107)*x3539))+((cj5*r10*sj4*x3533))+(((-1.0)*x3533*x3535))+(((-1.0)*r11*x3533*x3534))+(((-0.00019107)*x3538))+(((-40000000.0)*x3541))+(((193.0)*x3532)))),IkReal((((x3535*x3536))+(((-39.6)*x3539))+(((-16000000.0)*sj4*x3538))+((r11*x3534*x3536))+(((-40000000.0)*x3532))+(((-193.0)*x3541))+(((39.6)*x3538)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3542.valid){
continue;
}
CheckValue<IkReal> x3543=IKPowWithIntegerCheck(IKsign(x3531),-1);
if(!x3543.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x3542.value)+(((-1.5707963267949)*(x3543.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x3544=IKsin(j1);
IkReal x3545=sj0*sj0;
IkReal x3546=IKcos(j1);
IkReal x3547=cj0*cj0;
IkReal x3548=((0.4)*cj5);
IkReal x3549=(r21*sj0);
IkReal x3550=((0.4)*sj4);
IkReal x3551=(r21*sj5);
IkReal x3552=(cj3*r22);
IkReal x3553=(r11*sj5);
IkReal x3554=((9.9e-7)*cj0);
IkReal x3555=((0.4)*cj4);
IkReal x3556=(cj3*cj4);
IkReal x3557=(cj5*r00);
IkReal x3558=(r01*sj5);
IkReal x3559=(r20*sj0);
IkReal x3560=(r00*sj4);
IkReal x3561=((9.9e-7)*cj5);
IkReal x3562=(cj0*sj0);
IkReal x3563=((9.9e-7)*sj0);
IkReal x3564=(r10*sj4);
IkReal x3565=((0.4)*x3546);
IkReal x3566=(r20*x3556);
IkReal x3567=((1.93e-6)*x3544);
IkReal x3568=(r10*x3561);
IkReal x3569=((1.93e-6)*x3546);
IkReal x3570=((0.4)*sj3*sj5);
IkReal x3571=((0.4)*x3544);
IkReal x3572=(x3562*x3567);
IkReal x3573=(x3562*x3565);
evalcond[0]=((((-9.9e-7)*x3551))+(((-1.0)*x3571))+(((-1.0)*x3569))+(((-1.0)*pz))+(((-1.0)*r20*sj4*x3548))+((r22*x3555))+((x3550*x3551))+((r20*x3561)));
evalcond[1]=((((-1.0)*x3545*x3565))+(((-1.0)*sj0*x3550*x3553))+(((-1.0)*sj0*x3568))+((sj0*x3548*x3564))+((x3545*x3567))+((x3553*x3563))+((py*sj0))+(((-1.0)*r12*sj0*x3555)));
evalcond[2]=((((-1.0)*cj0*x3550*x3558))+(((-1.0)*x3554*x3557))+(((-1.0)*cj0*r02*x3555))+((x3547*x3567))+(((-1.0)*x3547*x3565))+((cj0*x3548*x3560))+((cj0*px))+((x3554*x3558)));
evalcond[3]=(((r10*x3570))+(((-1.0)*r10*x3548*x3556))+((sj0*x3569))+(((-1.0)*x3559*x3561))+(((-1.0)*cj3*r12*x3550))+((sj0*x3571))+((cj3*x3553*x3555))+((pz*sj0))+((r11*sj3*x3548))+(((9.9e-7)*sj5*x3549)));
evalcond[4]=(((r00*x3570))+((cj3*x3555*x3558))+((cj0*x3571))+((r01*sj3*x3548))+(((-1.0)*r00*x3548*x3556))+((cj0*x3569))+(((-1.0)*cj5*r20*x3554))+((x3551*x3554))+(((-1.0)*cj3*r02*x3550))+((cj0*pz)));
evalcond[5]=((((-1.0)*x3559*x3570))+((sj0*x3567))+(((-1.0)*sj3*x3548*x3549))+(((-1.0)*x3568))+(((-1.0)*sj0*x3565))+py+(((-1.0)*cj3*sj5*x3549*x3555))+(((9.9e-7)*x3553))+((sj0*x3550*x3552))+((x3548*x3556*x3559)));
evalcond[6]=((((-1.0)*cj0*r21*sj3*x3548))+(((-1.0)*cj0*x3565))+(((-1.0)*cj0*cj3*x3551*x3555))+(((-9.9e-7)*x3557))+((cj0*x3550*x3552))+(((-1.0)*cj0*r20*x3570))+px+((cj0*x3567))+((cj0*x3548*x3566))+(((9.9e-7)*x3558)));
evalcond[7]=((((-1.0)*cj0*x3550*x3553))+x3572+(((-1.0)*x3573))+(((-1.0)*cj0*r12*x3555))+((px*sj0))+((cj0*x3548*x3564))+(((-1.0)*x3557*x3563))+((x3558*x3563)));
evalcond[8]=((((-1.0)*cj5*r10*x3554))+x3572+(((-1.0)*x3573))+(((-1.0)*sj0*x3550*x3558))+((sj0*x3548*x3560))+((x3553*x3554))+(((-1.0)*r02*sj0*x3555))+((cj0*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3574=(cj4*sj1);
IkReal x3575=(cj1*sj4);
IkReal x3576=((1.0)*cj5);
IkReal x3577=(r21*sj5);
IkReal x3578=(cj1*cj4);
IkReal x3579=(sj1*sj4);
IkReal x3580=(r01*sj4*sj5);
if( IKabs((((r01*sj5*x3575))+(((-1.0)*r22*x3574))+(((-1.0)*x3577*x3579))+((r02*x3578))+(((-1.0)*r00*x3575*x3576))+((cj5*r20*x3579)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj5*x3579))+((x3575*x3577))+((r02*x3574))+((r22*x3578))+(((-1.0)*r20*x3575*x3576))+(((-1.0)*r00*x3576*x3579)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*sj5*x3575))+(((-1.0)*r22*x3574))+(((-1.0)*x3577*x3579))+((r02*x3578))+(((-1.0)*r00*x3575*x3576))+((cj5*r20*x3579))))+IKsqr((((r01*sj5*x3579))+((x3575*x3577))+((r02*x3574))+((r22*x3578))+(((-1.0)*r20*x3575*x3576))+(((-1.0)*r00*x3576*x3579))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r01*sj5*x3575))+(((-1.0)*r22*x3574))+(((-1.0)*x3577*x3579))+((r02*x3578))+(((-1.0)*r00*x3575*x3576))+((cj5*r20*x3579))), (((r01*sj5*x3579))+((x3575*x3577))+((r02*x3574))+((r22*x3578))+(((-1.0)*r20*x3575*x3576))+(((-1.0)*r00*x3576*x3579))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3581=IKcos(j2);
IkReal x3582=IKsin(j2);
IkReal x3583=((1.0)*cj3);
IkReal x3584=(cj5*r00);
IkReal x3585=((1.0)*cj4);
IkReal x3586=(r01*sj5);
IkReal x3587=((1.0)*sj4);
IkReal x3588=(cj5*sj3);
IkReal x3589=(cj5*r20);
IkReal x3590=(sj3*sj5);
IkReal x3591=(r21*sj5);
IkReal x3592=(cj1*x3581);
IkReal x3593=(cj3*cj4*sj5);
IkReal x3594=(cj1*x3582);
IkReal x3595=(sj1*x3582);
IkReal x3596=(sj1*x3581);
IkReal x3597=((1.0)*x3595);
evalcond[0]=((((-1.0)*r02*x3585))+x3596+x3594+(((-1.0)*x3586*x3587))+((sj4*x3584)));
evalcond[1]=((((-1.0)*x3587*x3591))+(((-1.0)*r22*x3585))+x3592+(((-1.0)*x3597))+((sj4*x3589)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-0.4)*x3595))+(((0.4)*x3592))+(((-9.9e-7)*x3591))+(((9.9e-7)*x3589))+(((-1.0)*pz))+(((-0.4)*sj1)));
evalcond[3]=((((0.4)*x3594))+(((0.4)*x3596))+(((0.4)*cj1))+(((-9.9e-7)*x3586))+(((9.9e-7)*x3584))+(((-1.0)*px))+(((-1.93e-6)*sj1)));
evalcond[4]=(((cj3*cj4*x3586))+(((-1.0)*r02*sj4*x3583))+x3592+((r01*x3588))+(((-1.0)*cj4*x3583*x3584))+((r00*x3590))+(((-1.0)*x3597)));
evalcond[5]=(((cj3*cj4*x3591))+((r20*x3590))+(((-1.0)*r22*sj4*x3583))+(((-1.0)*cj4*x3583*x3589))+(((-1.0)*x3594))+(((-1.0)*x3596))+((r21*x3588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3598=((1.0)*r01);
IkReal x3599=(sj1*sj4);
IkReal x3600=(cj5*r00);
IkReal x3601=(cj1*cj4);
IkReal x3602=(cj5*r20);
IkReal x3603=(cj1*sj4);
IkReal x3604=(sj5*x3603);
IkReal x3605=((1.0)*cj4*sj1);
if( IKabs(((((-1.0)*r02*x3601))+(((-1.0)*x3598*x3604))+((x3599*x3602))+((x3600*x3603))+(((-1.0)*r22*x3605))+(((-1.0)*r21*sj5*x3599)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3602*x3603))+(((-1.0)*sj5*x3598*x3599))+((r22*x3601))+(((-1.0)*r02*x3605))+((x3599*x3600))+((r21*x3604)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x3601))+(((-1.0)*x3598*x3604))+((x3599*x3602))+((x3600*x3603))+(((-1.0)*r22*x3605))+(((-1.0)*r21*sj5*x3599))))+IKsqr(((((-1.0)*x3602*x3603))+(((-1.0)*sj5*x3598*x3599))+((r22*x3601))+(((-1.0)*r02*x3605))+((x3599*x3600))+((r21*x3604))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r02*x3601))+(((-1.0)*x3598*x3604))+((x3599*x3602))+((x3600*x3603))+(((-1.0)*r22*x3605))+(((-1.0)*r21*sj5*x3599))), ((((-1.0)*x3602*x3603))+(((-1.0)*sj5*x3598*x3599))+((r22*x3601))+(((-1.0)*r02*x3605))+((x3599*x3600))+((r21*x3604))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3606=IKcos(j2);
IkReal x3607=IKsin(j2);
IkReal x3608=((1.0)*cj3);
IkReal x3609=(cj5*r00);
IkReal x3610=((1.0)*cj4);
IkReal x3611=(r01*sj5);
IkReal x3612=((1.0)*sj4);
IkReal x3613=(cj5*sj3);
IkReal x3614=(cj5*r20);
IkReal x3615=((1.0)*sj1);
IkReal x3616=(sj3*sj5);
IkReal x3617=((0.4)*sj1);
IkReal x3618=(r21*sj5);
IkReal x3619=(cj1*x3606);
IkReal x3620=(cj3*cj4*sj5);
IkReal x3621=((0.4)*x3607);
IkReal x3622=(x3606*x3615);
IkReal x3623=((1.0)*cj1*x3607);
IkReal x3624=(x3623+x3622);
evalcond[0]=((((-1.0)*x3612*x3618))+x3619+(((-1.0)*x3607*x3615))+(((-1.0)*r22*x3610))+((sj4*x3614)));
evalcond[1]=((((-1.0)*x3624))+(((-1.0)*x3611*x3612))+(((-1.0)*r02*x3610))+((sj4*x3609)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x3618))+(((9.9e-7)*x3614))+(((-1.0)*x3607*x3617))+(((-1.0)*pz))+(((-1.0)*x3617))+(((0.4)*x3619)));
evalcond[3]=((((-9.9e-7)*x3611))+(((1.93e-6)*sj1))+(((9.9e-7)*x3609))+(((-1.0)*px))+(((-1.0)*cj1*x3621))+(((-0.4)*cj1))+(((-1.0)*x3606*x3617)));
evalcond[4]=((((-1.0)*cj4*x3608*x3609))+(((-1.0)*x3619))+((cj3*cj4*x3611))+((r00*x3616))+((r01*x3613))+(((-1.0)*r02*sj4*x3608))+((sj1*x3607)));
evalcond[5]=((((-1.0)*x3624))+(((-1.0)*cj4*x3608*x3614))+((cj3*cj4*x3618))+(((-1.0)*r22*sj4*x3608))+((r21*x3613))+((r20*x3616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3625=(cj4*r12);
IkReal x3626=(cj4*r22);
IkReal x3627=(cj1*sj4);
IkReal x3628=(r11*sj5);
IkReal x3629=(r21*sj5);
IkReal x3630=((1.0)*sj1);
IkReal x3631=(sj1*sj4);
IkReal x3632=(cj5*r20);
IkReal x3633=((1.0)*cj5*r10);
if( IKabs(((((-1.0)*x3627*x3633))+((x3627*x3628))+((x3631*x3632))+((cj1*x3625))+(((-1.0)*x3626*x3630))+(((-1.0)*sj4*x3629*x3630)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3627*x3632))+((x3627*x3629))+((sj1*x3625))+(((-1.0)*cj5*r10*sj4*x3630))+((x3628*x3631))+((cj1*x3626)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x3627*x3633))+((x3627*x3628))+((x3631*x3632))+((cj1*x3625))+(((-1.0)*x3626*x3630))+(((-1.0)*sj4*x3629*x3630))))+IKsqr(((((-1.0)*x3627*x3632))+((x3627*x3629))+((sj1*x3625))+(((-1.0)*cj5*r10*sj4*x3630))+((x3628*x3631))+((cj1*x3626))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x3627*x3633))+((x3627*x3628))+((x3631*x3632))+((cj1*x3625))+(((-1.0)*x3626*x3630))+(((-1.0)*sj4*x3629*x3630))), ((((-1.0)*x3627*x3632))+((x3627*x3629))+((sj1*x3625))+(((-1.0)*cj5*r10*sj4*x3630))+((x3628*x3631))+((cj1*x3626))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3634=IKcos(j2);
IkReal x3635=IKsin(j2);
IkReal x3636=(cj3*cj4);
IkReal x3637=(r21*sj5);
IkReal x3638=((1.0)*r22);
IkReal x3639=(cj5*r10);
IkReal x3640=(cj5*r20);
IkReal x3641=(cj5*sj3);
IkReal x3642=(cj3*sj4);
IkReal x3643=(r11*sj5);
IkReal x3644=((1.0)*sj4);
IkReal x3645=((1.0)*r12);
IkReal x3646=(sj3*sj5);
IkReal x3647=(cj1*x3634);
IkReal x3648=(cj1*x3635);
IkReal x3649=(sj1*x3635);
IkReal x3650=(sj1*x3634);
IkReal x3651=((1.0)*x3649);
evalcond[0]=((((-1.0)*x3643*x3644))+x3650+x3648+((sj4*x3639))+(((-1.0)*cj4*x3645)));
evalcond[1]=(x3647+(((-1.0)*x3637*x3644))+(((-1.0)*cj4*x3638))+((sj4*x3640))+(((-1.0)*x3651)));
evalcond[2]=((((-9.9e-7)*x3637))+(((9.9e-7)*x3640))+(((-1.93e-6)*cj1))+(((-0.4)*x3649))+(((-1.0)*pz))+(((0.4)*x3647))+(((-0.4)*sj1)));
evalcond[3]=((((9.9e-7)*x3639))+(((0.4)*cj1))+(((-1.0)*py))+(((-1.93e-6)*sj1))+(((0.4)*x3648))+(((-9.9e-7)*x3643))+(((0.4)*x3650)));
evalcond[4]=(((r11*x3641))+x3647+((x3636*x3643))+((r10*x3646))+(((-1.0)*x3642*x3645))+(((-1.0)*x3636*x3639))+(((-1.0)*x3651)));
evalcond[5]=(((x3636*x3637))+((r20*x3646))+(((-1.0)*x3650))+(((-1.0)*x3648))+(((-1.0)*x3636*x3640))+((r21*x3641))+(((-1.0)*x3638*x3642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3652=((1.0)*cj1);
IkReal x3653=(sj4*sj5);
IkReal x3654=(cj5*sj4);
IkReal x3655=((1.0)*sj1);
IkReal x3656=(sj1*x3654);
IkReal x3657=(cj4*x3655);
if( IKabs((((cj1*r10*x3654))+((r20*x3656))+(((-1.0)*r21*x3653*x3655))+(((-1.0)*r11*x3652*x3653))+(((-1.0)*cj4*r12*x3652))+(((-1.0)*r22*x3657)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*cj4*r22))+(((-1.0)*r20*x3652*x3654))+((r10*x3656))+(((-1.0)*r11*x3653*x3655))+((cj1*r21*x3653))+(((-1.0)*r12*x3657)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r10*x3654))+((r20*x3656))+(((-1.0)*r21*x3653*x3655))+(((-1.0)*r11*x3652*x3653))+(((-1.0)*cj4*r12*x3652))+(((-1.0)*r22*x3657))))+IKsqr((((cj1*cj4*r22))+(((-1.0)*r20*x3652*x3654))+((r10*x3656))+(((-1.0)*r11*x3653*x3655))+((cj1*r21*x3653))+(((-1.0)*r12*x3657))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r10*x3654))+((r20*x3656))+(((-1.0)*r21*x3653*x3655))+(((-1.0)*r11*x3652*x3653))+(((-1.0)*cj4*r12*x3652))+(((-1.0)*r22*x3657))), (((cj1*cj4*r22))+(((-1.0)*r20*x3652*x3654))+((r10*x3656))+(((-1.0)*r11*x3653*x3655))+((cj1*r21*x3653))+(((-1.0)*r12*x3657))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x3658=IKcos(j2);
IkReal x3659=IKsin(j2);
IkReal x3660=(cj3*cj4);
IkReal x3661=(r21*sj5);
IkReal x3662=((1.0)*r22);
IkReal x3663=(cj5*r10);
IkReal x3664=(cj5*r20);
IkReal x3665=(cj5*sj3);
IkReal x3666=((1.0)*sj1);
IkReal x3667=(cj3*sj4);
IkReal x3668=(sj3*sj5);
IkReal x3669=(r11*sj5);
IkReal x3670=((1.0)*sj4);
IkReal x3671=((1.0)*r12);
IkReal x3672=((0.4)*sj1);
IkReal x3673=(cj1*x3658);
IkReal x3674=((0.4)*x3659);
IkReal x3675=(x3658*x3666);
IkReal x3676=((1.0)*cj1*x3659);
IkReal x3677=(x3676+x3675);
evalcond[0]=(((sj4*x3664))+(((-1.0)*x3659*x3666))+x3673+(((-1.0)*x3661*x3670))+(((-1.0)*cj4*x3662)));
evalcond[1]=(((sj4*x3663))+(((-1.0)*x3669*x3670))+(((-1.0)*cj4*x3671))+(((-1.0)*x3677)));
evalcond[2]=((((-1.93e-6)*cj1))+(((-1.0)*pz))+(((9.9e-7)*x3664))+(((0.4)*x3673))+(((-1.0)*x3659*x3672))+(((-9.9e-7)*x3661))+(((-1.0)*x3672)));
evalcond[3]=((((1.93e-6)*sj1))+(((-1.0)*py))+(((9.9e-7)*x3663))+(((-1.0)*x3658*x3672))+(((-9.9e-7)*x3669))+(((-1.0)*cj1*x3674))+(((-0.4)*cj1)));
evalcond[4]=(((r11*x3665))+((r10*x3668))+(((-1.0)*x3667*x3671))+(((-1.0)*x3673))+((sj1*x3659))+(((-1.0)*x3660*x3663))+((x3660*x3669)));
evalcond[5]=((((-1.0)*x3662*x3667))+((r20*x3668))+(((-1.0)*x3660*x3664))+((x3660*x3661))+(((-1.0)*x3677))+((r21*x3665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3678=((1.0)*sj1);
IkReal x3679=(cj5*sj4);
IkReal x3680=(r20*sj0);
IkReal x3681=((1.0)*cj1);
IkReal x3682=(cj4*r12);
IkReal x3683=(cj4*r22*sj0);
IkReal x3684=(r11*sj4*sj5);
IkReal x3685=(r21*sj0*sj4*sj5);
CheckValue<IkReal> x3686 = IKatan2WithCheck(IkReal((((sj1*x3679*x3680))+(((-1.0)*r10*x3679*x3681))+((cj1*x3682))+((cj1*x3684))+(((-1.0)*x3678*x3683))+(((-1.0)*x3678*x3685)))),IkReal((((sj1*x3684))+((sj1*x3682))+(((-1.0)*r10*x3678*x3679))+(((-1.0)*x3679*x3680*x3681))+((cj1*x3683))+((cj1*x3685)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3686.valid){
continue;
}
CheckValue<IkReal> x3687=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x3687.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x3686.value)+(((1.5707963267949)*(x3687.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x3688=IKsin(j2);
IkReal x3689=IKcos(j2);
IkReal x3690=((1.0)*cj3);
IkReal x3691=(cj5*r00);
IkReal x3692=(cj0*cj1);
IkReal x3693=(cj5*r10);
IkReal x3694=(r01*sj5);
IkReal x3695=((1.0)*sj4);
IkReal x3696=(cj5*sj3);
IkReal x3697=(cj1*sj0);
IkReal x3698=(sj3*sj5);
IkReal x3699=(cj5*r20);
IkReal x3700=((1.0)*cj4);
IkReal x3701=((1.93e-6)*sj1);
IkReal x3702=(r11*sj5);
IkReal x3703=(r21*sj5);
IkReal x3704=(cj1*x3689);
IkReal x3705=(cj3*cj4*sj5);
IkReal x3706=((0.4)*x3688);
IkReal x3707=(sj1*x3689);
IkReal x3708=((1.0)*sj1*x3688);
evalcond[0]=((((-1.0)*x3708))+x3704+((sj4*x3699))+(((-1.0)*x3695*x3703))+(((-1.0)*r22*x3700)));
evalcond[1]=((((-1.0)*r02*x3700))+((x3688*x3692))+((cj0*x3707))+((sj4*x3691))+(((-1.0)*x3694*x3695)));
evalcond[2]=(((sj0*x3707))+((x3688*x3697))+(((-1.0)*r12*x3700))+((sj4*x3693))+(((-1.0)*x3695*x3702)));
evalcond[3]=((((9.9e-7)*x3699))+(((-1.93e-6)*cj1))+(((0.4)*x3704))+(((-9.9e-7)*x3703))+(((-1.0)*pz))+(((-1.0)*sj1*x3706))+(((-0.4)*sj1)));
evalcond[4]=((((9.9e-7)*x3691))+(((0.4)*cj0*x3707))+(((0.4)*x3692))+(((-9.9e-7)*x3694))+((x3692*x3706))+(((-1.0)*px))+(((-1.0)*cj0*x3701)));
evalcond[5]=((((9.9e-7)*x3693))+(((0.4)*sj0*x3707))+(((0.4)*x3697))+((x3697*x3706))+(((-9.9e-7)*x3702))+(((-1.0)*py))+(((-1.0)*sj0*x3701)));
evalcond[6]=(((r20*x3698))+((r21*x3696))+((cj3*cj4*x3703))+(((-1.0)*x3707))+(((-1.0)*cj1*x3688))+(((-1.0)*r22*sj4*x3690))+(((-1.0)*cj4*x3690*x3699)));
evalcond[7]=(((r01*x3696))+((r00*x3698))+((x3689*x3692))+((cj3*cj4*x3694))+(((-1.0)*cj0*x3708))+(((-1.0)*r02*sj4*x3690))+(((-1.0)*cj4*x3690*x3691)));
evalcond[8]=(((x3689*x3697))+((cj3*cj4*x3702))+((r11*x3696))+(((-1.0)*sj0*x3708))+(((-1.0)*r12*sj4*x3690))+(((-1.0)*cj4*x3690*x3693))+((r10*x3698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3709=((1.0)*cj0);
IkReal x3710=(cj4*r02);
IkReal x3711=(cj1*sj4);
IkReal x3712=(cj4*r22);
IkReal x3713=(cj5*r20);
IkReal x3714=(sj1*sj4);
IkReal x3715=(sj5*x3714);
IkReal x3716=((1.0)*cj5*r00);
CheckValue<IkReal> x3717 = IKatan2WithCheck(IkReal((((cj1*x3710))+(((-1.0)*r21*x3709*x3715))+(((-1.0)*x3711*x3716))+((r01*sj5*x3711))+((cj0*x3713*x3714))+(((-1.0)*sj1*x3709*x3712)))),IkReal((((sj1*x3710))+((cj0*cj1*x3712))+(((-1.0)*x3714*x3716))+((r01*x3715))+(((-1.0)*x3709*x3711*x3713))+((cj0*r21*sj5*x3711)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3717.valid){
continue;
}
CheckValue<IkReal> x3718=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x3718.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x3717.value)+(((1.5707963267949)*(x3718.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x3719=IKsin(j2);
IkReal x3720=IKcos(j2);
IkReal x3721=((1.0)*cj3);
IkReal x3722=(cj5*r00);
IkReal x3723=(cj0*cj1);
IkReal x3724=(cj5*r10);
IkReal x3725=(r01*sj5);
IkReal x3726=((1.0)*sj4);
IkReal x3727=(cj5*sj3);
IkReal x3728=(cj1*sj0);
IkReal x3729=(sj3*sj5);
IkReal x3730=(cj5*r20);
IkReal x3731=((1.0)*cj4);
IkReal x3732=((1.93e-6)*sj1);
IkReal x3733=(r11*sj5);
IkReal x3734=(r21*sj5);
IkReal x3735=(cj1*x3720);
IkReal x3736=(cj3*cj4*sj5);
IkReal x3737=((0.4)*x3719);
IkReal x3738=(sj1*x3720);
IkReal x3739=((1.0)*sj1*x3719);
evalcond[0]=(((sj4*x3730))+(((-1.0)*x3739))+(((-1.0)*x3726*x3734))+x3735+(((-1.0)*r22*x3731)));
evalcond[1]=(((sj4*x3722))+((x3719*x3723))+((cj0*x3738))+(((-1.0)*x3725*x3726))+(((-1.0)*r02*x3731)));
evalcond[2]=(((sj4*x3724))+((x3719*x3728))+(((-1.0)*r12*x3731))+((sj0*x3738))+(((-1.0)*x3726*x3733)));
evalcond[3]=((((-1.93e-6)*cj1))+(((-9.9e-7)*x3734))+(((0.4)*x3735))+(((-1.0)*sj1*x3737))+(((-1.0)*pz))+(((9.9e-7)*x3730))+(((-0.4)*sj1)));
evalcond[4]=((((-9.9e-7)*x3725))+(((0.4)*x3723))+(((-1.0)*px))+(((9.9e-7)*x3722))+((x3723*x3737))+(((-1.0)*cj0*x3732))+(((0.4)*cj0*x3738)));
evalcond[5]=((((-9.9e-7)*x3733))+(((-1.0)*sj0*x3732))+(((0.4)*x3728))+(((-1.0)*py))+(((9.9e-7)*x3724))+(((0.4)*sj0*x3738))+((x3728*x3737)));
evalcond[6]=(((r20*x3729))+((cj3*cj4*x3734))+(((-1.0)*cj4*x3721*x3730))+(((-1.0)*r22*sj4*x3721))+(((-1.0)*x3738))+(((-1.0)*cj1*x3719))+((r21*x3727)));
evalcond[7]=(((r00*x3729))+((cj3*cj4*x3725))+((r01*x3727))+(((-1.0)*cj4*x3721*x3722))+(((-1.0)*cj0*x3739))+((x3720*x3723))+(((-1.0)*r02*sj4*x3721)));
evalcond[8]=(((cj3*cj4*x3733))+((r11*x3727))+(((-1.0)*sj0*x3739))+(((-1.0)*r12*sj4*x3721))+(((-1.0)*cj4*x3721*x3724))+((r10*x3729))+((x3720*x3728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - hsr_co605 (64c47e1f8f17a003415c7c06e6ea5378)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
